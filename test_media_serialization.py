#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –≤ Redis
"""

import asyncio
import logging
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from core.redis_client import redis_client

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

async def test_media_serialization():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤"""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤...")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞–º–∏
    test_task = {
        'text': '–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞ —Å —Ñ–æ—Ç–æ',
        'username': 'testuser',
        'chat_id': -1001234567890,
        'message_id': 123,
        'has_photo': True,
        'photo_file_ids': ['AgACAgIAAyEFAASPOkf6AAII7WiZCA_8Gq_ayc4lzX6I_EQm_Kz0AAKT9TEbyk_JSLNGZLFddhOwAQADAgADcwADNgQ', 'AgACAgIAAyEFAASPOkf6AAII7WiZCA_8Gq_ayc4lzX6I_EQm_Kz0AAKT9TEbyk_JSLNGZLFddhOwAQADAgADbQADNgQ'],
        'has_video': False,
        'video_file_ids': [],
        'has_document': False,
        'document_file_ids': [],
        'status': 'unreacted'
    }
    
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É
        logger.info("üìù –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–¥–∞—á—É...")
        task_id = await redis_client.save_task(test_task)
        logger.info(f"‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —Å ID: {task_id}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–¥–∞—á—É
        logger.info("üìñ –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–¥–∞—á—É –∏–∑ Redis...")
        saved_task = await redis_client.get_task(task_id)
        
        if not saved_task:
            logger.error("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ Redis!")
            return False
        
        logger.info("üìã –ê–Ω–∞–ª–∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:")
        logger.info(f"   - text: {saved_task.get('text')}")
        logger.info(f"   - has_photo: {saved_task.get('has_photo')} (type: {type(saved_task.get('has_photo'))})")
        logger.info(f"   - photo_file_ids: {saved_task.get('photo_file_ids')} (type: {type(saved_task.get('photo_file_ids'))})")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
        photo_file_ids = saved_task.get('photo_file_ids')
        if isinstance(photo_file_ids, list):
            logger.info("‚úÖ photo_file_ids –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∫–∞–∫ —Å–ø–∏—Å–æ–∫!")
            logger.info(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ file_id: {len(photo_file_ids)}")
            for i, file_id in enumerate(photo_file_ids):
                logger.info(f"   file_id[{i}]: {file_id} (length: {len(file_id)})")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å file_id
                if len(file_id) > 10 and file_id.startswith('AgAC'):
                    logger.info(f"   ‚úÖ file_id[{i}] –≤—ã–≥–ª—è–¥–∏—Ç –≤–∞–ª–∏–¥–Ω—ã–º")
                else:
                    logger.warning(f"   ‚ö†Ô∏è file_id[{i}] –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º")
        else:
            logger.error(f"‚ùå photo_file_ids —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∫–∞–∫ {type(photo_file_ids)}, –∞ –Ω–µ –∫–∞–∫ —Å–ø–∏—Å–æ–∫!")
            logger.error(f"   –ó–Ω–∞—á–µ–Ω–∏–µ: {photo_file_ids}")
            return False
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ç–æ (—Å–∏–º—É–ª—è—Ü–∏—è)
        logger.info("üñºÔ∏è –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ...")
        if saved_task.get('has_photo') and saved_task.get('photo_file_ids'):
            photo_file_ids = saved_task.get('photo_file_ids', [])
            if isinstance(photo_file_ids, list) and photo_file_ids:
                photo_file_id = photo_file_ids[-1]  # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π (–Ω–∞–∏–±–æ–ª—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞)
                logger.info(f"   –ò—Å–ø–æ–ª—å–∑—É–µ–º file_id: {photo_file_id}")
                logger.info(f"   –î–ª–∏–Ω–∞ file_id: {len(photo_file_id)}")
                
                if len(photo_file_id) > 10:
                    logger.info("‚úÖ file_id –≤—ã–≥–ª—è–¥–∏—Ç –≤–∞–ª–∏–¥–Ω—ã–º –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏!")
                else:
                    logger.error("‚ùå file_id —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π!")
                    return False
            else:
                logger.error("‚ùå photo_file_ids –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ø–∏—Å–∫–æ–º –∏–ª–∏ –ø—É—Å—Ç!")
                return False
        
        # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        logger.info("üßπ –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...")
        await redis_client.conn.delete(f"task:{task_id}")
        
        logger.info("üéâ –¢–µ—Å—Ç —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {e}", exc_info=True)
        return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤...")
    
    success = await test_media_serialization()
    
    if success:
        logger.info("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        return 0
    else:
        logger.error("‚ùå –¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏!")
        return 1

if __name__ == "__main__":
    exit_code = asyncio.run(main())
    sys.exit(exit_code)
