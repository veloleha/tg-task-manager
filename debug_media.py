#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º —Å –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞–º–∏ –≤ —Å–∏—Å—Ç–µ–º–µ –∑–∞–¥–∞—á
"""
import asyncio
import json
import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from core.redis_client import redis_client
from core.settings import settings

async def test_redis_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis"""
    try:
        await redis_client.connect()
        print("‚úÖ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–¥–∞—á–∏
        tasks = await redis_client.get_all_tasks()
        print(f"üìä –í—Å–µ–≥–æ –∑–∞–¥–∞—á –≤ Redis: {len(tasks)}")
        
        # –ù–∞—Ö–æ–¥–∏–º –∑–∞–¥–∞—á–∏ —Å –º–µ–¥–∏–∞
        media_tasks = []
        for task_id, task in tasks.items():
            if any(task.get(key, False) for key in ['has_photo', 'has_video', 'has_document']):
                media_tasks.append((task_id, task))
        
        print(f"üì∑ –ó–∞–¥–∞—á —Å –º–µ–¥–∏–∞: {len(media_tasks)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Å –º–µ–¥–∏–∞
        if media_tasks:
            print("\nüîç –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Å –º–µ–¥–∏–∞:")
            for task_id, task in media_tasks[-3:]:
                print(f"  Task ID: {task_id}")
                print(f"  Has photo: {task.get('has_photo', False)}")
                print(f"  Has video: {task.get('has_video', False)}")
                print(f"  Has document: {task.get('has_document', False)}")
                print(f"  Support media message ID: {task.get('support_media_message_id', 'None')}")
                print(f"  Photo file IDs: {task.get('photo_file_ids', [])}")
                print(f"  Status: {task.get('status', 'unknown')}")
                print(f"  Current topic: {task.get('current_topic', 'unknown')}")
                print("  ---")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Redis: {e}")
        return False

async def test_settings():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    print(f"üîß FORUM_CHAT_ID (–æ—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏): {settings.FORUM_CHAT_ID}")
    print(f"üîß MAIN_CHAT_ID (–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é): {settings.MAIN_CHAT_ID}")
    print("(TASK_INBOX_CHAT_ID –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ)")

async def main():
    print("üöÄ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤")
    print("=" * 50)
    
    await test_settings()
    print()
    
    redis_ok = await test_redis_connection()
    
    if redis_ok:
        print("\n‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
    else:
        print("\n‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã")

if __name__ == "__main__":
    asyncio.run(main())
