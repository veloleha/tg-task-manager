import asyncio
import logging
from core.redis_client import redis_client
from bots.task_bot.task_bot import TaskBot

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def test_assignee_functionality():
    """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è"""
    try:
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è...")
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Redis
        await redis_client.connect()
        logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–¥–∞—á—É
        test_task_data = {
            "text": "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è",
            "user_id": "123456789",
            "username": "test_user",
            "chat_id": "-1002269851341",
            "message_id": "987654321",
            "task_number": 17,
            "support_message_id": 5573,
            "task_link": "https://t.me/c/1002269851341/5570",
            "status": "waiting",
            "created_at": "2025-08-01T11:06:56.714084",
            "updated_at": "2025-08-01T11:06:56.714084"
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–¥–∞—á—É
        task_id = await redis_client.save_task(test_task_data)
        logger.info(f"‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ —Å ID: {task_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        task = await redis_client.get_task(task_id)
        if not task:
            logger.error("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ Redis")
            return
        
        logger.info(f"‚úÖ –ó–∞–¥–∞—á–∞ –ø–æ–ª—É—á–µ–Ω–∞ –∏–∑ Redis: {task.get('status')}, –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {task.get('assignee', '–Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω')}")
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä TaskBot –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        task_bot = TaskBot()
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ "in_progress" —Å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        test_username = "test_assignee"
        logger.info(f"üîÑ –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –Ω–∞ 'in_progress' –∏ –Ω–∞–∑–Ω–∞—á–∞–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è: {test_username}")
        
        # –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ _change_status –Ω–∞–ø—Ä—è–º—É—é
        await task_bot._change_status(task_id, "in_progress", test_username)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–∞—Ç—É—Å –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω—ã
        updated_task = await redis_client.get_task(task_id)
        if not updated_task:
            logger.error("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
            return
        
        if updated_task.get("status") == "in_progress" and updated_task.get("assignee") == test_username:
            logger.info(f"‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ 'in_progress', –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–∞–∑–Ω–∞—á–µ–Ω: {test_username}")
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏. –°—Ç–∞—Ç—É—Å: {updated_task.get('status')}, –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {updated_task.get('assignee')}")
            return
        
        logger.info("üéâ –¢–µ—Å—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∞: {e}", exc_info=True)
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        await redis_client.close()
        logger.info("üîí –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Redis –∑–∞–∫—Ä—ã—Ç–æ")

if __name__ == "__main__":
    asyncio.run(test_assignee_functionality())
