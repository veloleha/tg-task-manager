import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
import asyncio
from datetime import datetime, timedelta
import aiomysql
from aiogram.exceptions import TelegramRetryAfter, TelegramBadRequest

# –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
API_TOKEN = '7373455502:AAEoJvfwMdtuSXa7egtmPmCo2hP0BWVrSDE'

# ID —á–∞—Ç–æ–≤
USER_CHAT_ID = -1002402961402  # –ß–∞—Ç –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
BUTTONS_CHAT_ID = -1002269851341  # –ß–∞—Ç –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∫–Ω–æ–ø–∫–∞–º–∏ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ñ–æ—Ä—É–º–æ–º)

# ID —Ç–µ–º –≤ —Ñ–æ—Ä—É–º–µ
TOPIC_WAITING = 317  # ID —Ç–µ–º—ã "–í –æ–∂–∏–¥–∞–Ω–∏–∏"
TOPIC_IN_PROGRESS = 319  # ID —Ç–µ–º—ã "–í —Ä–∞–±–æ—Ç–µ"
TOPIC_CLOSED = 321  # ID —Ç–µ–º—ã "–ó–∞–∫—Ä—ã—Ç—ã–µ"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /week
@dp.message(Command("week"))
async def handle_week_command(message: types.Message):
    await send_report(days=7)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /day
@dp.message(Command("day"))
async def handle_day_command(message: types.Message):
    await send_report(days=1)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞
async def send_report(days: int):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
    end_date = datetime.now()
    start_date = end_date - timedelta(days=days)

    pool = await aiomysql.create_pool(host='localhost', port=3306,
                                      user='root', password='hesoyam',
                                      db='task_bot', autocommit=True)
    async with pool.acquire() as conn:
        async with conn.cursor() as cur:
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
            await cur.execute('''
                SELECT m.message_text, m.status, u.username
                FROM messages m
                JOIN users u ON m.user_id = u.user_id
                WHERE m.created_at BETWEEN %s AND %s
                ORDER BY u.username, m.created_at
            ''', (start_date, end_date))
            results = await cur.fetchall()

    # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã: {results}")

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    report = {}
    for message_text, status, username in results:
        if username not in report:
            report[username] = {"completed": [], "in_progress": []}
        
        # –ï—Å–ª–∏ message_text —Ä–∞–≤–µ–Ω None, –∑–∞–º–µ–Ω—è–µ–º –µ–≥–æ –Ω–∞ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
        message_text = message_text or ""
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.info(f"–ó–∞–¥–∞—á–∞: {message_text}, —Å—Ç–∞—Ç—É—Å: {status}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}")
        
        if status == "closed":
            report[username]["completed"].append(message_text)
        else:
            report[username]["in_progress"].append(message_text)

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    formatted_report = ""
    for username, tasks in report.items():
        formatted_report += f"@{username}:\n"
        
        # –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        if tasks["completed"]:
            formatted_report += "–í—ã–ø–æ–ª–Ω–µ–Ω–æ:\n"
            for i, task in enumerate(tasks["completed"], start=1):
                formatted_report += f"{i}. {task}\n"
        
        # –ó–∞–¥–∞—á–∏ –≤ —Ä–∞–±–æ—Ç–µ
        if tasks["in_progress"]:
            formatted_report += "–í —Ä–∞–±–æ—Ç–µ:\n"
            for i, task in enumerate(tasks["in_progress"], start=1):
                formatted_report += f"{i}. {task}\n"
        
        formatted_report += "\n"

    # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logger.info(f"–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç:\n{formatted_report}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –≤ —Ç–µ–º—É
    try:
        await bot.send_message(
            chat_id=BUTTONS_CHAT_ID,
            message_thread_id=315,  # ID —Ç–µ–º—ã
            text=formatted_report,
            parse_mode=None  # –û—Ç–∫–ª—é—á–∞–µ–º Markdown
        )
    except TelegramBadRequest as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–∞: {e}")
        # –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.error(f"–¢–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞: {formatted_report}")

# –°—á–µ—Ç—á–∏–∫–∏ —Ä–µ–∞–∫—Ü–∏–π
counters = {
    "unreacted": 0,  # –ù–µ –æ—Ç—Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    "fire": 0,       # –°–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–µ–∞–∫—Ü–∏–µ–π üî•
    "lightning": 0,  # –°–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–µ–∞–∫—Ü–∏–µ–π ‚ö°
    "ok": 0,         # –°–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–µ–∞–∫—Ü–∏–µ–π üëå
    "closed": 0      # –ó–∞–∫—Ä—ã—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã
}

# –°–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
message_states = {}

# –•—Ä–∞–Ω–µ–Ω–∏–µ ID —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ç–µ–º–∞—Ö
topic_messages = {
    TOPIC_WAITING: {},
    TOPIC_IN_PROGRESS: {},
    TOPIC_CLOSED: {}
}

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
pinned_message_text = None

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è "–æ–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞"
awaiting_answer = {}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async def init_db():
    pool = await aiomysql.create_pool(host='localhost', port=3306,
                                      user='root', password='hesoyam',
                                      db='task_bot', autocommit=True)
    logger.info("–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö MySQL.")
    async with pool.acquire() as conn:
        async with conn.cursor() as cur:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ messages
            await cur.execute("SHOW TABLES LIKE 'messages'")
            if not await cur.fetchone():
                await cur.execute('''
                    CREATE TABLE messages (
                        id INT AUTO_INCREMENT PRIMARY KEY,
                        user_id INT,
                        chat_id BIGINT,
                        message_text TEXT,
                        bot_message_id BIGINT,  # ID —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
                        user_message_id BIGINT,  # ID —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        status VARCHAR(50) DEFAULT 'initial',
                        message_thread_id BIGINT,  # ID —Ç–µ–º—ã
                        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                    )
                ''')

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ users
            await cur.execute("SHOW TABLES LIKE 'users'")
            if not await cur.fetchone():
                await cur.execute('''
                    CREATE TABLE users (
                        id INT AUTO_INCREMENT PRIMARY KEY,
                        user_id INT UNIQUE,
                        username VARCHAR(255),
                        first_name VARCHAR(255),
                        last_name VARCHAR(255)
                    )
                ''')

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ counters
            await cur.execute("SHOW TABLES LIKE 'counters'")
            if not await cur.fetchone():
                await cur.execute('''
                    CREATE TABLE counters (
                        id INT AUTO_INCREMENT PRIMARY KEY,
                        unreacted INT DEFAULT 0,
                        fire INT DEFAULT 0,
                        lightning INT DEFAULT 0,
                        ok INT DEFAULT 0,
                        closed INT DEFAULT 0
                    )
                ''')
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤, –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞
                await cur.execute('INSERT INTO counters (unreacted, fire, lightning, ok, closed) VALUES (0, 0, 0, 0, 0)')
            else:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ
                await cur.execute('SELECT COUNT(*) FROM counters')
                if (await cur.fetchone())[0] == 0:
                    await cur.execute('INSERT INTO counters (unreacted, fire, lightning, ok, closed) VALUES (0, 0, 0, 0, 0)')

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ button_states
            await cur.execute("SHOW TABLES LIKE 'button_states'")
            if not await cur.fetchone():
                await cur.execute('''
                    CREATE TABLE button_states (
                        id INT AUTO_INCREMENT PRIMARY KEY,
                        bot_message_id BIGINT UNIQUE,  # ID —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
                        state VARCHAR(50) DEFAULT 'initial',  # –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
                        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                    )
                ''')

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ topic_messages
            await cur.execute("SHOW TABLES LIKE 'topic_messages'")
            if not await cur.fetchone():
                await cur.execute('''
                    CREATE TABLE topic_messages (
                        id INT AUTO_INCREMENT PRIMARY KEY,
                        bot_message_id BIGINT,  # ID —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
                        topic_id BIGINT,  # ID —Ç–µ–º—ã
                        message_id BIGINT,  # ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–µ–º–µ
                        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                    )
                ''')
    pool.close()
    await pool.wait_closed()

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async def get_counters():
    pool = await aiomysql.create_pool(host='localhost', port=3306,
                                      user='root', password='hesoyam',
                                      db='task_bot', autocommit=True)
    async with pool.acquire() as conn:
        async with conn.cursor() as cur:
            await cur.execute('SELECT unreacted, fire, lightning, ok, closed FROM counters WHERE id = 1')
            counters = await cur.fetchone()
            if counters:  # –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å –Ω–∞–π–¥–µ–Ω–∞
                return {
                    "unreacted": counters[0],
                    "fire": counters[1],
                    "lightning": counters[2],
                    "ok": counters[3],
                    "closed": counters[4]
                }
            else:  # –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å —Å –Ω—É–ª–µ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
                await cur.execute('INSERT INTO counters (unreacted, fire, lightning, ok, closed) VALUES (0, 0, 0, 0, 0)')
                return {
                    "unreacted": 0,
                    "fire": 0,
                    "lightning": 0,
                    "ok": 0,
                    "closed": 0
                }
    pool.close()
    await pool.wait_closed()

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
async def update_counters(counters):
    pool = await aiomysql.create_pool(host='localhost', port=3306,
                                      user='root', password='hesoyam',
                                      db='task_bot', autocommit=True)
    async with pool.acquire() as conn:
        async with conn.cursor() as cur:
            await cur.execute('''
                UPDATE counters
                SET unreacted = %s, fire = %s, lightning = %s, ok = %s, closed = %s
                WHERE id = 1
            ''', (counters["unreacted"], counters["fire"], counters["lightning"], counters["ok"], counters["closed"]))
    pool.close()
    await pool.wait_closed()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
async def update_pinned_message(chat_id: int):
    global pinned_message_text
    counters = await get_counters()
    new_text = (f"üî•: {counters['fire']}\n"
                f"‚ö°: {counters['lightning']}\n"
                f"üëå: {counters['ok']}\n"
                f"‚ùì: {counters['unreacted']}\n"
                f"‚úÖ: {counters['closed']}")
    
    # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑–º–µ–Ω–∏–ª—Å—è
    if pinned_message_text != new_text:
        # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        chat = await bot.get_chat(chat_id)
        pinned_message_id = chat.pinned_message.message_id if chat.pinned_message else None
        
        if pinned_message_id:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            await bot.edit_message_text(
                chat_id=chat_id,
                message_id=pinned_message_id,
                text=new_text
            )
        else:
            # –ï—Å–ª–∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –∏ –∑–∞–∫—Ä–µ–ø–ª—è–µ–º –µ–≥–æ
            sent_message = await bot.send_message(
                chat_id=chat_id,
                text=new_text
            )
            await bot.pin_chat_message(chat_id=chat_id, message_id=sent_message.message_id)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        pinned_message_text = new_text

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å —É—á–µ—Ç–æ–º —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
def create_keyboard(message_id: int, state: str = "initial"):
    if state == "initial":
        return InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üî•", callback_data=f"reaction_fire_{message_id}"),
                InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_message_{message_id}"),
                InlineKeyboardButton(text="‚ùì –í–æ–ø—Ä–æ—Å", callback_data=f"question_{message_id}")
            ]
        ])
    elif state == "fire":
        return InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚ö°", callback_data=f"reaction_lightning_{message_id}"),
                InlineKeyboardButton(text="‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", callback_data=f"reminder_{message_id}")
            ]
        ])
    elif state == "lightning":
        return InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üëå", callback_data=f"reaction_ok_{message_id}"),
                InlineKeyboardButton(text="‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", callback_data=f"reminder_{message_id}")
            ]
        ])
    elif state == "ok":
        return InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üîÑ Restart", callback_data=f"restart_task_{message_id}")
            ]
        ])
    elif state == "closed":
        return InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üîÑ –°–±—Ä–æ—Å", callback_data=f"reset_question_{message_id}")
            ]
        ])

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
def generate_message_link(chat_id: int, message_id: int) -> str:
    if str(chat_id).startswith('-100'):
        chat_id_for_link = str(chat_id).replace('-100', '')
    else:
        chat_id_for_link = str(chat_id)
    return f"https://t.me/c/{chat_id_for_link}/{message_id}"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ç–µ–º—É
async def send_to_topic(message_text: str, state: str, previous_state: str = None, bot_message_id: int = None, user_id: int = None):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ç–µ–º—É –∏ —É–¥–∞–ª—è–µ—Ç –µ–≥–æ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Ç–µ–º—ã (–µ—Å–ª–∏ –µ—Å—Ç—å).
    
    :param message_text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.
    :param state: –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–¥–∞—á–∏.
    :param previous_state: –ü—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å).
    :param bot_message_id: ID —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞.
    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º ID —Ç–µ–º—ã –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if state == "fire":
        topic_id = TOPIC_WAITING
    elif state == "lightning":
        topic_id = TOPIC_IN_PROGRESS
    elif state == "ok":
        topic_id = TOPIC_CLOSED
    else:
        return

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Ç–µ–º—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if previous_state:
        if previous_state == "fire":
            previous_topic_id = TOPIC_WAITING
        elif previous_state == "lightning":
            previous_topic_id = TOPIC_IN_PROGRESS
        elif previous_state == "ok":
            previous_topic_id = TOPIC_CLOSED
        else:
            previous_topic_id = None

        if previous_topic_id:
            # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Ç–µ–º–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            pool = await aiomysql.create_pool(host='localhost', port=3306,
                                              user='root', password='hesoyam',
                                              db='task_bot', autocommit=True)
            async with pool.acquire() as conn:
                async with conn.cursor() as cur:
                    await cur.execute('SELECT message_id FROM topic_messages WHERE bot_message_id = %s AND topic_id = %s',
                                      (bot_message_id, previous_topic_id))
                    result = await cur.fetchone()
                    if result:
                        message_id = result[0]
                        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Ç–µ–º—ã
                        try:
                            await bot.delete_message(
                                chat_id=BUTTONS_CHAT_ID,
                                message_id=message_id
                            )
                            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message_id} —É–¥–∞–ª–µ–Ω–æ –∏–∑ —Ç–µ–º—ã {previous_topic_id}.")
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                        # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                        await cur.execute('DELETE FROM topic_messages WHERE bot_message_id = %s AND topic_id = %s',
                                          (bot_message_id, previous_topic_id))
            pool.close()
            await pool.wait_closed()

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ –≤ BUTTONS_CHAT_ID
    message_link = generate_message_link(BUTTONS_CHAT_ID, bot_message_id)
    logger.info(f"–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞ —Å—Å—ã–ª–∫–∞: {message_link}")

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Å—Å—ã–ª–∫–æ–π
    message_text_with_link = f"{message_text}\n\n[–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ]({message_link})"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –Ω–æ–≤—É—é —Ç–µ–º—É
    sent_message = await bot.send_message(
        chat_id=BUTTONS_CHAT_ID,
        message_thread_id=topic_id,  # –£–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–º—É
        text=message_text_with_link,
        parse_mode="Markdown"
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –Ω–æ–≤–æ–π —Ç–µ–º–µ
    topic_messages[topic_id][message_text] = sent_message.message_id

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    pool = await aiomysql.create_pool(host='localhost', port=3306,
                                      user='root', password='hesoyam',
                                      db='task_bot', autocommit=True)
    async with pool.acquire() as conn:
        async with conn.cursor() as cur:
            await cur.execute('''
                INSERT INTO topic_messages (bot_message_id, topic_id, message_id)
                VALUES (%s, %s, %s)
            ''', (bot_message_id, topic_id, sent_message.message_id))
    pool.close()
    await pool.wait_closed()

# –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ç–µ–º–∞—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
async def restore_topic_messages():
    pool = await aiomysql.create_pool(host='localhost', port=3306,
                                      user='root', password='hesoyam',
                                      db='task_bot', autocommit=True)
    async with pool.acquire() as conn:
        async with conn.cursor() as cur:
            await cur.execute('SELECT bot_message_id, topic_id, message_id FROM topic_messages')
            results = await cur.fetchall()
            for bot_message_id, topic_id, message_id in results:
                topic_messages[topic_id][bot_message_id] = message_id
    pool.close()
    await pool.wait_closed()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /clear
@dp.message(Command("clear"))
async def handle_clear_command(message: types.Message):
    global counters
    logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /clear")
    pool = await aiomysql.create_pool(host='localhost', port=3306,
                                      user='root', password='hesoyam',
                                      db='task_bot', autocommit=True)
    async with pool.acquire() as conn:
        async with conn.cursor() as cur:
            await cur.execute('TRUNCATE TABLE counters')
            await cur.execute('INSERT INTO counters (unreacted, fire, lightning, ok, closed) VALUES (0, 0, 0, 0, 0)')
    pool.close()
    await pool.wait_closed()
    await update_pinned_message(BUTTONS_CHAT_ID)  # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    counters = await get_counters()
    await message.answer("–í—Å–µ —Å—á–µ—Ç—á–∏–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã, –∏ –≤—Å–µ —Ç–µ–º—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω—ã!")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"
@dp.callback_query(lambda c: c.data.startswith("reminder_"))
async def process_reminder_callback(callback_query: types.CallbackQuery):
    bot_message_id = int(callback_query.data.split("_")[1])
    state = message_states.get(bot_message_id, "initial")
    
    if state in ["fire", "lightning"]:
        await callback_query.answer("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
        await send_reminder(bot_message_id)
    else:
        await callback_query.answer("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –º–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞–¥–∞—á –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ 'fire' –∏–ª–∏ 'lightning'.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
async def send_reminder(bot_message_id: int):
    while True:
        await asyncio.sleep(3600)  # –û–∂–∏–¥–∞–Ω–∏–µ 1 —á–∞—Å–∞
        state = message_states.get(bot_message_id, "initial")
        if state not in ["fire", "lightning"]:
            break
        
        pool = await aiomysql.create_pool(host='localhost', port=3306,
                                          user='root', password='hesoyam',
                                          db='task_bot', autocommit=True)
        async with pool.acquire() as conn:
            async with conn.cursor() as cur:
                await cur.execute('SELECT message_text FROM messages WHERE bot_message_id = %s', (bot_message_id,))
                result = await cur.fetchone()
                if result:
                    message_text = result[0]
                    message_link = generate_message_link(BUTTONS_CHAT_ID, bot_message_id)
                    reminder_text = f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {message_text}\n\n[–°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–¥–∞—á—É]({message_link})"
                    await bot.send_message(
                        chat_id=BUTTONS_CHAT_ID,
                        text=reminder_text,
                        parse_mode="Markdown"
                    )
        pool.close()
        await pool.wait_closed()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@dp.message(lambda message: message.chat.id in [USER_CHAT_ID, BUTTONS_CHAT_ID])
async def handle_user_message(message: types.Message):
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.text}")
    
    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏—à–ª–æ –∏–∑ USER_CHAT_ID
    if message.chat.id == USER_CHAT_ID:
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ –æ—Ç—Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        counters["unreacted"] += 1
        await update_counters(counters)
        await update_pinned_message(BUTTONS_CHAT_ID)  # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        message_states[message.message_id] = "initial"

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ç–µ–º—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
        message_thread_id = message.message_thread_id if message.is_topic_message else None

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –Ω–∞—á–∞–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        keyboard = create_keyboard(message.message_id, state="initial")

        # –£–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ @username
        username = f"@{message.from_user.username}" if message.from_user.username else message.from_user.first_name

        # –ï—Å–ª–∏ –µ—Å—Ç—å –º–µ–¥–∏–∞—Ñ–∞–π–ª (—Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ)
        if message.photo or message.video:
            media = message.photo[-1] if message.photo else message.video
            caption = message.caption if message.caption else "–ú–µ–¥–∏–∞—Ñ–∞–π–ª –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è."
            message_text = caption  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

            # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –º–µ–¥–∏–∞—Ñ–∞–π–ª –≤ —á–∞—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏
            sent_message = await bot.send_photo(
                chat_id=BUTTONS_CHAT_ID,
                photo=media.file_id,
                caption=f"{username} –Ω–∞–ø–∏—Å–∞–ª: {caption}",
                reply_markup=keyboard
            ) if message.photo else await bot.send_video(
                chat_id=BUTTONS_CHAT_ID,
                video=media.file_id,
                caption=f"{username} –Ω–∞–ø–∏—Å–∞–ª: {caption}",
                reply_markup=keyboard
            )
        else:
            # –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            message_text = message.text  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            sent_message = await bot.send_message(
                chat_id=BUTTONS_CHAT_ID,
                text=f"{username} –Ω–∞–ø–∏—Å–∞–ª: {message.text}",
                reply_markup=keyboard
            )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ BUTTONS_CHAT_ID
        bot_message_id = sent_message.message_id

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—É users
        pool = await aiomysql.create_pool(host='localhost', port=3306,
                                          user='root', password='hesoyam',
                                          db='task_bot', autocommit=True)
        async with pool.acquire() as conn:
            async with conn.cursor() as cur:
                await cur.execute('''
                    INSERT INTO users (user_id, username, first_name, last_name)
                    VALUES (%s, %s, %s, %s) AS new
                    ON DUPLICATE KEY UPDATE
                    username = new.username,
                    first_name = new.first_name,
                    last_name = new.last_name
                ''', (message.from_user.id, message.from_user.username, message.from_user.first_name, message.from_user.last_name))
        pool.close()
        await pool.wait_closed()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—É messages
        pool = await aiomysql.create_pool(host='localhost', port=3306,
                                          user='root', password='hesoyam',
                                          db='task_bot', autocommit=True)
        async with pool.acquire() as conn:
            async with conn.cursor() as cur:
                try:
                    await cur.execute('''
                        INSERT INTO messages (user_id, chat_id, message_text, bot_message_id, user_message_id, status, message_thread_id)
                        VALUES (%s, %s, %s, %s, %s, %s, %s)
                    ''', (message.from_user.id, message.chat.id, message_text, bot_message_id, message.message_id, "initial", message_thread_id))
                    logger.info(f"–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü—É messages: user_id={message.from_user.id}, chat_id={message.chat.id}, bot_message_id={bot_message_id}, message_text={message_text}, user_message_id={message.message_id}, message_thread_id={message_thread_id}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É messages: {e}")
        pool.close()
        await pool.wait_closed()

    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏—à–ª–æ –∏–∑ BUTTONS_CHAT_ID –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–∂–∏–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç–∞
    elif message.chat.id == BUTTONS_CHAT_ID and message.from_user.id in awaiting_answer:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ "–æ–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞"
        user_data = awaiting_answer.pop(message.from_user.id)
        bot_message_id = user_data["bot_message_id"]
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ç–ø—Ä–∞–≤–∏–ª –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å.")

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å
        await handle_answer(message, bot_message_id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏
@dp.callback_query(lambda c: c.data.startswith("reaction_") or c.data.startswith("delete_") or c.data.startswith("restart_") or c.data.startswith("question_") or c.data.startswith("reset_"))
async def process_callback_reaction(callback_query: types.CallbackQuery):
    global counters
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ callback: {callback_query.data}")

    # –ü–æ–ª—É—á–∞–µ–º bot_message_id –∏–∑ callback-–∑–∞–ø—Ä–æ—Å–∞
    bot_message_id = callback_query.message.message_id

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ user_message_id –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    pool = await aiomysql.create_pool(host='localhost', port=3306,
                                      user='root', password='hesoyam',
                                      db='task_bot', autocommit=True)
    async with pool.acquire() as conn:
        async with conn.cursor() as cur:
            await cur.execute('SELECT user_message_id, message_text, message_thread_id FROM messages WHERE bot_message_id = %s',
                              (bot_message_id,))
            result = await cur.fetchone()
            if result:
                user_message_id, original_message_text, message_thread_id = result
                logger.info(f"–ù–∞–π–¥–µ–Ω user_message_id: {user_message_id}, original_message_text: {original_message_text}, message_thread_id: {message_thread_id}")
            else:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è bot_message_id={bot_message_id}")
                return
    pool.close()
    await pool.wait_closed()

    # –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
    if callback_query.data.startswith("delete_"):
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ BUTTONS_CHAT_ID
        await bot.delete_message(
            chat_id=BUTTONS_CHAT_ID,
            message_id=bot_message_id
        )
        # –£–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ–æ—Ç—Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        counters["unreacted"] -= 1
        await update_counters(counters)
        await update_pinned_message(BUTTONS_CHAT_ID)  # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback_query.answer("–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ!")
        return

    # –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "Restart"
    if callback_query.data.startswith("restart_"):
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–¥–∞—á–∏ –Ω–∞ "lightning" (–≤ —Ä–∞–±–æ—Ç–µ)
        message_states[bot_message_id] = "lightning"

        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ "lightning" –∏ —É–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫ "ok"
        counters["lightning"] += 1
        counters["ok"] -= 1

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = create_keyboard(bot_message_id, state="lightning")
        try:
            await callback_query.message.edit_reply_markup(reply_markup=keyboard)
        except TelegramRetryAfter as e:
            logger.warning(f"–û—à–∏–±–∫–∞ Flood control: {e}. –ñ–¥–µ–º {e.retry_after} —Å–µ–∫—É–Ω–¥.")
            await asyncio.sleep(e.retry_after)
            await callback_query.message.edit_reply_markup(reply_markup=keyboard)

        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∑–∞–¥–∞—á—É –≤ —Ç–µ–º—É "–í —Ä–∞–±–æ—Ç–µ"
        await send_to_topic(
            original_message_text,
            "lightning",
            "ok",
            bot_message_id,
            callback_query.from_user.id if callback_query and callback_query.from_user else None  # –ò—Å–ø–æ–ª—å–∑—É–µ–º user_id
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
        await update_counters(counters)
        await update_pinned_message(BUTTONS_CHAT_ID)  # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback_query.answer("–ó–∞–¥–∞—á–∞ —Å–Ω–æ–≤–∞ –≤ —Ä–∞–±–æ—Ç–µ!")
        return

    # –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–í–æ–ø—Ä–æ—Å"
    if callback_query.data.startswith("question_"):
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ "awaiting_answer" –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = callback_query.from_user.id
        awaiting_answer[user_id] = {
            "bot_message_id": callback_query.message.message_id,  # ID —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
            "timestamp": datetime.now()  # –í—Ä–µ–º—è –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
        }
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ–∂–∏–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å.")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–≤–æ–¥ –æ—Ç–≤–µ—Ç–∞
        await bot.send_message(
            chat_id=BUTTONS_CHAT_ID,
            text="–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å:"
        )

        await callback_query.answer("–û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å...")
        return

    # –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–°–±—Ä–æ—Å"
    if callback_query.data.startswith("reset_"):
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–¥–∞—á–∏ –Ω–∞ "initial"
        message_states[bot_message_id] = "initial"

        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ "unreacted" –∏ —É–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫ "closed"
        counters["unreacted"] += 1
        counters["closed"] -= 1

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = create_keyboard(bot_message_id, state="initial")
        try:
            await callback_query.message.edit_reply_markup(reply_markup=keyboard)
        except TelegramRetryAfter as e:
            logger.warning(f"–û—à–∏–±–∫–∞ Flood control: {e}. –ñ–¥–µ–º {e.retry_after} —Å–µ–∫—É–Ω–¥.")
            await asyncio.sleep(e.retry_after)
            await callback_query.message.edit_reply_markup(reply_markup=keyboard)

        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∑–∞–¥–∞—á—É –≤ —Ç–µ–º—É "–í –æ–∂–∏–¥–∞–Ω–∏–∏"
        await send_to_topic(
            original_message_text,
            "initial",
            "closed",
            bot_message_id,
            callback_query.from_user.id if callback_query and callback_query.from_user else None  # –ò—Å–ø–æ–ª—å–∑—É–µ–º user_id
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
        await update_counters(counters)
        await update_pinned_message(BUTTONS_CHAT_ID)  # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback_query.answer("–í–æ–ø—Ä–æ—Å —Å–±—Ä–æ—à–µ–Ω!")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø —Ä–µ–∞–∫—Ü–∏–∏ –∏–∑ callback_data
    reaction_type = callback_query.data.split("_")[1]

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    current_state = message_states.get(bot_message_id, "initial")

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∞–∫—Ü–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if current_state == "initial" and reaction_type == "fire":
        counters["fire"] += 1
        counters["unreacted"] -= 1
        new_state = "fire"
    elif current_state == "fire" and reaction_type == "lightning":
        counters["lightning"] += 1
        counters["fire"] -= 1
        new_state = "lightning"
    elif current_state == "lightning" and reaction_type == "ok":
        counters["ok"] += 1
        counters["lightning"] -= 1
        new_state = "ok"
    else:
        await callback_query.answer("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ!")
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    message_states[bot_message_id] = new_state

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    pool = await aiomysql.create_pool(host='localhost', port=3306,
                                      user='root', password='hesoyam',
                                      db='task_bot', autocommit=True)
    async with pool.acquire() as conn:
        async with conn.cursor() as cur:
            await cur.execute('''
                INSERT INTO button_states (bot_message_id, state)
                VALUES (%s, %s)
                ON DUPLICATE KEY UPDATE state = %s
            ''', (bot_message_id, new_state, new_state))
    pool.close()
    await pool.wait_closed()

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = create_keyboard(bot_message_id, state=new_state)
    try:
        await callback_query.message.edit_reply_markup(reply_markup=keyboard)
    except TelegramRetryAfter as e:
        logger.warning(f"–û—à–∏–±–∫–∞ Flood control: {e}. –ñ–¥–µ–º {e.retry_after} —Å–µ–∫—É–Ω–¥.")
        await asyncio.sleep(e.retry_after)
        await callback_query.message.edit_reply_markup(reply_markup=keyboard)
    except TelegramBadRequest as e:
        logger.warning(f"–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–µ–Ω–æ: {e}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {e}")

    # –°—Ç–∞–≤–∏–º —Ä–µ–∞–∫—Ü–∏—é –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ USER_CHAT_ID
    try:
        await bot.set_message_reaction(
            chat_id=USER_CHAT_ID,
            message_id=user_message_id,
            reaction=[{"type": "emoji", "emoji": "üî•" if reaction_type == "fire" else "‚ö°" if reaction_type == "lightning" else "üëå"}]
        )
    except TelegramRetryAfter as e:
        logger.warning(f"–û—à–∏–±–∫–∞ Flood control: {e}. –ñ–¥–µ–º {e.retry_after} —Å–µ–∫—É–Ω–¥.")
        await asyncio.sleep(e.retry_after)
        await bot.set_message_reaction(
            chat_id=USER_CHAT_ID,
            message_id=user_message_id,
            reaction=[{"type": "emoji", "emoji": "üî•" if reaction_type == "fire" else "‚ö°" if reaction_type == "lightning" else "üëå"}]
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ä–µ–∞–∫—Ü–∏–∏: {e}")

    # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∑–∞–¥–∞—á—É –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ç–µ–º—É
    await send_to_topic(
        original_message_text,
        new_state,
        current_state,
        bot_message_id,
        callback_query.from_user.id if callback_query and callback_query.from_user else None  # –ò—Å–ø–æ–ª—å–∑—É–µ–º user_id
    )

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
    await update_counters(counters)
    await update_pinned_message(BUTTONS_CHAT_ID)  # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback_query.answer(f"–†–µ–∞–∫—Ü–∏—è {reaction_type} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å
async def handle_answer(message: types.Message, bot_message_id: int):
    logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å")
    logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è {bot_message_id}: {message_states.get(bot_message_id)}")
    logger.info(f"–¢–µ–∫—É—â–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {message_states}")

    # –ü–æ–ª—É—á–∞–µ–º user_message_id, message_thread_id –∏ —Ç–µ–∫—Å—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    pool = await aiomysql.create_pool(host='localhost', port=3306,
                                      user='root', password='hesoyam',
                                      db='task_bot', autocommit=True)
    async with pool.acquire() as conn:
        async with conn.cursor() as cur:
            await cur.execute('SELECT user_message_id, message_text, message_thread_id FROM messages WHERE bot_message_id = %s',
                              (bot_message_id,))
            result = await cur.fetchone()
            if result:
                user_message_id, original_message_text, message_thread_id = result
                logger.info(f"–ù–∞–π–¥–µ–Ω user_message_id: {user_message_id}, original_message_text: {original_message_text}, message_thread_id: {message_thread_id}")
            else:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è bot_message_id={bot_message_id}")
                return
    pool.close()
    await pool.wait_closed()

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏—è
    logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ —á–∞—Ç {USER_CHAT_ID}, —Ç–µ–º—É {message_thread_id}, –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ {user_message_id}")

    # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ–¥–∏–∞—Ñ–∞–π–ª (—Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ)
    if message.photo or message.video:
        media = message.photo[-1] if message.photo else message.video
        caption = message.caption if message.caption else "–û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å."

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞—Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –Ω—É–∂–Ω—É—é —Ç–µ–º—É
        try:
            if message.photo:
                await bot.send_photo(
                    chat_id=USER_CHAT_ID,
                    message_thread_id=message_thread_id,  # –£–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–º—É
                    photo=media.file_id,
                    caption=caption,
                    reply_to_message_id=user_message_id  # –û—Ç–≤–µ—Ç –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                )
            else:
                await bot.send_video(
                    chat_id=USER_CHAT_ID,
                    message_thread_id=message_thread_id,  # –£–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–º—É
                    video=media.file_id,
                    caption=caption,
                    reply_to_message_id=user_message_id  # –û—Ç–≤–µ—Ç –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                )
            logger.info("–ú–µ–¥–∏–∞—Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
    else:
        # –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
        try:
            await bot.send_message(
                chat_id=USER_CHAT_ID,
                message_thread_id=message_thread_id,  # –£–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–º—É
                text=f"–û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å: {message.text}",  # –£–±–∏—Ä–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
                reply_to_message_id=user_message_id,  # –û—Ç–≤–µ—Ç –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                parse_mode="Markdown"
            )
            logger.info("–û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–¥–∞—á–∏ –Ω–∞ "closed"
    message_states[bot_message_id] = "closed"

    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ "closed" –∏ —É–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫ "unreacted"
    counters["closed"] += 1
    counters["unreacted"] -= 1  # –£–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ–æ—Ç—Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = create_keyboard(bot_message_id, state="closed")
    try:
        await bot.edit_message_reply_markup(
            chat_id=BUTTONS_CHAT_ID,
            message_id=bot_message_id,
            reply_markup=keyboard
        )
    except TelegramRetryAfter as e:
        logger.warning(f"–û—à–∏–±–∫–∞ Flood control: {e}. –ñ–¥–µ–º {e.retry_after} —Å–µ–∫—É–Ω–¥.")
        await asyncio.sleep(e.retry_after)
        await bot.edit_message_reply_markup(
            chat_id=BUTTONS_CHAT_ID,
            message_id=bot_message_id,
            reply_markup=keyboard
        )
    except TelegramBadRequest as e:
        logger.warning(f"–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–µ–Ω–æ: {e}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {e}")

    # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∑–∞–¥–∞—á—É –≤ —Ç–µ–º—É "–ó–∞–∫—Ä—ã—Ç—ã–µ"
    await send_to_topic(original_message_text, "closed", "awaiting_answer", bot_message_id, message.from_user.id if message.from_user else None)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
    await update_counters(counters)
    await update_pinned_message(BUTTONS_CHAT_ID)  # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await message.answer("–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    await init_db()

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    global counters
    counters = await get_counters()

    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–µ–º–∞—Ö
    await restore_topic_messages()

    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    pool = await aiomysql.create_pool(host='localhost', port=3306,
                                      user='root', password='hesoyam',
                                      db='task_bot', autocommit=True)
    try:
        async with pool.acquire() as conn:
            async with conn.cursor() as cur:
                await cur.execute('SELECT bot_message_id, state FROM button_states')
                results = await cur.fetchall()
                for bot_message_id, state in results:
                    message_states[bot_message_id] = state
                    try:
                        await bot.edit_message_reply_markup(
                            chat_id=BUTTONS_CHAT_ID,
                            message_id=bot_message_id,
                            reply_markup=create_keyboard(bot_message_id, state=state)
                        )
                    except TelegramBadRequest as e:
                        logger.warning(f"–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–µ–Ω–æ: {e}")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {e}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π –∫–Ω–æ–ø–æ–∫: {e}")
    finally:
        pool.close()
        await pool.wait_closed()

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    try:
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        await bot.session.close()

if __name__ == '__main__':
    asyncio.run(main())