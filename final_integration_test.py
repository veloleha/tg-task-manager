import asyncio
import logging
import uuid
from datetime import datetime
from bots.user_bot.user_bot import UserBot
from bots.task_bot.task_bot import TaskBot
from bots.mover_bot.mover_bot import MoverBot
from core.redis_client import redis_client
from config.settings import settings

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("logs/final_integration_test.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

async def final_integration_test():
    """–§–∏–Ω–∞–ª—å–Ω–æ–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –±–æ—Ç–æ–≤
        user_bot = UserBot()
        task_bot = TaskBot()
        mover_bot = MoverBot()
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        test_user_id = 123456789
        test_username = "integration_tester"
        test_message_text = "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏"
        
        logger.info(f"üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{test_username} (ID: {test_user_id})")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–¥–∞—á—É –Ω–∞–ø—Ä—è–º—É—é –≤ Redis (–∏–º–∏—Ç–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É UserBot)
        task_data = {
            "text": test_message_text,
            "username": test_username,
            "user_id": test_user_id,
            "status": "new",
            "created_at": datetime.now().isoformat(),
            "updated_at": datetime.now().isoformat()
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É –≤ Redis –∏ –ø–æ–ª—É—á–∞–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ID
        task_id = await redis_client.save_task(task_data)
        logger.info(f"‚úÖ –ó–∞–¥–∞—á–∞ {task_id} —Å–æ–∑–¥–∞–Ω–∞ –≤ Redis")
        
        # –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ –æ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ (–∏–º–∏—Ç–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É UserBot)
        await redis_client.publish_event("new_tasks", {
            "type": "new_task",
            "task_id": task_id
        })
        logger.info(f"üì¢ –°–æ–±—ã—Ç–∏–µ –æ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ {task_id} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ PubSub")
        
        # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã TaskBot —É—Å–ø–µ–ª –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ
        await asyncio.sleep(2)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–¥–∞—á–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ Redis
        retrieved_task = await redis_client.get_task(task_id)
        if retrieved_task:
            logger.info(f"‚úÖ –ó–∞–¥–∞—á–∞ {task_id} –Ω–∞–π–¥–µ–Ω–∞ –≤ Redis")
        else:
            logger.error(f"‚ùå –ó–∞–¥–∞—á–∞ {task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ Redis")
            return
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ (–≤–∑—è—Ç–∏–µ –≤ —Ä–∞–±–æ—Ç—É)
        logger.info(f"üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ {task_id} –Ω–∞ 'in_progress'")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –≤ Redis
        await redis_client.update_task(task_id, status="in_progress", assignee=test_username)
        logger.info(f"‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ {task_id} –æ–±–Ω–æ–≤–ª–µ–Ω –≤ Redis")
        
        # –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ (–∏–º–∏—Ç–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É TaskBot)
        await redis_client.publish_event("task_updates", {
            "type": "status_change",
            "task_id": task_id,
            "new_status": "in_progress",
            "changed_by": test_username
        })
        logger.info(f"üì¢ –°–æ–±—ã—Ç–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ {task_id} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ PubSub")
        
        # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã MoverBot —É—Å–ø–µ–ª –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ
        await asyncio.sleep(2)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–∏–ª—Å—è
        updated_task = await redis_client.get_task(task_id)
        if updated_task and updated_task.get("status") == "in_progress":
            logger.info(f"‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ {task_id} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ 'in_progress'")
            logger.info(f"‚úÖ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –∑–∞–¥–∞—á–∏: {updated_task.get('assignee', '–Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω')}")
        else:
            logger.error(f"‚ùå –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ {task_id} –Ω–µ –æ–±–Ω–æ–≤–∏–ª—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ MoverBot –ø–æ–ª—É—á–∏–ª —Å–æ–±—ã—Ç–∏–µ (—á–µ—Ä–µ–∑ –ª–æ–≥–∏)
        logger.info(f"‚úÖ MoverBot –¥–æ–ª–∂–µ–Ω –±—ã–ª –ø–æ–ª—É—á–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –∏ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
        
        logger.info("üéâ –§–∏–Ω–∞–ª—å–Ω–æ–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        logger.info("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ:")
        logger.info("   - UserBot —Å–æ–∑–¥–∞–µ—Ç –∑–∞–¥–∞—á–∏ –∏ –ø—É–±–ª–∏–∫—É–µ—Ç —Å–æ–±—ã—Ç–∏—è")
        logger.info("   - TaskBot –ø–æ–ª—É—á–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–¥–∞—á–∏")
        logger.info("   - MoverBot –ø–æ–ª—É—á–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
        logger.info("   - Redis –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ö—Ä–∞–Ω–∏—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ")
        logger.info("   - PubSub –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø–µ—Ä–µ–¥–∞—á—É —Å–æ–±—ã—Ç–∏–π –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}", exc_info=True)
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        await redis_client.close()

if __name__ == "__main__":
    asyncio.run(final_integration_test())
