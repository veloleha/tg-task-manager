#!/usr/bin/env python3
"""
Telegram Task Manager - Main Entry Point

–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏.
–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç—Ä–∏ –±–æ—Ç–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –∫–∞–∫ –µ–¥–∏–Ω—É—é —Å–∏—Å—Ç–µ–º—É:
- User Bot - —Å–±–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á
- Task Bot - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏ –≤ —á–∞—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏  
- Mover Bot - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python main.py                    # –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –±–æ—Ç–æ–≤
    python main.py --only user        # –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ User Bot
    python main.py --only task        # –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ Task Bot
    python main.py --only mover       # –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ Mover Bot
"""

import asyncio
import logging
import signal
import sys
import argparse
from pathlib import Path
from typing import List, Optional
from core.redis_client import RedisManager
from bots.task_bot.pubsub_manager import TaskBotPubSubManager as PubSubManager

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ Python path
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))


from config.settings import settings

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
def setup_logging():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã"""
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤
    logs_dir = project_root / "logs"
    logs_dir.mkdir(exist_ok=True)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    formatter = logging.Formatter(
        '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞
    logger = logging.getLogger()
    logger.setLevel(logging.INFO)
    
    # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    logger.handlers.clear()
    
    # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    console_handler = logging.StreamHandler(sys.stdout)
    console_handler.setLevel(logging.INFO)
    console_handler.setFormatter(formatter)
    logger.addHandler(console_handler)
    
    # –û–±—â–∏–π —Ñ–∞–π–ª–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    file_handler = logging.FileHandler(
        logs_dir / "system.log", 
        encoding='utf-8'
    )
    file_handler.setLevel(logging.INFO)
    file_handler.setFormatter(formatter)
    logger.addHandler(file_handler)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    error_handler = logging.FileHandler(
        logs_dir / "system_errors.log", 
        encoding='utf-8'
    )
    error_handler.setLevel(logging.ERROR)
    error_handler.setFormatter(formatter)
    logger.addHandler(error_handler)

def check_environment():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    required_vars = [
        'REDIS_HOST',
        'FORUM_CHAT_ID',
        'SUPPORT_CHAT_ID'
    ]
    
    missing_vars = []
    for var in required_vars:
        if not getattr(settings, var, None):
            missing_vars.append(var)
    
    if missing_vars:
        raise EnvironmentError(
            f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing_vars)}\n"
            f"–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª .env —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."
        )

class BotManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ–º–∏ –±–æ—Ç–∞–º–∏ —Å–∏—Å—Ç–µ–º—ã"""
    
    def __init__(self):
        self.logger = logging.getLogger(__name__)
        self.bots = []
        self.running_tasks = []
        self.shutdown_event = asyncio.Event()
        
    async def initialize_bots(self, only_bot: Optional[str] = None):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–æ—Ç–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        
        # User Bot
        if (not only_bot or only_bot == 'user') and settings.USER_BOT_TOKEN:
            try:
                from bots.user_bot.user_bot import UserBot
                user_bot = UserBot()
                self.bots.append(('User Bot', user_bot))
                self.logger.info("‚úÖ User Bot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ User Bot: {e}", exc_info=True)
                if only_bot == 'user':
                    raise
        elif only_bot == 'user':
            raise ValueError("USER_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        
        # Task Bot
        if (not only_bot or only_bot == 'task') and settings.TASK_BOT_TOKEN:
            try:
                from bots.task_bot.task_bot import TaskBot
                task_bot = TaskBot()
                self.bots.append(('Task Bot', task_bot))
                self.logger.info("‚úÖ Task Bot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Task Bot: {e}", exc_info=True)
                if only_bot == 'task':
                    raise
        elif only_bot == 'task':
            raise ValueError("TASK_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        
        # Mover Bot
        if (not only_bot or only_bot == 'mover') and settings.MOVER_BOT_TOKEN:
            try:
                from bots.mover_bot.mover_bot import MoverBot
                mover_bot = MoverBot()
                self.bots.append(('Mover Bot', mover_bot))
                self.logger.info("‚úÖ Mover Bot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Mover Bot: {e}", exc_info=True)
                if only_bot == 'mover':
                    raise
        elif only_bot == 'mover':
            raise ValueError("MOVER_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        
        if not self.bots:
            raise ValueError(
                "–ù–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –Ω–∏ –æ–¥–∏–Ω –±–æ—Ç! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤ –≤ .env —Ñ–∞–π–ª–µ."
            )
        
        self.logger.info(f"üìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –±–æ—Ç–æ–≤: {len(self.bots)}")
    
    async def run_bot(self, name: str, bot_instance):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            self.logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ {name}...")
            await bot_instance.start()
        except asyncio.CancelledError:
            self.logger.info(f"‚èπÔ∏è {name} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            self.logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ {name}: {e}", exc_info=True)
            # –°–∏–≥–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã
            self.shutdown_event.set()
            raise
    
    async def start_all_bots(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ—Ö –±–æ—Ç–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ"""
        self.logger.info(f"üéØ –í—Å–µ –±–æ—Ç—ã –∑–∞–ø—É—â–µ–Ω—ã ({len(self.bots)} –ø—Ä–æ—Ü–µ—Å—Å–æ–≤)")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–∞–∂–¥–æ–≥–æ –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ
        for name, bot_instance in self.bots:
            self.logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ {name}...")
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
            task = asyncio.create_task(bot_instance.start())
            self.running_tasks.append(task)
            
        # –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
        await asyncio.gather(*self.running_tasks)
    
    async def shutdown_all_bots(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ—Ö –±–æ—Ç–æ–≤"""
        self.logger.info("üîÑ –ù–∞—á–∏–Ω–∞—é –æ—Å—Ç–∞–Ω–æ–≤–∫—É –≤—Å–µ—Ö –±–æ—Ç–æ–≤...")
        
        # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
        for task in self.running_tasks:
            if not task.done():
                task.cancel()
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
        if self.running_tasks:
            try:
                await asyncio.wait_for(
                    asyncio.gather(*self.running_tasks, return_exceptions=True),
                    timeout=10.0
                )
            except asyncio.TimeoutError:
                self.logger.warning("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –±–æ—Ç—ã –Ω–µ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å –≤ —Ç–µ—á–µ–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏–∏ –±–æ—Ç–æ–≤
        for name, bot in self.bots:
            try:
                if hasattr(bot, 'bot') and hasattr(bot.bot, 'session'):
                    await bot.bot.session.close()
                    self.logger.debug(f"–°–µ—Å—Å–∏—è {name} –∑–∞–∫—Ä—ã—Ç–∞")
            except Exception as e:
                self.logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–µ—Å—Å–∏–∏ {name}: {e}")
        
        self.logger.info("‚úÖ –í—Å–µ –±–æ—Ç—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

def setup_signal_handlers(bot_manager: BotManager):
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown"""
    
    def signal_handler(signum, frame):
        logging.getLogger(__name__).info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}")
        bot_manager.shutdown_event.set()
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è Unix-—Å–∏—Å—Ç–µ–º
    if hasattr(signal, 'SIGTERM'):
        signal.signal(signal.SIGTERM, signal_handler)
    if hasattr(signal, 'SIGINT'):
        signal.signal(signal.SIGINT, signal_handler)

def parse_arguments():
    """–ü–∞—Ä—Å–∏—Ç –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    parser = argparse.ArgumentParser(
        description='Telegram Task Manager - —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  python main.py                    # –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –±–æ—Ç–æ–≤
  python main.py --only user        # –¢–æ–ª—å–∫–æ User Bot
  python main.py --only task        # –¢–æ–ª—å–∫–æ Task Bot  
  python main.py --only mover       # –¢–æ–ª—å–∫–æ Mover Bot
  python main.py --debug            # –° –æ—Ç–ª–∞–¥–æ—á–Ω—ã–º–∏ –ª–æ–≥–∞–º–∏
        """
    )
    
    parser.add_argument(
        '--only',
        choices=['user', 'task', 'mover'],
        help='–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞'
    )
    
    parser.add_argument(
        '--debug',
        action='store_true',
        help='–í–∫–ª—é—á–∏—Ç—å –æ—Ç–ª–∞–¥–æ—á–Ω—ã–µ –ª–æ–≥–∏'
    )
    

    
    return parser.parse_args()

async def check_system_health():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º"""
    logger = logging.getLogger(__name__)
    logger.info("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã...")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Redis
    redis = RedisManager()
    try:
        await redis.connect()
        await redis.conn.ping()
        logger.info("‚úÖ Redis: –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        logger.error(f"‚ùå Redis: –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è - {e}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ PubSub
    try:
        pubsub_manager = PubSubManager()
        await pubsub_manager.redis.connect()
        await pubsub_manager.redis.conn.ping()
        logger.info("‚úÖ PubSub: –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç –ø–æ–¥–ø–∏—Å–∫–∏
        test_received = asyncio.Event()
        async def test_handler(channel, message):
            logger.info(f"Received test message on channel {channel}: {message}")
            if message.get('status') == 'test_subscription':
                test_received.set()
        await pubsub_manager.subscribe("health_check", test_handler)
        # –¢–µ–ø–µ—Ä—å –∑–∞–ø—É—Å–∫–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫!
        asyncio.create_task(pubsub_manager.start())
        await asyncio.sleep(1)
        # –ü—É–±–ª–∏–∫—É–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ
        await pubsub_manager.publish_event("health_check", {"status": "test"})
        logger.info("‚úÖ PubSub: —Ç–µ—Å—Ç–æ–≤–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
        # –ü—É–±–ª–∏–∫—É–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ
        await pubsub_manager.publish_event("health_check", {"status": "test_subscription"})
        # –ñ–¥–µ–º –¥–æ 5 —Å–µ–∫—É–Ω–¥
        try:
            await asyncio.wait_for(test_received.wait(), timeout=5.0)
            logger.info("‚úÖ PubSub: —Ç–µ—Å—Ç–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–∞")
        except asyncio.TimeoutError:
            logger.error("‚ùå PubSub: —Ç–µ—Å—Ç–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞ (—Ç–∞–π–º–∞—É—Ç 5 —Å–µ–∫—É–Ω–¥)")
            return False
        finally:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ
            await pubsub_manager.stop()
    except Exception as e:
        logger.error(f"‚ùå PubSub: –æ—à–∏–±–∫–∞ - {e}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
    
    # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    args = parse_arguments()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
        handlers=[
            logging.FileHandler("app.log", encoding="utf-8"),
            logging.StreamHandler()
        ]
    )
    
    if args.debug:
        logging.getLogger().setLevel(logging.DEBUG)
    
    logger = logging.getLogger(__name__)
    
    try:
        logger.info("=" * 60)
        logger.info("üöÄ –ó–ê–ü–£–°–ö TELEGRAM TASK MANAGER SYSTEM")
        logger.info("=" * 60)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        logger.info("üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
        check_environment()
        logger.info("‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ –ø–æ—Ä—è–¥–∫–µ")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        logger.info("‚öôÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫...")
        settings.verify_settings()
        logger.info("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã
        await check_system_health()
        
        # –í—ã–≤–æ–¥ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–±–µ–∑ —Ç–æ–∫–µ–Ω–æ–≤)
        logger.info("üìä –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã:")
        logger.info(f"  ‚Ä¢ Redis: {settings.REDIS_HOST}:{settings.REDIS_PORT}")
        logger.info(f"  ‚Ä¢ Forum Chat: {settings.FORUM_CHAT_ID}")
        logger.info(f"  ‚Ä¢ Support Chat: {settings.SUPPORT_CHAT_ID}")
        logger.info(f"  ‚Ä¢ User Bot: {'‚úÖ' if settings.USER_BOT_TOKEN else '‚ùå'}")
        logger.info(f"  ‚Ä¢ Task Bot: {'‚úÖ' if settings.TASK_BOT_TOKEN else '‚ùå'}")
        logger.info(f"  ‚Ä¢ Mover Bot: {'‚úÖ' if settings.MOVER_BOT_TOKEN else '‚ùå'}")
        
        if args.only:
            logger.info(f"üéØ –†–µ–∂–∏–º: –∑–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ {args.only.upper()} BOT")
        else:
            logger.info("üéØ –†–µ–∂–∏–º: –∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–æ—Ç–æ–≤")
        
        # –†–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ polling
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ polling (–≤–µ–±—Ö—É–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã)")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –±–æ—Ç–æ–≤
        bot_manager = BotManager()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown
        setup_signal_handlers(bot_manager)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–æ–≤
        await bot_manager.initialize_bots(only_bot=args.only)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ—Ö –±–æ—Ç–æ–≤
        await bot_manager.start_all_bots()
        
        # –û–∂–∏–¥–∞–µ–º —Å–æ–±—ã—Ç–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        await bot_manager.shutdown_event.wait()
        
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã: {e}", exc_info=True)
        sys.exit(1)
    finally:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ—Ö –±–æ—Ç–æ–≤
        await bot_manager.shutdown_all_bots()
        logger.info("üîÑ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã...")
        logger.info("=" * 60)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã: {e}")
        sys.exit(1)
