import asyncio
import logging
import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ Python path
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

from core.redis_client import redis_client
from bots.task_bot.pubsub_manager import TaskBotPubSubManager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("logs/test_pubsub.log", encoding="utf-8"),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

async def test_pubsub_connection():
    """–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ PubSub –º–µ–∂–¥—É UserBot –∏ TaskBot"""
    try:
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ PubSub —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...")
        
        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä PubSub –¥–ª—è TaskBot
        pubsub_manager = TaskBotPubSubManager()
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        async def test_handler(message):
            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message}")
            
        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª
        logger.info("–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª...")
        await pubsub_manager.subscribe("test_channel", test_handler)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å
        logger.info("–ó–∞–ø—É—Å–∫ —Å–ª—É—à–∞—Ç–µ–ª—è...")
        await pubsub_manager.start()
        
        # –ü—É–±–ª–∏–∫—É–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        logger.info("–ü—É–±–ª–∏–∫–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è...")
        await redis_client.connect()  # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
        await redis_client.conn.publish("test_channel", '{"type": "test", "message": "Hello PubSub!"}')
        
        # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ
        logger.info("–û–∂–∏–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è...")
        await asyncio.sleep(5)
        
        logger.info("‚úÖ –¢–µ—Å—Ç PubSub —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ PubSub: {e}", exc_info=True)
    finally:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å
        logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª—è...")

if __name__ == "__main__":
    asyncio.run(test_pubsub_connection())
