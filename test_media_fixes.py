#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –∏ fallback-–æ—Ç–≤–µ—Ç–æ–≤
"""

import asyncio
import logging
from core.redis_client import redis_client
from bots.mover_bot.mover_bot import MoverBot

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

async def test_media_data_in_task():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –º–µ–¥–∏–∞-–¥–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –∑–∞–¥–∞—á–µ"""
    logger.info("üé¨ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ–¥–∏–∞-–¥–∞–Ω–Ω—ã—Ö –≤ –∑–∞–¥–∞—á–µ...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–¥–∞—á—É —Å —Ñ–æ—Ç–æ (–∫–∞–∫ —Å–æ–∑–¥–∞–µ—Ç UserBot –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è)
    task_data = {
        'user_id': 123456789,
        'chat_id': -1001234567890,
        'username': 'media_tester',
        'first_name': 'Media',
        'message_text': '–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞ —Å —Ñ–æ—Ç–æ',
        'message_id': 12345,
        'status': 'unreacted',
        'created_at': '2025-01-10T23:00:00Z',
        'has_photo': True,
        'photo_file_ids': ['AgACAgIAAyEFAASPOkf6AAII7WiZCA_8Gq_ayc4lzX6I_EQm_Kz0AAKT9TEbyk_JSLNGZLFddhOwAQADAgADcwADNgQ'],
        'has_video': False,
        'has_document': False,
        'video_file_id': None,
        'document_file_id': None,
        'media_group_id': None
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É
    task_id = await redis_client.save_task(task_data)
    logger.info(f"‚úÖ –ó–∞–¥–∞—á–∞ —Å –º–µ–¥–∏–∞ —Å–æ–∑–¥–∞–Ω–∞: {task_id}")
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á—É –æ–±—Ä–∞—Ç–Ω–æ
    saved_task = await redis_client.get_task(task_id)
    if saved_task:
        logger.info(f"‚úÖ –ó–∞–¥–∞—á–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ Redis:")
        logger.info(f"   - has_photo: {saved_task.get('has_photo', False)}")
        logger.info(f"   - photo_file_ids: {saved_task.get('photo_file_ids', [])}")
        logger.info(f"   - has_video: {saved_task.get('has_video', False)}")
        logger.info(f"   - has_document: {saved_task.get('has_document', False)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ–¥–∏–∞-–¥–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å
        if saved_task.get('has_photo') and saved_task.get('photo_file_ids'):
            logger.info("‚úÖ –ú–µ–¥–∏–∞-–¥–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∑–∞–¥–∞—á–µ")
        else:
            logger.error("‚ùå –ú–µ–¥–∏–∞-–¥–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å –≤ –∑–∞–¥–∞—á–µ")
            return None
    else:
        logger.error("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ Redis!")
        return None
    
    return task_id, saved_task

async def test_mover_bot_media_sending():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ MoverBot –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞—á–∏ —Å –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞–º–∏"""
    logger.info("ü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ MoverBot...")
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä MoverBot (–±–µ–∑ –∑–∞–ø—É—Å–∫–∞)
    mover_bot = MoverBot()
    
    # –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞ —Å —Ñ–æ—Ç–æ
    test_task = {
        'task_id': 'test-photo-task',
        'user_id': 987654321,
        'username': 'photo_user',
        'first_name': 'Photo',
        'message_text': '–ó–∞–¥–∞—á–∞ —Å —Ñ–æ—Ç–æ',
        'status': 'unreacted',
        'assignee': '',
        'has_photo': True,
        'photo_file_ids': ['AgACAgIAAyEFAASPOkf6AAII7WiZCA_8Gq_ayc4lzX6I_EQm_Kz0AAKT9TEbyk_JSLNGZLFddhOwAQADAgADcwADNgQ'],
        'has_video': False,
        'has_document': False,
        'video_file_id': None,
        'document_file_id': None
    }
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    formatted_message = mover_bot._format_task_message(test_task)
    logger.info(f"‚úÖ –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:")
    logger.info(f"   {formatted_message}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ–¥–∏–∞-–¥–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è
    if test_task.get('has_photo') and test_task.get('photo_file_ids'):
        logger.info(f"‚úÖ –§–æ—Ç–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ: {test_task.get('photo_file_ids')}")
        logger.info("‚úÖ MoverBot –¥–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É —Å —Ñ–æ—Ç–æ (–Ω–µ 'without media')")
    else:
        logger.error("‚ùå –§–æ—Ç–æ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –≤ –∑–∞–¥–∞—á–µ")
    
    # –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞ —Å –≤–∏–¥–µ–æ
    test_video_task = {
        'task_id': 'test-video-task',
        'user_id': 987654321,
        'username': 'video_user',
        'first_name': 'Video',
        'message_text': '–ó–∞–¥–∞—á–∞ —Å –≤–∏–¥–µ–æ',
        'status': 'unreacted',
        'assignee': '',
        'has_video': True,
        'video_file_id': 'BAACAgIAAxkBAAIBY2ZmZmZmZmZmZmZmZmZmZmZmZmZmZmZm',
        'has_photo': False,
        'has_document': False,
        'photo_file_ids': [],
        'document_file_id': None
    }
    
    formatted_video_message = mover_bot._format_task_message(test_video_task)
    logger.info(f"‚úÖ –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∏–¥–µ–æ:")
    logger.info(f"   {formatted_video_message}")
    
    if test_video_task.get('has_video') and test_video_task.get('video_file_id'):
        logger.info(f"‚úÖ –í–∏–¥–µ–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ: {test_video_task.get('video_file_id')}")
        logger.info("‚úÖ MoverBot –¥–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É —Å –≤–∏–¥–µ–æ (–Ω–µ 'without media')")
    
    logger.info("‚úÖ –ú–µ—Ç–æ–¥—ã MoverBot –¥–ª—è –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

async def test_fallback_reply_format():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç fallback-–æ—Ç–≤–µ—Ç–æ–≤ UserBot"""
    logger.info("üí¨ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞ fallback-–æ—Ç–≤–µ—Ç–æ–≤...")
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞
    reply_text = "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏"
    reply_author = "test_support"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫ –¥–æ–ª–∂–µ–Ω –≤—ã–≥–ª—è–¥–µ—Ç—å fallback-–æ—Ç–≤–µ—Ç
    expected_message = f"üí¨ <b>–û—Ç–≤–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:</b>\n\n{reply_text}"
    logger.info(f"‚úÖ –û–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç fallback-–æ—Ç–≤–µ—Ç–∞:")
    logger.info(f"   {expected_message}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∏–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –ù–ï –≤–∫–ª—é—á–∞–µ—Ç—Å—è
    if reply_author not in expected_message:
        logger.info("‚úÖ –ù–∏–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ fallback-–æ—Ç–≤–µ—Ç–∞")
    else:
        logger.error("‚ùå –ù–∏–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –≤—Å–µ –µ—â–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ fallback-–æ—Ç–≤–µ—Ç–µ")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º HTML-—Ä–∞–∑–º–µ—Ç–∫—É
    if "<b>" in expected_message and "</b>" in expected_message:
        logger.info("‚úÖ HTML-—Ä–∞–∑–º–µ—Ç–∫–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ fallback-–æ—Ç–≤–µ—Ç–µ")
    else:
        logger.error("‚ùå HTML-—Ä–∞–∑–º–µ—Ç–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ fallback-–æ—Ç–≤–µ—Ç–µ")
    
    logger.info("‚úÖ –§–æ—Ä–º–∞—Ç fallback-–æ—Ç–≤–µ—Ç–æ–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –∏ fallback-–æ—Ç–≤–µ—Ç–æ–≤...")
    
    try:
        # –¢–µ—Å—Ç 1: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ–¥–∏–∞-–¥–∞–Ω–Ω—ã—Ö –≤ –∑–∞–¥–∞—á–µ
        photo_task_id, photo_task = await test_media_data_in_task()
        
        # –¢–µ—Å—Ç 2: –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ MoverBot
        await test_mover_bot_media_sending()
        
        # –¢–µ—Å—Ç 3: –§–æ—Ä–º–∞—Ç fallback-–æ—Ç–≤–µ—Ç–æ–≤
        await test_fallback_reply_format()
        
        logger.info("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        logger.info("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        logger.info("   - –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ–¥–∏–∞-–¥–∞–Ω–Ω—ã—Ö –≤ –∑–∞–¥–∞—á–µ: ‚úÖ")
        logger.info("   - –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ MoverBot: ‚úÖ")
        logger.info("   - –§–æ—Ä–º–∞—Ç fallback-–æ—Ç–≤–µ—Ç–æ–≤ UserBot: ‚úÖ")
        logger.info("   - –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –Ω–∏–∫–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∏–∑ fallback: ‚úÖ")
        logger.info("   - HTML-—Ä–∞–∑–º–µ—Ç–∫–∞ –≤ fallback-–æ—Ç–≤–µ—Ç–∞—Ö: ‚úÖ")
        
        # –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if photo_task_id:
            await redis_client.delete_task(photo_task_id)
            logger.info(f"üóëÔ∏è –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞ {photo_task_id} —É–¥–∞–ª–µ–Ω–∞")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π: {e}")
        raise

if __name__ == "__main__":
    asyncio.run(main())
