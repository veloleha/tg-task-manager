from aiogram import Bot
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from core.redis_client import redis_client
from config import settings
import logging
import asyncio
import json
from datetime import datetime

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class MoverBot:
    def __init__(self):
        self.bot = Bot(token=settings.MOVER_BOT_TOKEN)
        self.pinned_msg_id = None
        self.executor_topics = {}  # {"username": topic_id}
        self.reminder_tasks = {}  # {task_id: asyncio.Task}

    async def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ñ–æ–Ω–æ–≤—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã"""
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
            await self._load_existing_topics()
            
            # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
            asyncio.create_task(self._stats_updater_loop())
            asyncio.create_task(self._task_event_listener())
            
            logger.info("MoverBot —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ MoverBot: {e}")

    async def _load_existing_topics(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–µ–º—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ"""
        try:
            topics = await self.bot.get_forum_topics(settings.FORUM_CHAT_ID)
            for topic in topics.topics:
                if topic.name.startswith("üõ†Ô∏è @"):
                    username = topic.name.split("@")[-1]
                    self.executor_topics[username] = topic.message_thread_id
            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π: {len(self.executor_topics)}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–º: {e}")

    async def _stats_updater_loop(self):
        """–¶–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        while True:
            try:
                await self._update_pinned_stats()
                await asyncio.sleep(30)  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
                await asyncio.sleep(10)

    async def _task_event_listener(self):
        """–°–ª—É—à–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –∑–∞–¥–∞—á –∏–∑ Redis"""
        pubsub = redis_client.conn.pubsub()
        await pubsub.subscribe("task_events")
        
        async for message in pubsub.listen():
            if message["type"] == "message":
                try:
                    event = json.loads(message["data"])
                    await self._process_task_event(event)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è: {e}")

    async def _process_task_event(self, event: dict):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ –∑–∞–¥–∞—á–∏"""
        event_type = event.get("type")
        
        if event_type == "status_change":
            await self._handle_status_change(event)
        elif event_type == "new_task":
            await self._handle_new_task(event)
        elif event_type == "reminder_set":
            await self._setup_reminder(event)

    async def _handle_status_change(self, event: dict):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏"""
        task_id = event["task_id"]
        new_status = event["new_status"]
        executor = event.get("executor")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π —Ç–µ–º–µ
        if new_status == "in_progress" and executor:
            await self._move_task_to_topic(task_id, executor, "in_progress")
        elif new_status == "completed":
            await self._move_task_to_topic(task_id, "completed", "completed")
        elif new_status == "waiting":
            await self._move_task_to_topic(task_id, "waiting", "waiting")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        await self._update_pinned_stats()

    async def _move_task_to_topic(self, task_id: str, topic_identifier: str, status: str):
        """–ü–µ—Ä–µ–º–µ—â–∞–µ—Ç –∑–∞–¥–∞—á—É –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é —Ç–µ–º—É"""
        try:
            task = await redis_client.get_task(task_id)
            if not task:
                return

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º ID —Ç–µ–º—ã
            if status == "in_progress":
                topic_id = await self._get_or_create_executor_topic(topic_identifier)
                topic_name = f"executor_{topic_identifier}"
            else:
                topic_id = settings.WAITING_TOPIC_ID if status == "waiting" else settings.COMPLETED_TOPIC_ID
                topic_name = status

            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if "support_message_id" in task:
                await self._delete_message(task["support_message_id"])

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –Ω–æ–≤—É—é —Ç–µ–º—É
            message = await self.bot.send_message(
                chat_id=settings.FORUM_CHAT_ID,
                message_thread_id=topic_id,
                text=self._format_task_message(task),
                reply_markup=self._create_task_keyboard(task_id, status)
            )

            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
            await redis_client.conn.hset(
                task_id,
                mapping={
                    "current_topic": topic_name,
                    "support_message_id": message.message_id,
                    "task_link": f"t.me/c/{str(settings.FORUM_CHAT_ID)[4:]}/{message.message_id}"
                }
            )
            
            logger.info(f"–ó–∞–¥–∞—á–∞ {task_id} –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤ —Ç–µ–º—É {topic_name}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: {e}")

    async def _get_or_create_executor_topic(self, executor: str) -> int:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID —Ç–µ–º—ã –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è, —Å–æ–∑–¥–∞—ë—Ç –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"""
        if executor not in self.executor_topics:
            try:
                topic = await self.bot.create_forum_topic(
                    chat_id=settings.FORUM_CHAT_ID,
                    name=f"üõ†Ô∏è @{executor}"  # –ò–∫–æ–Ω–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Ç–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
                )
                self.executor_topics[executor] = topic.message_thread_id
                logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Ç–µ–º–∞ –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è @{executor}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–º—ã: {e}")
                return settings.WAITING_TOPIC_ID
        return self.executor_topics[executor]

    async def _update_pinned_stats(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"""
        try:
            stats = await redis_client.get_global_stats()
            text = self._format_stats_message(stats)
            
            if self.pinned_msg_id:
                try:
                    await self.bot.edit_message_text(
                        chat_id=settings.MAIN_TASK_CHAT_ID,
                        message_id=self.pinned_msg_id,
                        text=text,
                        parse_mode="HTML"
                    )
                    return
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
                    self.pinned_msg_id = None  # –°–±—Ä–æ—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ

            # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            msg = await self.bot.send_message(
                chat_id=settings.MAIN_TASK_CHAT_ID,
                text=text,
                parse_mode="HTML"
            )
            await self.bot.pin_chat_message(
                chat_id=settings.MAIN_TASK_CHAT_ID,
                message_id=msg.message_id,
                disable_notification=True
            )
            self.pinned_msg_id = msg.message_id
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

    def _format_stats_message(self, stats: dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –≤ —Ç—Ä–µ–±—É–µ–º–æ–º –≤–∏–¥–µ"""
        # –í–µ—Ä—Ö–Ω—è—è —Å—Ç—Ä–æ–∫–∞ —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏
        status_line = (
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–¥–∞—á</b>\n"
            f"‚ö†Ô∏è –ù–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {stats['unreacted']}  "
            f"‚è≥ –í –æ–∂–∏–¥–∞–Ω–∏–∏: {stats['waiting']}  "
            f"‚ö° –í —Ä–∞–±–æ—Ç–µ: {stats['in_progress']}  "
            f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {stats['completed']}\n"
        )
        
        # –°—Ç—Ä–æ–∫–∏ —Å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º–∏
        executors_lines = []
        for executor, data in stats['executors'].items():
            if data['in_progress'] > 0:
                executors_lines.append(f"üë§ @{executor}: {data['in_progress']}")
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å—ë —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = status_line
        if executors_lines:
            message += "\n" + "\n".join([f"<pre>           {line}</pre>" for line in executors_lines])
            message += f"\n<pre>           –í—Å–µ–≥–æ –≤ —Ä–∞–±–æ—Ç–µ: {stats['in_progress']}</pre>"
        
        return message

    async def _delete_message(self, message_id: int):
        """–£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
        try:
            await self.bot.delete_message(
                chat_id=settings.FORUM_CHAT_ID,
                message_id=message_id
            )
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

    def _format_task_message(self, task: dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ç–µ–º—É"""
        status_icons = {
            "unreacted": "‚ö†Ô∏è",
            "waiting": "‚è≥",
            "in_progress": "‚ö°",
            "completed": "‚úÖ"
        }
        return (
            f"{status_icons.get(task['status'], 'üìå')} <b>–ó–∞–¥–∞—á–∞ #{task['task_number']}</b>\n"
            f"üë§ –û—Ç: @{task.get('username', 'N/A')}\n"
            f"üìù –¢–µ–∫—Å—Ç: {task['text']}\n"
            f"üîÑ –°—Ç–∞—Ç—É—Å: {task['status']}"
        )

    def _create_task_keyboard(self, task_id: str, status: str) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞—ë—Ç –ø—Ä–æ—Å—Ç—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"""
        return InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏", callback_data=f"info_{task_id}")
        ]])

    async def _setup_reminder(self, event: dict):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –∑–∞–¥–∞—á–∏"""
        task_id = event["task_id"]
        if task_id in self.reminder_tasks:
            self.reminder_tasks[task_id].cancel()
        
        self.reminder_tasks[task_id] = asyncio.create_task(
            self._send_reminder(task_id, event["hours"])
        )

    async def _send_reminder(self, task_id: str, hours: int):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è"""
        await asyncio.sleep(hours * 3600)
        try:
            task = await redis_client.get_task(task_id)
            if task and task["status"] == "in_progress":
                await self.bot.send_message(
                    chat_id=settings.FORUM_CHAT_ID,
                    message_thread_id=self.executor_topics.get(task["assignee"], settings.WAITING_TOPIC_ID),
                    text=f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–¥–∞—á–µ #{task_id}\n{task['text']}"
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
        finally:
            self.reminder_tasks.pop(task_id, None)