from aiogram import Bot
from config.settings import settings
import logging
import asyncio
import json
import random
from datetime import datetime
from typing import Dict, Optional

from core.redis_client import redis_client

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class MoverBot:
    def __init__(self):
        self.bot = Bot(token=settings.MOVER_BOT_TOKEN)
        self.pinned_msg_id = None
        self.active_topics = {
            "unreacted": None,  # ID —Ç–µ–º—ã –¥–ª—è –Ω–µ–æ—Ç—Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
            "waiting": None,    # ID —Ç–µ–º—ã –¥–ª—è –∑–∞–¥–∞—á –≤ –æ–∂–∏–¥–∞–Ω–∏–∏
            "completed": None,  # ID —Ç–µ–º—ã –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
            "executors": {}     # {"username": topic_id}
        }
        self.reminder_tasks = {}

    async def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ñ–æ–Ω–æ–≤—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —á–∞—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –∏ —è–≤–ª—è–µ—Ç—Å—è —Ñ–æ—Ä—É–º–æ–º
            chat = await self.bot.get_chat(settings.FORUM_CHAT_ID)
            if not chat.is_forum:
                logger.error("–£–∫–∞–∑–∞–Ω–Ω—ã–π —á–∞—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ–æ—Ä—É–º–æ–º! –¢–µ–º—ã –Ω–µ –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å")
            
            # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
            asyncio.create_task(self._stats_updater_loop())
            asyncio.create_task(self._task_event_listener())
            
            logger.info("MoverBot —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ MoverBot: {e}")

    async def _ensure_topic_exists(self, topic_type: str, topic_name: str = None) -> Optional[int]:
        """–°–æ–∑–¥–∞–µ—Ç —Ç–µ–º—É –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ—ë ID"""
        try:
            # –î–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
            if topic_type == "executor" and topic_name:
                if topic_name in self.active_topics["executors"]:
                    return self.active_topics["executors"][topic_name]
                
                topic = await self.bot.create_forum_topic(
                    chat_id=settings.FORUM_CHAT_ID,
                    name=f"üõ†Ô∏è @{topic_name}"
                )
                self.active_topics["executors"][topic_name] = topic.message_thread_id
                logger.info(f"–°–æ–∑–¥–∞–Ω–∞ —Ç–µ–º–∞ –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è @{topic_name}")
                return topic.message_thread_id
            
            # –î–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç–µ–º
            elif topic_type in ["unreacted", "waiting", "completed"]:
                if self.active_topics[topic_type]:
                    return self.active_topics[topic_type]
                
                name_map = {
                    "unreacted": "‚ö†Ô∏è –ù–µ–æ—Ç—Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ",
                    "waiting": "‚è≥ –í –æ–∂–∏–¥–∞–Ω–∏–∏",
                    "completed": "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ"
                }
                
                topic = await self.bot.create_forum_topic(
                    chat_id=settings.FORUM_CHAT_ID,
                    name=name_map[topic_type]
                )
                self.active_topics[topic_type] = topic.message_thread_id
                logger.info(f"–°–æ–∑–¥–∞–Ω–∞ —Å–∏—Å—Ç–µ–º–Ω–∞—è —Ç–µ–º–∞: {name_map[topic_type]}")
                return topic.message_thread_id
            
            raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ç–µ–º—ã: {topic_type}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–º—ã {topic_type}: {e}")
            return None

    async def _cleanup_empty_topics(self):
        """–£–¥–∞–ª—è–µ—Ç –ø—É—Å—Ç—ã–µ —Ç–µ–º—ã"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ç–µ–º—ã
            for topic_type in ["unreacted", "waiting", "completed"]:
                if self.active_topics[topic_type]:
                    tasks = await redis_client.get_tasks_by_status(topic_type)
                    if not tasks:
                        await self._delete_topic(self.active_topics[topic_type])
                        self.active_topics[topic_type] = None
                        logger.info(f"–£–¥–∞–ª–µ–Ω–∞ –ø—É—Å—Ç–∞—è —Ç–µ–º–∞ {topic_type}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–º—ã –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
            for executor, topic_id in list(self.active_topics["executors"].items()):
                tasks = await redis_client.get_tasks_by_assignee(executor)
                if not tasks:
                    await self._delete_topic(topic_id)
                    del self.active_topics["executors"][executor]
                    logger.info(f"–£–¥–∞–ª–µ–Ω–∞ –ø—É—Å—Ç–∞—è —Ç–µ–º–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è @{executor}")
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ç–µ–º: {e}")

    async def _delete_topic(self, topic_id: int):
        """–£–¥–∞–ª—è–µ—Ç —Ç–µ–º—É —Ñ–æ—Ä—É–º–∞"""
        try:
            await self.bot.delete_forum_topic(
                chat_id=settings.FORUM_CHAT_ID,
                message_thread_id=topic_id
            )
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–µ–º—É {topic_id}: {e}")

    async def _move_task_to_topic(self, task_id: str, status: str, executor: str = None):
        """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –∑–∞–¥–∞—á"""
        try:
            task = await redis_client.get_task(task_id)
            if not task:
                logger.warning(f"–ó–∞–¥–∞—á–∞ {task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ç–µ–º—ã
            if status == "in_progress" and executor:
                topic_id = await self._ensure_topic_exists("executor", executor)
                topic_type = f"executor_{executor}"
            else:
                topic_id = await self._ensure_topic_exists(status)
                topic_type = status

            if not topic_id:
                raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID —Ç–µ–º—ã")

            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if "support_message_id" in task:
                await self._delete_message(task["support_message_id"])

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –Ω–æ–≤—É—é —Ç–µ–º—É (–±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã)
            message = await self.bot.send_message(
                chat_id=settings.FORUM_CHAT_ID,
                message_thread_id=topic_id,
                text=self._format_task_message(task)
            )

            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
            await redis_client.update_task(
                task_id,
                current_topic=topic_type,
                support_message_id=message.message_id,
                task_link=f"t.me/c/{str(settings.FORUM_CHAT_ID)[4:]}/{message.message_id}"
            )

            logger.info(f"–ó–∞–¥–∞—á–∞ {task_id} –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤ —Ç–µ–º—É {topic_type}")
            
            # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø—É—Å—Ç—ã—Ö —Ç–µ–º (10% chance)
            if random.random() < 0.1:
                await self._cleanup_empty_topics()
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: {e}", exc_info=True)

    async def _delete_message(self, message_id: int):
        """–£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
        try:
            await self.bot.delete_message(
                chat_id=settings.FORUM_CHAT_ID,
                message_id=message_id
            )
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

    async def _stats_updater_loop(self):
        """–¶–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        while True:
            try:
                await self._update_pinned_stats()
                await asyncio.sleep(settings.STATS_UPDATE_INTERVAL)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
                await asyncio.sleep(10)

    async def _update_pinned_stats(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"""
        try:
            if not settings.MAIN_TASK_CHAT_ID:
                return

            stats = await redis_client.get_global_stats()
            text = self._format_stats_message(stats)
            
            if self.pinned_msg_id:
                try:
                    await self.bot.edit_message_text(
                        chat_id=settings.MAIN_TASK_CHAT_ID,
                        message_id=self.pinned_msg_id,
                        text=text,
                        parse_mode="HTML"
                    )
                    return
                except Exception:
                    self.pinned_msg_id = None

            # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            msg = await self.bot.send_message(
                chat_id=settings.MAIN_TASK_CHAT_ID,
                text=text,
                parse_mode="HTML"
            )
            await self.bot.pin_chat_message(
                chat_id=settings.MAIN_TASK_CHAT_ID,
                message_id=msg.message_id,
                disable_notification=True
            )
            self.pinned_msg_id = msg.message_id
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

    def _format_stats_message(self, stats: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"""
        return (
            "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–¥–∞—á</b>\n\n"
            "üü° <b>–ù–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ:</b> {unreacted}\n"
            "üü† <b>–í –æ–∂–∏–¥–∞–Ω–∏–∏:</b> {waiting}\n"
            "üî¥ <b>–í —Ä–∞–±–æ—Ç–µ:</b> {in_progress}\n"
            "üü¢ <b>–ó–∞–≤–µ—Ä—à–µ–Ω–æ:</b> {completed}\n\n"
            "üë• <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏:</b>\n{executors}"
        ).format(
            unreacted=stats['unreacted'],
            waiting=stats['waiting'],
            in_progress=stats['in_progress'],
            completed=stats['completed'],
            executors="\n".join(
                f"‚ñ´Ô∏è @{executor}: {data['in_progress']}"
                for executor, data in stats['executors'].items()
                if data['in_progress'] > 0
            ) if stats['executors'] else "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π"
        )

    def _format_task_message(self, task: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ (–±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã)"""
        status_icons = {
            "unreacted": "‚ö†Ô∏è",
            "waiting": "‚è≥",
            "in_progress": "‚ö°",
            "completed": "‚úÖ"
        }
        return (
            f"{status_icons.get(task['status'], 'üìå')} <b>–ó–∞–¥–∞—á–∞ #{task.get('task_number', 'N/A')}</b>\n"
            f"üë§ –û—Ç: @{task.get('username', 'N/A')}\n"
            f"üìù –¢–µ–∫—Å—Ç: {task.get('text', '')}\n"
            f"üîÑ –°—Ç–∞—Ç—É—Å: {task.get('status', 'N/A')}"
        )

    async def _task_event_listener(self):
        """–°–ª—É—à–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –∑–∞–¥–∞—á –∏–∑ Redis"""
        pubsub = redis_client.conn.pubsub()
        await pubsub.subscribe("task_events")
        
        async for message in pubsub.listen():
            if message["type"] == "message":
                try:
                    event = json.loads(message["data"])
                    await self._process_task_event(event)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è: {e}")

    async def _process_task_event(self, event: Dict):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ –∑–∞–¥–∞—á–∏"""
        event_type = event.get("type")
        
        if event_type == "status_change":
            await self._handle_status_change(event)
        elif event_type == "new_task":
            await self._handle_new_task(event)
        elif event_type == "reminder_set":
            await self._setup_reminder(event)

    async def _handle_status_change(self, event: Dict):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏"""
        task_id = event["task_id"]
        new_status = event["new_status"]
        executor = event.get("executor")

        try:
            await self._move_task_to_topic(task_id, new_status, executor)
            await self._update_pinned_stats()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")

    async def _handle_new_task(self, event: Dict):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É"""
        task_id = event["task_id"]
        await self._move_task_to_topic(task_id, "unreacted")

    async def _setup_reminder(self, event: Dict):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –∑–∞–¥–∞—á–∏"""
        task_id = event["task_id"]
        hours = event.get("hours", 1)  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1 —á–∞—Å
        
        if task_id in self.reminder_tasks:
            self.reminder_tasks[task_id].cancel()
        
        self.reminder_tasks[task_id] = asyncio.create_task(
            self._send_reminder(task_id, hours)
        )

    async def _send_reminder(self, task_id: str, hours: int):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è"""
        await asyncio.sleep(hours * 3600)
        
        try:
            task = await redis_client.get_task(task_id)
            if task and task["status"] == "in_progress":
                assignee = task.get("assignee")
                if assignee and assignee in self.active_topics["executors"]:
                    await self.bot.send_message(
                        chat_id=settings.FORUM_CHAT_ID,
                        message_thread_id=self.active_topics["executors"][assignee],
                        text=f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–¥–∞—á–µ #{task_id}\n{task.get('text', '')}"
                    )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
        finally:
            self.reminder_tasks.pop(task_id, None)