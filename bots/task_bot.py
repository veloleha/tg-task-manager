from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from core.redis_client import redis_client
from config.settings import settings
import logging
import json
import asyncio

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

class TaskBot:
    def __init__(self):
        self.bot = Bot(token=settings.TASK_BOT_TOKEN)
        self.dp = Dispatcher()
        self._setup_handlers()
        self.task_listener_task = None

    def _setup_handlers(self):
        @self.dp.callback_query(lambda c: c.data.startswith(("status_", "action_")))
        async def handle_callback(callback: types.CallbackQuery):
            data_parts = callback.data.split("_")
            action_type = data_parts[0]
            task_id = data_parts[-1]

            if action_type == "status":
                new_status = data_parts[1]
                await self._change_status(task_id, new_status, callback.from_user.username)
            elif action_type == "action":
                action = data_parts[1]
                await self._handle_action(task_id, action, callback)

            await callback.answer()

    async def _listen_for_new_tasks(self):
        """–°–ª—É—à–∞–µ—Ç –Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –∏–∑ Redis"""
        logger.info("–ó–∞–ø—É—Å–∫ —Å–ª—É—à–∞—Ç–µ–ª—è –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á...")
        pubsub = redis_client.conn.pubsub()
        
        try:
            await pubsub.subscribe("task_events")
            logger.info("–£—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª 'task_events'")
            
            while True:
                try:
                    message = await pubsub.get_message(ignore_subscribe_messages=True, timeout=1.0)
                    if message is None:
                        continue
                        
                    logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ Redis: {message}")
                    
                    try:
                        data = json.loads(message['data'])
                        task_id = data['task_id']
                        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏: {task_id}")
                        await self._process_new_task(task_id)
                    except json.JSONDecodeError as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: {e}")
                    except KeyError as e:
                        logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á –≤ –¥–∞–Ω–Ω—ã—Ö: {e}")
                        
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –≤ —Å–ª—É—à–∞—Ç–µ–ª–µ –∑–∞–¥–∞—á: {e}", exc_info=True)
                    await asyncio.sleep(5)  # –ü–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                    
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª—è: {e}", exc_info=True)
        finally:
            await pubsub.close()
    
    async def _process_new_task(self, task_id: str):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É"""
        logger.info(f"–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á–∏ {task_id}")
        
        try:
            task = await redis_client.get_task(task_id)
            if not task:
                logger.error(f"–ó–∞–¥–∞—á–∞ {task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ Redis")
                return

            logger.debug(f"–î–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏: {task}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–æ –ª–∏ —É–∂–µ —Å–æ–∑–¥–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if task.get('support_message_id'):
                logger.warning(f"–î–ª—è –∑–∞–¥–∞—á–∏ {task_id} —É–∂–µ –µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
                return

            try:
                logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç {settings.BUTTONS_CHAT_ID}")
                message = await self.bot.send_message(
                    chat_id=settings.BUTTONS_CHAT_ID,
                    text=self._format_task_message(task),
                    reply_markup=self._create_keyboard(task_id, "unreacted"),
                    parse_mode="HTML"
                )
                logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, ID: {message.message_id}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É
                update_data = {
                    'support_message_id': str(message.message_id),
                    'task_link': f"t.me/c/{str(settings.BUTTONS_CHAT_ID)[4:]}/{message.message_id}"
                }
                await redis_client.update_task(task_id, **update_data)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", exc_info=True)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á–∏ {task_id}: {e}", exc_info=True)

    def _format_task_message(self, task: dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è"""
        return (
            f"üìå <b>–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞ #{task.get('task_number', 'N/A')}</b>\n"
            f"üë§ –û—Ç: @{task.get('username', 'N/A')}\n"
            f"üìù –¢–µ–∫—Å—Ç: {task.get('text', '')}\n"
            f"üîÑ –°—Ç–∞—Ç—É—Å: {task.get('status', 'unreacted')}\n"
            f"‚è±Ô∏è –°–æ–∑–¥–∞–Ω–∞: {task.get('created_at', 'N/A')}"
        )

    def _create_keyboard(self, task_id: str, current_status: str) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏"""
        buttons = {
            "unreacted": [
                [InlineKeyboardButton(text="üî• –í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É", callback_data=f"status_waiting_{task_id}")],
                [InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"action_delete_{task_id}")]
            ],
            "waiting": [
                [InlineKeyboardButton(text="‚ö° –í —Ä–∞–±–æ—Ç—É", callback_data=f"status_in_progress_{task_id}")],
                [InlineKeyboardButton(text="üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"action_reply_{task_id}")],
                [InlineKeyboardButton(text="‚è∞ –ù–∞–ø–æ–º–Ω–∏—Ç—å", callback_data=f"action_remind_{task_id}")]
            ],
            "in_progress": [
                [InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=f"status_completed_{task_id}")],
                [InlineKeyboardButton(text="üîÑ –†–µ—Å—Ç–∞—Ä—Ç", callback_data=f"status_waiting_{task_id}")],
                [InlineKeyboardButton(text="üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"action_reply_{task_id}")]
            ],
            "completed": [
                [InlineKeyboardButton(text="üîÑ –†–µ—Å—Ç–∞—Ä—Ç", callback_data=f"status_in_progress_{task_id}")],
                [InlineKeyboardButton(text="üìù –û—Ç—á—ë—Ç", callback_data=f"action_report_{task_id}")]
            ]
        }
        return InlineKeyboardMarkup(inline_keyboard=buttons.get(current_status, []))

    async def _change_status(self, task_id: str, new_status: str, username: str = None):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏"""
        task = await redis_client.get_task(task_id)
        if not task:
            logger.error(f"–ó–∞–¥–∞—á–∞ {task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        old_status = task.get("status")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ Redis
        success = await redis_client.update_task_status(task_id, new_status)
        if not success:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ {task_id}")
            return
        
        # –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –≤–∑—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        if new_status == "in_progress" and username:
            await redis_client.update_task(task_id, assignee=username)
            await redis_client.incr(f"stats:in_progress:{username}")

        # –£–≤–µ–¥–æ–º–ª—è–µ–º MoverBot –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏
        await redis_client.publish_event("task_events", {
            "type": "status_change",
            "task_id": task_id,
            "old_status": old_status,
            "new_status": new_status,
            "executor": username if new_status == "in_progress" else None
        })

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        await self._update_task_message(task_id)

    async def _update_task_message(self, task_id: str):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ —á–∞—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
        task = await redis_client.get_task(task_id)
        if not task or "support_message_id" not in task:
            return

        try:
            await self.bot.edit_message_text(
                chat_id=settings.BUTTONS_CHAT_ID,
                message_id=int(task["support_message_id"]),
                text=self._format_task_message(task),
                reply_markup=self._create_keyboard(task_id, task["status"])
            )
        except Exception as e:
            logger.error(f"Can't update task message: {e}")

    async def _handle_action(self, task_id: str, action: str, callback: types.CallbackQuery):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è"""
        if action == "delete":
            await self._delete_task(task_id)
        elif action == "reply":
            await self._request_reply(task_id, callback.from_user.id)
        elif action == "remind":
            await self._set_reminder(task_id)
        elif action == "report":
            await self._generate_report(task_id)

    async def _delete_task(self, task_id: str):
        """–£–¥–∞–ª—è–µ—Ç –∑–∞–¥–∞—á—É"""
        task = await redis_client.get_task(task_id)
        if task and "support_message_id" in task:
            try:
                await self.bot.delete_message(
                    chat_id=settings.BUTTONS_CHAT_ID,
                    message_id=int(task["support_message_id"])
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: {e}")
        await redis_client.conn.delete(task_id)

    async def start(self):
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª—è –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
        self.task_listener_task = asyncio.create_task(self._listen_for_new_tasks())
        logger.info("–ó–∞–ø—É—â–µ–Ω —Å–ª—É—à–∞—Ç–µ–ª—å –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á")
        await self.dp.start_polling(self.bot)

    async def stop(self):
        if self.task_listener_task:
            self.task_listener_task.cancel()
            try:
                await self.task_listener_task
            except asyncio.CancelledError:
                pass
       
task_bot_instance = TaskBot()
router = task_bot_instance.dp