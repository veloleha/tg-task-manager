from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from typing import List, Dict

def create_unreacted_topic_keyboard(task_id: str, executors: List[Dict]) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ç–µ–º—ã –Ω–µ–æ—Ç—Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π"""
    buttons = []
    
    # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞: –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    buttons.append([
        InlineKeyboardButton(
            text="üî• –í —Ä–∞–±–æ—Ç—É", 
            callback_data=f"topic_take_{task_id}"
        ),
        InlineKeyboardButton(
            text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", 
            callback_data=f"topic_delete_{task_id}"
        )
    ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è (–ø–æ 2 –≤ —Å—Ç—Ä–æ–∫–µ)
    executor_buttons = []
    for executor in executors:
        username = executor['username']
        first_name = executor['first_name']
        
        button = InlineKeyboardButton(
            text=f"üë§ –ü–æ—Ä—É—á–∏—Ç—å @{username}",
            callback_data=f"topic_assign_{username}_{task_id}"
        )
        
        executor_buttons.append(button)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É, –∫–æ–≥–¥–∞ –Ω–∞–∫–æ–ø–∏–ª–æ—Å—å 2 –∫–Ω–æ–ø–∫–∏
        if len(executor_buttons) == 2:
            buttons.append(executor_buttons)
            executor_buttons = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–Ω–æ–ø–∫–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
    if executor_buttons:
        buttons.append(executor_buttons)
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def create_executor_topic_keyboard(task_id: str) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ç–µ–º—ã –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è"""
    buttons = [
        [
            InlineKeyboardButton(
                text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", 
                callback_data=f"topic_complete_{task_id}"
            ),
            InlineKeyboardButton(
                text="üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å", 
                callback_data=f"topic_reply_{task_id}"
            )
        ]
    ]
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def create_completed_topic_keyboard(task_id: str) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ç–µ–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á"""
    buttons = [
        [
            InlineKeyboardButton(
                text="üîÑ –ü–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç—å", 
                callback_data=f"topic_reopen_{task_id}"
            ),
            InlineKeyboardButton(
                text="üìä –û—Ç—á–µ—Ç", 
                callback_data=f"topic_report_{task_id}"
            )
        ]
    ]
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def create_reply_keyboard(additional_message_id: str) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π '–û—Ç–≤–µ—Ç–∏—Ç—å' –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    buttons = [
        [
            InlineKeyboardButton(
                text="üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å", 
                callback_data=f"additional_reply_{additional_message_id}"
            )
        ]
    ]
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)
