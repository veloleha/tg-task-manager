"""
–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è Task Bot

–°–æ–¥–µ—Ä–∂–∏—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–¥–∞—á –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
"""

from datetime import datetime
from typing import Dict, Any, Optional

def format_task_message(task_data: Dict[str, Any], task_number: Optional[int] = None) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —á–∞—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    
    Args:
        task_data: –î–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏–∑ Redis
        task_number: –ù–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    user_id = task_data.get('user_id', 'Unknown')
    username = task_data.get('username', '')
    first_name = task_data.get('first_name', '')
    last_name = task_data.get('last_name', '')
    text = task_data.get('text', '–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞')
    created_at = task_data.get('created_at', '')
    status = task_data.get('status', 'unreacted')
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_display = []
    if first_name:
        user_display.append(first_name)
    if last_name:
        user_display.append(last_name)
    
    if not user_display and username:
        user_display = [f"@{username}"]
    elif not user_display:
        user_display = [f"ID: {user_id}"]
    
    user_name = " ".join(user_display)
    if username and first_name:
        user_name += f" (@{username})"
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
    time_str = ""
    if created_at:
        try:
            dt = datetime.fromisoformat(created_at.replace('Z', '+00:00'))
            time_str = dt.strftime("%d.%m.%Y %H:%M")
        except:
            time_str = created_at
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ —Å—Ç–∞—Ç—É—Å–∞
    status_emoji = {
        'unreacted': 'üÜï',
        'waiting': '‚è≥',
        'in_progress': 'üî•',
        'completed': '‚úÖ'
    }.get(status, '‚ùì')
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    if task_number:
        header = f"{status_emoji} <b>–ó–∞–¥–∞—á–∞ #{task_number}</b>"
    else:
        header = f"{status_emoji} <b>–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞</b>"
    
    # –°–æ–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message_parts = [
        header,
        f"üë§ <b>–û—Ç:</b> {user_name}",
        f"üïê <b>–í—Ä–µ–º—è:</b> {time_str}",
        "",
        f"üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>",
        f"<i>{text}</i>"
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ –µ—Å–ª–∏ –µ—Å—Ç—å
    assignee = task_data.get('assignee')
    if assignee:
        message_parts.insert(-2, f"üë®‚Äçüíº <b>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:</b> @{assignee}")
    
    return "\n".join(message_parts)

def format_stats_message(stats: Dict[str, Any]) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    
    Args:
        stats: –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    """
    
    message_parts = [
        "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–¥–∞—á</b>",
        "",
        f"üÜï –ù–æ–≤—ã–µ: {stats.get('unreacted', 0)}",
        f"‚è≥ –û–∂–∏–¥–∞—é—Ç: {stats.get('waiting', 0)}",
        f"üî• –í —Ä–∞–±–æ—Ç–µ: {stats.get('in_progress', 0)}",
        f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω—ã: {stats.get('completed', 0)}",
        "",
        f"üìà <b>–í—Å–µ–≥–æ:</b> {sum([stats.get('unreacted', 0), stats.get('waiting', 0), stats.get('in_progress', 0), stats.get('completed', 0)])}"
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º
    executors = stats.get('executors', {})
    if executors:
        message_parts.extend([
            "",
            "üë• <b>–ü–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º:</b>"
        ])
        
        for executor, executor_stats in executors.items():
            in_progress = executor_stats.get('in_progress', 0)
            completed = executor_stats.get('completed', 0)
            message_parts.append(
                f"‚Ä¢ @{executor}: üî•{in_progress} ‚úÖ{completed}"
            )
    
    return "\n".join(message_parts)

def format_reply_message(task_data: Dict[str, Any], reply_text: str, author: str) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –∑–∞–¥–∞—á—É
    
    Args:
        task_data: –î–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        reply_text: –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
        author: –ê–≤—Ç–æ—Ä –æ—Ç–≤–µ—Ç–∞
    
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
    """
    
    task_number = task_data.get('task_number', 'N/A')
    user_name = task_data.get('first_name', 'Unknown')
    username = task_data.get('username', '')
    
    if username:
        user_display = f"{user_name} (@{username})"
    else:
        user_display = user_name
    
    message_parts = [
        f"üí¨ <b>–û—Ç–≤–µ—Ç –Ω–∞ –∑–∞–¥–∞—á—É #{task_number}</b>",
        f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user_display}",
        f"üë®‚Äçüíº <b>–û—Ç–≤–µ—Ç–∏–ª:</b> @{author}",
        "",
        f"<i>{reply_text}</i>"
    ]
    
    return "\n".join(message_parts)

def format_aggregated_task(messages: list, user_info: Dict[str, Any]) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    
    Args:
        messages: –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è
        user_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏
    """
    
    if not messages:
        return "–ü—É—Å—Ç–∞—è –∑–∞–¥–∞—á–∞"
    
    # –ë–µ—Ä–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    first_msg = messages[0]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_name = user_info.get('first_name', '')
    if user_info.get('last_name'):
        user_name += f" {user_info['last_name']}"
    
    username = user_info.get('username', '')
    if username:
        if user_name:
            user_display = f"{user_name} (@{username})"
        else:
            user_display = f"@{username}"
    else:
        user_display = user_name or f"ID: {user_info.get('user_id', 'Unknown')}"
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
    created_at = first_msg.get('created_at', '')
    time_str = ""
    if created_at:
        try:
            dt = datetime.fromisoformat(created_at.replace('Z', '+00:00'))
            time_str = dt.strftime("%d.%m.%Y %H:%M")
        except:
            time_str = created_at
    
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ç–µ–∫—Å—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π
    texts = []
    for i, msg in enumerate(messages, 1):
        text = msg.get('text', '').strip()
        if text:
            if len(messages) > 1:
                texts.append(f"{i}. {text}")
            else:
                texts.append(text)
    
    combined_text = "\n\n".join(texts) if texts else "–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    if len(messages) > 1:
        header = f"üÜï <b>–û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ ({len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π)</b>"
    else:
        header = f"üÜï <b>–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞</b>"
    
    message_parts = [
        header,
        f"üë§ <b>–û—Ç:</b> {user_display}",
        f"üïê <b>–í—Ä–µ–º—è:</b> {time_str}",
        "",
        f"üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>",
        f"<i>{combined_text}</i>"
    ]
    
    return "\n".join(message_parts)

def format_notification(title: str, message: str, emoji: str = "‚ÑπÔ∏è") -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    
    Args:
        title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        message: –¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        emoji: –≠–º–æ–¥–∑–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    """
    
    return f"{emoji} <b>{title}</b>\n\n{message}"

def truncate_text(text: str, max_length: int = 200) -> str:
    """
    –û–±—Ä–µ–∑–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã
    
    Args:
        text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
        max_length: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞
    
    Returns:
        –û–±—Ä–µ–∑–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    """
    
    if len(text) <= max_length:
        return text
    
    return text[:max_length-3] + "..."

def escape_html(text: str) -> str:
    """
    –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç HTML —Å–∏–º–≤–æ–ª—ã –≤ —Ç–µ–∫—Å—Ç–µ
    
    Args:
        text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
    
    Returns:
        –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    """
    
    return (text
            .replace('&', '&amp;')
            .replace('<', '&lt;')
            .replace('>', '&gt;')
            .replace('"', '&quot;')
            .replace("'", '&#x27;'))
