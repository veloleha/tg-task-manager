import os
import json
import asyncio
import logging
from datetime import datetime
from typing import Dict, Optional, Callable

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

# –õ–æ–∫–∞–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
from core.redis_client import redis_client
from .pubsub_manager import TaskBotPubSubManager
from bots.task_bot.formatters import format_task_message
from bots.task_bot.keyboards import create_task_keyboard
from config.settings import settings

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("logs/taskbot.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class ReplyState(StatesGroup):
    waiting_for_reply = State()

class TaskBot:
    def __init__(self):
        self.bot = Bot(token=settings.TASK_BOT_TOKEN)
        self.dp = Dispatcher()
        self.redis = redis_client
        self.pubsub_manager = TaskBotPubSubManager()
        self.waiting_replies: Dict[int, str] = {}  # {user_id: task_id}
        self._setup_handlers()

    async def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
        try:
            logger.info("[TASKBOT][STEP 1] Starting TaskBot...")
            logger.info("[TASKBOT][STEP 1.1] Subscribing to new_tasks channel...")
            await self.pubsub_manager.subscribe("new_tasks", self._pubsub_message_handler)
            logger.info("[TASKBOT][STEP 1.2] Subscribing to task_updates channel...")
            await self.pubsub_manager.subscribe("task_updates", self._pubsub_message_handler)
            logger.info("[TASKBOT][STEP 1.3] TaskBot subscribed to 'new_tasks' and 'task_updates' channels")
            logger.info("[TASKBOT][STEP 1.4] Starting PubSub listener...")
            await self.pubsub_manager.start()  # —Å–ª—É—à–∞—Ç–µ–ª—å –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫
            logger.info("[TASKBOT][STEP 1.5] PubSub listener started, starting polling...")
            await self.dp.start_polling(self.bot)
        except Exception as e:
            logger.error(f"[TASKBOT][ERROR] Failed to start TaskBot: {e}", exc_info=True)
        finally:
            await self.bot.session.close()

    def _setup_handlers(self):
        @self.dp.message(Command("start"))
        async def cmd_start(message: types.Message):
            logger.info(f"Start command from user {message.from_user.id}")
            await message.answer("üöÄ Task Management Bot –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")

        @self.dp.message(Command("menu"))
        async def cmd_menu(message: types.Message):
            """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏"""
            logger.info(f"Menu command from user {message.from_user.id}")
            
            # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="üîÑ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏",
                    callback_data="admin_complete_all"
                )],
                [InlineKeyboardButton(
                    text="üìä –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É",
                    callback_data="admin_show_stats"
                )],
                [InlineKeyboardButton(
                    text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏",
                    callback_data="admin_cleanup_completed"
                )],
                [InlineKeyboardButton(
                    text="‚ö†Ô∏è –ü–û–õ–ù–ê–Ø –û–ß–ò–°–¢–ö–ê –ë–î",
                    callback_data="admin_full_reset_confirm"
                )]
            ])
            
            await message.answer(
                "üéõÔ∏è <b>–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è TaskBot</b>\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                parse_mode="HTML",
                reply_markup=keyboard
            )

        @self.dp.callback_query(lambda c: c.data.startswith("admin_"))
        async def handle_admin_callback(callback: types.CallbackQuery):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""
            try:
                action = callback.data.replace("admin_", "")
                logger.info(f"Admin action from {callback.from_user.username}: {action}")
                
                if action == "complete_all":
                    await self._complete_all_active_tasks(callback)
                elif action == "show_stats":
                    await self._show_detailed_stats(callback)
                elif action == "cleanup_completed":
                    await self._cleanup_completed_tasks(callback)
                elif action == "full_reset_confirm":
                    await self._full_reset_confirmation(callback)
                elif action == "full_reset_execute":
                    await self._full_reset_database(callback)
                elif action == "full_reset_cancel":
                    await self._full_reset_cancel(callback)
                else:
                    await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
                    
            except Exception as e:
                logger.error(f"Error handling admin callback: {e}")
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã")

        @self.dp.callback_query(lambda c: c.data.startswith(("status_", "action_")))
        async def handle_callback(callback: types.CallbackQuery, state: FSMContext):
            try:
                data_parts = callback.data.split("_")
                action_type = data_parts[0]
                task_id = data_parts[-1]

                logger.info(f"Callback from {callback.from_user.id} for task {task_id}: {callback.data}")

                if action_type == "status":
                    new_status = data_parts[1]
                    await self._change_status(task_id, new_status, callback.from_user.username)
                    # update_task_message —É–∂–µ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤ _change_status
                elif action_type == "action":
                    action = data_parts[1]
                    if action == "reply":
                        await callback.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:")
                        self.waiting_replies[callback.from_user.id] = task_id
                        await state.set_state(ReplyState.waiting_for_reply)
                        logger.info(f"Waiting reply for task {task_id} from {callback.from_user.username}")
                    else:
                        await self._handle_action(task_id, action, callback)
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
                        task = await self.redis.get_task(task_id)
                        if task:
                            await self.update_task_message(task_id, task.get('text', ''))

                await callback.answer()
            except Exception as e:
                logger.error(f"Error handling callback: {e}", exc_info=True)
                await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")

        @self.dp.message(ReplyState.waiting_for_reply)
        async def handle_reply(message: types.Message, state: FSMContext):
            user_id = message.from_user.id
            if user_id in self.waiting_replies:
                task_id = self.waiting_replies.pop(user_id)
                logger.info(f"Received reply for task {task_id} from {message.from_user.username}")
                await self._save_reply(task_id, message.text, message.from_user.username)
                await message.reply("‚úÖ –û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")
                await state.clear()



    async def _listen_for_new_tasks(self):
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç PubSub —Å–ª—É—à–∞—Ç–µ–ª—å –¥–ª—è –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á (–±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω, –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ start)
        """
        logger.info("_listen_for_new_tasks –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è. –°–ª—É—à–∞—Ç–µ–ª—å –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ start().")
        # –ú–µ—Ç–æ–¥ –æ—Å—Ç–∞–≤–ª–µ–Ω –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ—Ç
        return

    async def _pubsub_message_handler(self, channel: str, message: dict):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç PubSub –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        """
        try:
            logger.info(f"[TASKBOT][STEP 3] Received PubSub message on channel {channel}: {message}")
            if channel == "new_tasks" and message.get("type") == "new_task":
                task_id = message["task_id"]
                logger.info(f"[TASKBOT][STEP 3.1] Processing new task event for task_id: {task_id}")
                await self._process_new_task(task_id)
                logger.info(f"[TASKBOT][STEP 3.2] Finished processing new task event for task_id: {task_id}")
            elif channel == "task_updates":
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                event_type = message.get("type")
                if event_type in ["status_change", "task_assigned", "task_completed", "task_deleted"]:
                    task_id = message.get("task_id")
                    logger.info(f"[TASKBOT] Received {event_type} event for task {task_id}, updating pinned stats")
                    await self._update_pinned_stats()
            elif channel == "task_updates" and message.get("type") == "task_update":
                task_id = message["task_id"]
                new_text = message.get("text", "")
                logger.info(f"[TASKBOT][STEP 3.4] Processing task update event for task_id: {task_id}")
                await self._update_task_text(task_id, new_text)
                logger.info(f"[TASKBOT][STEP 3.5] Finished processing task update event for task_id: {task_id}")
            elif channel == "task_updates" and message.get("type") == "status_change":
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏
                task_id = message["task_id"]
                new_status = message["new_status"]
                assignee = message.get("assignee")
                logger.info(f"[TASKBOT][STEP 3.7] Processing status change for task {task_id} to {new_status}")
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
                task = await self.redis.get_task(task_id)
                if task:
                    await self.update_task_message(task_id, task.get('text', ''))
            else:
                logger.info(f"[TASKBOT][STEP 3.6] Ignoring message on channel {channel} with type {message.get('type')}")
        except Exception as e:
            logger.error(f"[TASKBOT][STEP 3.ERROR] Error handling PubSub message from {channel}: {e}", exc_info=True)

    async def _process_new_task(self, task_id: str):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
        """
        try:
            logger.info(f"[TASKBOT][STEP 4] –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–¥–∞—á–∏: {task_id}")
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            await asyncio.sleep(0.1)

            logger.info(f"[TASKBOT][STEP 5] –ß–∏—Ç–∞–µ–º –∑–∞–¥–∞—á—É –∏–∑ Redis: {task_id}")
            task = await self.redis.get_task(task_id)
            if not task:
                logger.error(f"[TASKBOT][STEP 5 ERROR] –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {task_id}")
                return

            logger.info(f"[TASKBOT][STEP 6] –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏...")
            if not task.get('task_number'):
                task_number = await self.redis.get_next_task_number()
                await self.redis.update_task(task_id, task_number=task_number)
                task['task_number'] = task_number
                logger.info(f"‚úÖ –ü—Ä–∏—Å–≤–æ–µ–Ω –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏: {task_number}")

            # –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ–æ—Ç—Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
            logger.info(f"[TASKBOT][STEP 6.5] –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ–æ—Ç—Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á")
            from core.redis_client import redis_client
            await redis_client.conn.incr("counter:unreacted")
            logger.info(f"[TASKBOT][STEP 6.5] ‚úÖ –°—á–µ—Ç—á–∏–∫ –Ω–µ–æ—Ç—Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á —É–≤–µ–ª–∏—á–µ–Ω")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ MoverBot –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –≤ —Ç–µ–º—É "–Ω–µ–æ—Ç—Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ"
            logger.info(f"[TASKBOT][STEP 7] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ MoverBot –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –≤ —Ç–µ–º—É '–Ω–µ–æ—Ç—Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ'")
            await redis_client.publish_event("task_updates", {
                "type": "new_task",
                "task_id": task_id
            })
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
            await self._update_pinned_stats()

        except Exception as e:
            logger.error(f"[TASKBOT][CRITICAL] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–¥–∞—á–∏ {task_id}: {e}", exc_info=True)

    async def _change_status(self, task_id: str, new_status: str, username: Optional[str] = None):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏"""
        try:
            logger.info(f"Updating task {task_id} status to {new_status}")
            
            updates = {
                'status': new_status,
                'updated_at': datetime.now().isoformat()
            }
            
            if new_status == "in_progress" and username:
                updates['assignee'] = username

            await self.redis.update_task(task_id, **updates)
            await self.update_task_message(task_id, f"–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_status}")
            
            from core.redis_client import redis_client
            await redis_client.publish_event("task_updates", {
                "type": "status_change",
                "task_id": task_id,
                "new_status": new_status,
                "changed_by": username
            })
            
        except Exception as e:
            logger.error(f"Error changing status for task {task_id}: {e}", exc_info=True)

    async def _update_task_text(self, task_id: str, new_text: str):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –≤ —á–∞—Ç–µ"""
        try:
            task = await self.redis.get_task(task_id)
            if not task or not task.get('support_message_id'):
                return

            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ –∑–∞–¥–∞—á–µ
            task['text'] = new_text
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
            status = task.get('status', 'unreacted')
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å —É—á–µ—Ç–æ–º —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏
            keyboard = create_task_keyboard(task_id, status, task.get('assignee'))
                
            await self.bot.edit_message_text(
                chat_id=settings.SUPPORT_CHAT_ID,
                message_id=int(task['support_message_id']),
                text=format_task_message(task),
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            logger.info(f"Updated text for task {task_id}")
        except Exception as e:
            logger.error(f"Error updating text for task {task_id}: {e}")

    async def _save_reply(self, task_id: str, reply_text: str, username: str):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç–≤–µ—Ç –∫ –∑–∞–¥–∞—á–µ"""
        try:
            logger.info(f"Saving reply for task {task_id} from @{username}")
            await self.redis.update_task(
                task_id,
                reply=reply_text,
                reply_author=username,
                reply_at=datetime.now().isoformat()
            )
            
            await self.update_task_message(task_id, reply_text)
            
            from core.redis_client import redis_client
            await redis_client.publish_event("task_updates", {
                "type": "new_reply",
                "task_id": task_id,
                "author": username
            })
        except Exception as e:
            logger.error(f"Error saving reply for task {task_id}: {e}", exc_info=True)

    async def _handle_action(self, task_id: str, action: str, callback: types.CallbackQuery):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è"""
        try:
            if action == "delete":
                await self._delete_task(task_id)
            elif action == "remind":
                await self._set_reminder(task_id)
            elif action == "report":
                await self._generate_report(task_id)
        except Exception as e:
            logger.error(f"Error handling action {action} for task {task_id}: {e}", exc_info=True)

    async def _delete_task(self, task_id: str):
        """–£–¥–∞–ª—è–µ—Ç –∑–∞–¥–∞—á—É"""
        logger.info(f"Deleting task {task_id}")
        task = await self.redis.get_task(task_id)
        if task and "support_message_id" in task:
            try:
                await self.bot.delete_message(
                    chat_id=settings.SUPPORT_CHAT_ID,
                    message_id=int(task["support_message_id"])
                )
            except Exception as e:
                logger.error(f"Error deleting message: {e}")
        await self.redis.delete_task(task_id)
        from core.redis_client import redis_client
        await redis_client.publish_event("task_updates", {
            "type": "task_deleted",
            "task_id": task_id
        })

    async def _set_reminder(self, task_id: str, hours: int = 24):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"""
        logger.info(f"Setting reminder for task {task_id} in {hours} hours")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ Redis
        await self.redis.set_reminder(task_id, hours)
        
        # –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –¥—Ä—É–≥–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        from core.redis_client import redis_client
        await redis_client.publish_event("reminders", {
            "type": "reminder_request",
            "task_id": task_id,
            "hours": hours
        })
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∑–∞–¥–∞—á—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        asyncio.create_task(self._schedule_reminder(task_id, hours))
    
    async def _schedule_reminder(self, task_id: str, hours: int):
        """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
        try:
            # –ñ–¥–µ–º —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤
            await asyncio.sleep(hours * 3600)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–¥–∞—á–∞ –≤—Å–µ –µ—â–µ –∞–∫—Ç—É–∞–ª—å–Ω–∞
            task = await self.redis.get_task(task_id)
            if not task or task.get('status') in ['completed', 'deleted']:
                logger.info(f"Task {task_id} is no longer active, skipping reminder")
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            from bots.task_bot.formatters import format_reminder_message
            reminder_text = format_reminder_message(task)
            
            await self.bot.send_message(
                chat_id=settings.SUPPORT_CHAT_ID,
                text=reminder_text,
                parse_mode="HTML"
            )
            
            logger.info(f"Reminder sent for task {task_id}")
            
        except Exception as e:
            logger.error(f"Error sending reminder for task {task_id}: {e}")

    async def _generate_report(self, task_id: str):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –ø–æ –∑–∞–¥–∞—á–µ"""
        logger.info(f"Generating report for task {task_id}")
        task = await self.redis.get_task(task_id)
        if task:
            report_text = (
                f"üìä –û—Ç—á–µ—Ç –ø–æ –∑–∞–¥–∞—á–µ #{task.get('task_number')}\n\n"
                f"üìù –¢–µ–∫—Å—Ç: {task.get('text')}\n"
                f"üë§ –ê–≤—Ç–æ—Ä: @{task.get('username')}\n"
                f"üîÑ –°—Ç–∞—Ç—É—Å: {task.get('status')}\n"
                f"‚è±Ô∏è –°–æ–∑–¥–∞–Ω–∞: {task.get('created_at')}\n"
                f"üí¨ –û—Ç–≤–µ—Ç–æ–≤: {1 if task.get('reply') else 0}"
            )
            await self.bot.send_message(
                chat_id=settings.SUPPORT_CHAT_ID,
                text=report_text,
                parse_mode="HTML"
            )

    async def send_task_to_support(self, task_data: dict) -> types.Message:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞—á—É –≤ —á–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
        text = f"üöÄ –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞ #{task_data['id']}\n\n{task_data['text']}"
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å —É—á–µ—Ç–æ–º —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏
        status = task_data.get('status', 'unreacted')
        keyboard = create_task_keyboard(task_data['id'], status, task_data.get('assignee'))
        return await self.bot.send_message(
            chat_id=settings.SUPPORT_CHAT_ID,
            text=text,
            reply_markup=keyboard
        )

    async def update_task_message(self, task_id: str, text: str):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ —á–∞—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
            task = await self.redis.get_task(task_id)
            if not task:
                logger.warning(f"Task {task_id} not found for message update")
                return
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ support_message_id
            if not task.get('support_message_id'):
                logger.warning(f"Task {task_id} has no support_message_id")
                return
                
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message_text = format_task_message(task)
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å —É—á–µ—Ç–æ–º —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏
            status = task.get('status', 'unreacted')
            keyboard = create_task_keyboard(task_id, status, task.get('assignee'))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä—É–º–Ω–æ–π —Ç–µ–º–µ
            # –ï—Å–ª–∏ –µ—Å—Ç—å support_topic_id –∏–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–µ 'unreacted', –∑–Ω–∞—á–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–æ
            if task.get('support_topic_id') or status != 'unreacted':
                # –°–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä—É–º–Ω–æ–π —Ç–µ–º–µ - –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ –≤ —Ç–µ–º–µ
                logger.info(f"Task {task_id} is in forum topic {task.get('support_topic_id')} or status is {status}, updating message in topic")
                
                # –ü–æ–ª—É—á–∞–µ–º ID —Ç–µ–º—ã
                topic_id = task.get('support_topic_id')
                if not topic_id and status in ['waiting', 'in_progress', 'completed']:
                    # –ï—Å–ª–∏ —Ç–µ–º–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –Ω–æ —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–º—É –∏–∑ MoverBot
                    # –≠—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ, –≤ –±—É–¥—É—â–µ–º –Ω—É–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å –ø–µ—Ä–µ–¥–∞—á—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–º–∞—Ö
                    logger.warning(f"Task {task_id} has no support_topic_id but status is {status}")
                
                if topic_id:
                    try:
                        await self.bot.edit_message_text(
                            chat_id=settings.SUPPORT_CHAT_ID,
                            message_id=task['support_message_id'],
                            text=message_text,
                            reply_markup=keyboard,
                            parse_mode="HTML"
                        )
                        logger.info(f"Successfully updated message for task {task_id} in topic {topic_id}")
                        return
                    except Exception as edit_error:
                        error_msg = str(edit_error).lower()
                        if "message to edit not found" in error_msg:
                            logger.warning(f"Message for task {task_id} not found in topic {topic_id}, possibly moved or deleted")
                        elif "message is not modified" in error_msg:
                            logger.info(f"Message for task {task_id} in topic {topic_id} already up to date")
                        else:
                            logger.error(f"Unexpected error editing message for task {task_id} in topic {topic_id}: {edit_error}")
                else:
                    logger.warning(f"Task {task_id} has no topic_id, cannot update message in topic")
                
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –≤ —Ç–µ–º–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
                logger.info(f"Falling back to updating main message for task {task_id}")
        
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —á–∞—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
            try:
                await self.bot.edit_message_text(
                    chat_id=settings.SUPPORT_CHAT_ID,
                    message_id=task['support_message_id'],
                    text=message_text,
                    reply_markup=keyboard,
                    parse_mode="HTML"
                )
                logger.info(f"Successfully updated message for task {task_id} in support chat")
            except Exception as edit_error:
                error_msg = str(edit_error).lower()
                if "message to edit not found" in error_msg:
                    logger.warning(f"Message for task {task_id} not found in support chat, possibly moved to topic")
                    # –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ - –≤–µ—Ä–æ—è—Ç–Ω–æ, –ø–µ—Ä–µ–º–µ—â–µ–Ω–æ –≤ —Ç–µ–º—É
                elif "message is not modified" in error_msg:
                    logger.info(f"Message for task {task_id} already up to date")
                else:
                    logger.error(f"Unexpected error editing message for task {task_id}: {edit_error}")
            
        except Exception as e:
            logger.error(f"Error updating message for task {task_id}: {e}")
    
    async def _update_pinned_stats(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –≤ –≥–ª–∞–≤–Ω–æ–º —á–∞—Ç–µ (—Å –∑–∞—â–∏—Ç–æ–π –æ—Ç Flood Control)"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ Redis —Å –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π
            stats = await self.redis.get_global_stats()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å –Ω–æ–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            stats_text = await redis_client.format_pinned_message(stats)
            
            # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            pinned_msg_id = await redis_client.get_pinned_message_id()
            
            if pinned_msg_id:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                try:
                    await self.bot.edit_message_text(
                        chat_id=settings.MAIN_TASK_CHAT_ID,
                        message_id=pinned_msg_id,
                        text=stats_text,
                        parse_mode="HTML"
                    )
                    logger.info(f"Updated pinned stats message {pinned_msg_id}")
                    return  # –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–∏–ª–∏, –≤—ã—Ö–æ–¥–∏–º
                except Exception as edit_error:
                    error_text = str(edit_error)
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å - —ç—Ç–æ –Ω–µ –æ—à–∏–±–∫–∞
                    if "message is not modified" in error_text:
                        logger.info(f"Pinned message {pinned_msg_id} content is already up to date")
                        return  # –°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ
                    
                    logger.warning(f"Failed to edit pinned message {pinned_msg_id}: {edit_error}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–æ
                    if any(phrase in error_text.lower() for phrase in ["message to edit not found", "message not found", "bad request"]):
                        logger.info(f"Pinned message {pinned_msg_id} not found, creating new one")
                        # –û—á–∏—â–∞–µ–º ID –∏–∑ Redis –∏ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ
                        await redis_client.set_pinned_message_id(None)
                        await self._create_new_pinned_stats(stats_text)
                        return
                    
                    # –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ - –ø—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ –∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ
                    try:
                        await self.bot.delete_message(
                            chat_id=settings.MAIN_TASK_CHAT_ID,
                            message_id=pinned_msg_id
                        )
                        logger.info(f"Deleted old pinned message {pinned_msg_id}")
                    except Exception as delete_error:
                        logger.warning(f"Failed to delete old pinned message {pinned_msg_id}: {delete_error}")
                    
                    # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await self._create_new_pinned_stats(stats_text)
            else:
                # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await self._create_new_pinned_stats(stats_text)
                
        except Exception as e:
            logger.error(f"Error updating pinned stats: {e}")
    
    async def _create_new_pinned_stats(self, stats_text: str):
        """–°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤–æ–µ –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π (—Å –∑–∞—â–∏—Ç–æ–π –æ—Ç Flood Control)"""
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = await self.bot.send_message(
                chat_id=settings.MAIN_TASK_CHAT_ID,
                text=stats_text,
                parse_mode="HTML"
            )
            
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ–º
            await asyncio.sleep(0.5)
            
            # –ó–∞–∫—Ä–µ–ø–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await self.bot.pin_chat_message(
                chat_id=settings.MAIN_TASK_CHAT_ID,
                message_id=message.message_id,
                disable_notification=True
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤ Redis
            await self.redis.set_pinned_message_id(message.message_id)
            
            logger.info(f"Created and pinned new stats message {message.message_id}")
            
        except Exception as e:
            error_text = str(e)
            if "flood control exceeded" in error_text.lower() or "too many requests" in error_text.lower():
                logger.warning(f"Flood control detected when creating pinned stats, skipping update: {e}")
                # –ù–µ –ª–æ–≥–∏—Ä—É–µ–º –∫–∞–∫ error - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–∏ –º–∞—Å—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏—è—Ö
            else:
                logger.error(f"Error creating new pinned stats: {e}")
    
    async def _format_pinned_stats(self, stats: dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (—É—Å—Ç–∞—Ä–µ–≤—à–∏–π –º–µ—Ç–æ–¥)"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            return await self.redis.format_pinned_message(stats)
            
        except Exception as e:
            logger.error(f"Error formatting pinned stats: {e}")
            return "üìä –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"

    async def _complete_all_active_tasks(self, callback: types.CallbackQuery):
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ (unreacted –∏ in_progress)"""
        try:
            await callback.answer("üîÑ –ó–∞–≤–µ—Ä—à–∞—é –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏...")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–∞–º–∏ unreacted –∏ in_progress
            unreacted_tasks = await self.redis.get_tasks_by_status("unreacted")
            in_progress_tasks = await self.redis.get_tasks_by_status("in_progress")
            
            total_tasks = len(unreacted_tasks) + len(in_progress_tasks)
            
            if total_tasks == 0:
                await callback.message.edit_text(
                    "‚úÖ <b>–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è</b>\n\n"
                    "–í—Å–µ –∑–∞–¥–∞—á–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω—ã –∏–ª–∏ –∑–∞–∫—Ä—ã—Ç—ã.",
                    parse_mode="HTML"
                )
                return
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            await callback.message.edit_text(
                f"üîÑ <b>–ó–∞–≤–µ—Ä—à–∞—é {total_tasks} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á...</b>\n\n"
                f"‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π Telegram.",
                parse_mode="HTML"
            )
            
            completed_count = 0
            batch_size = 5  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ 5 –∑–∞–¥–∞—á –∑–∞ —Ä–∞–∑
            delay_between_batches = 2.0  # 2 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –≤ –æ–¥–∏–Ω —Å–ø–∏—Å–æ–∫
            all_tasks = unreacted_tasks + in_progress_tasks
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–¥–∞—á–∏ –±–∞—Ç—á–∞–º–∏
            for i in range(0, len(all_tasks), batch_size):
                batch = all_tasks[i:i + batch_size]
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞—Ç—á
                for task in batch:
                    try:
                        task_id = task.get('task_id')
                        if task_id:
                            await self._change_status(task_id, "completed", "admin")
                            completed_count += 1
                            logger.info(f"Completed task {task_id} ({completed_count}/{total_tasks})")
                    except Exception as e:
                        logger.error(f"Error completing task {task.get('task_id')}: {e}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                progress_percent = int((completed_count / total_tasks) * 100)
                await callback.message.edit_text(
                    f"üîÑ <b>–ó–∞–≤–µ—Ä—à–∞—é –∑–∞–¥–∞—á–∏... {progress_percent}%</b>\n\n"
                    f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {completed_count} –∏–∑ {total_tasks}\n"
                    f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: {total_tasks - completed_count}",
                    parse_mode="HTML"
                )
                
                # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏ (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ)
                if i + batch_size < len(all_tasks):
                    await asyncio.sleep(delay_between_batches)
            
            # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.edit_text(
                f"‚úÖ <b>–ú–∞—Å—Å–æ–≤–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á –≤—ã–ø–æ–ª–Ω–µ–Ω–æ</b>\n\n"
                f"üìä –ó–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞–¥–∞—á: {completed_count} –∏–∑ {total_tasks}\n"
                f"üîÑ –ù–µ–æ—Ç—Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {len(unreacted_tasks)}\n"
                f"‚ö° –í —Ä–∞–±–æ—Ç–µ: {len(in_progress_tasks)}\n\n"
                f"‚è±Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç Telegram Flood Control.",
                parse_mode="HTML"
            )
            
            logger.info(f"Admin {callback.from_user.username} completed {completed_count} active tasks with rate limiting")
            
        except Exception as e:
            logger.error(f"Error in _complete_all_active_tasks: {e}")
            await callback.message.edit_text(
                "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–¥–∞—á</b>\n\n"
                f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}",
                parse_mode="HTML"
            )
    
    async def _show_detailed_stats(self, callback: types.CallbackQuery):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∑–∞–¥–∞—á–∞–º"""
        try:
            await callback.answer("üìä –ü–æ–ª—É—á–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º —Å—Ç–∞—Ç—É—Å–∞–º
            stats = await self.redis.get_global_stats()
            
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            unreacted = await self.redis.get_tasks_by_status("unreacted")
            in_progress = await self.redis.get_tasks_by_status("in_progress")
            completed = await self.redis.get_tasks_by_status("completed")
            
            stats_text = (
                f"üìä <b>–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ TaskBot</b>\n\n"
                f"üîÑ –ù–µ–æ—Ç—Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ: {len(unreacted)}\n"
                f"‚ö° –í —Ä–∞–±–æ—Ç–µ: {len(in_progress)}\n"
                f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ: {len(completed)}\n"
                f"üìà –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {len(unreacted) + len(in_progress) + len(completed)}\n\n"
                f"üïê –í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {datetime.now().strftime('%H:%M:%S')}"
            )
            
            await callback.message.edit_text(
                stats_text,
                parse_mode="HTML"
            )
            
        except Exception as e:
            logger.error(f"Error in _show_detailed_stats: {e}")
            await callback.message.edit_text(
                "‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏</b>\n\n"
                f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}",
                parse_mode="HTML"
            )
    
    async def _cleanup_completed_tasks(self, callback: types.CallbackQuery):
        """–û—á–∏—â–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏–∑ Redis"""
        try:
            await callback.answer("üóëÔ∏è –û—á–∏—â–∞—é –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏...")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
            completed_tasks = await self.redis.get_tasks_by_status("completed")
            
            if not completed_tasks:
                await callback.message.edit_text(
                    "‚úÖ <b>–ù–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è –æ—á–∏—Å—Ç–∫–∏</b>\n\n"
                    "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–∂–µ —á–∏—Å—Ç–∞—è.",
                    parse_mode="HTML"
                )
                return
            
            deleted_count = 0
            
            # –£–¥–∞–ª—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
            for task in completed_tasks:
                try:
                    task_id = task.get('task_id')
                    if task_id:
                        await self.redis.delete_task(task_id)
                        deleted_count += 1
                except Exception as e:
                    logger.error(f"Error deleting completed task {task.get('task_id')}: {e}")
            
            await callback.message.edit_text(
                f"‚úÖ <b>–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –≤—ã–ø–æ–ª–Ω–µ–Ω–∞</b>\n\n"
                f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –∑–∞–¥–∞—á: {deleted_count} –∏–∑ {len(completed_tasks)}",
                parse_mode="HTML"
            )
            
            logger.info(f"Admin {callback.from_user.username} deleted {deleted_count} completed tasks")
            
        except Exception as e:
            logger.error(f"Error in _cleanup_completed_tasks: {e}")
            await callback.message.edit_text(
                "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∑–∞–¥–∞—á</b>\n\n"
                f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}",
                parse_mode="HTML"
            )

    async def _full_reset_confirmation(self, callback: types.CallbackQuery):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –ë–î"""
        try:
            await callback.answer("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! –≠—Ç–æ —É–¥–∞–ª–∏—Ç –í–°–ï –¥–∞–Ω–Ω—ã–µ!")
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="üî• –î–ê, –£–î–ê–õ–ò–¢–¨ –í–°–Å",
                    callback_data="admin_full_reset_execute"
                )],
                [InlineKeyboardButton(
                    text="‚ùå –û—Ç–º–µ–Ω–∞",
                    callback_data="admin_full_reset_cancel"
                )]
            ])
            
            await callback.message.edit_text(
                "‚ö†Ô∏è <b>–ü–û–õ–ù–ê–Ø –û–ß–ò–°–¢–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–• REDIS</b>\n\n"
                "üö® <b>–í–ù–ò–ú–ê–ù–ò–ï! –≠–¢–û –î–ï–ô–°–¢–í–ò–ï –ù–ï–û–ë–†–ê–¢–ò–ú–û!</b>\n\n"
                "–ë—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã:\n"
                "‚Ä¢ üóÇÔ∏è –í—Å–µ –∑–∞–¥–∞—á–∏ (–∞–∫—Ç–∏–≤–Ω—ã–µ, –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ, –≤ —Ä–∞–±–æ—Ç–µ)\n"
                "‚Ä¢ üìä –í—Å—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
                "‚Ä¢ üë• –î–∞–Ω–Ω—ã–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π\n"
                "‚Ä¢ üî¢ –°—á—ë—Ç—á–∏–∫–∏ –∏ –Ω–æ–º–µ—Ä–∞ –∑–∞–¥–∞—á\n"
                "‚Ä¢ üìå ID –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π\n"
                "‚Ä¢ üéØ –¢–µ–º—ã —Ñ–æ—Ä—É–º–∞\n\n"
                "<b>–í–´ –£–í–ï–†–ï–ù–´, –ß–¢–û –•–û–¢–ò–¢–ï –ü–†–û–î–û–õ–ñ–ò–¢–¨?</b>",
                parse_mode="HTML",
                reply_markup=keyboard
            )
            
            logger.warning(f"Admin {callback.from_user.username} requested full database reset confirmation")
            
        except Exception as e:
            logger.error(f"Error in _full_reset_confirmation: {e}")
            await callback.message.edit_text(
                "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</b>\n\n"
                f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}",
                parse_mode="HTML"
            )

    async def _full_reset_database(self, callback: types.CallbackQuery):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—É—é –æ—á–∏—Å—Ç–∫—É Redis –ë–î —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        try:
            await callback.answer("üî• –í—ã–ø–æ–ª–Ω—è—é –ø–æ–ª–Ω—É—é –æ—á–∏—Å—Ç–∫—É –ë–î...")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            await callback.message.edit_text(
                "üî• <b>–í–´–ü–û–õ–ù–Ø–ï–¢–°–Ø –ü–û–õ–ù–ê–Ø –û–ß–ò–°–¢–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•</b>\n\n"
                "‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...\n"
                "üö´ –ù–ï –ü–†–ï–†–´–í–ê–ô–¢–ï –ü–†–û–¶–ï–°–°!",
                parse_mode="HTML"
            )
            
            logger.critical(f"FULL DATABASE RESET initiated by admin {callback.from_user.username}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º (—Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫)
            total_tasks = 0
            try:
                stats_before = await self.redis.get_global_stats()
                total_tasks = stats_before.get('unreacted', 0) + stats_before.get('in_progress', 0) + stats_before.get('completed', 0)
                logger.info(f"Retrieved stats before clearing: {stats_before}")
            except Exception as stats_error:
                logger.error(f"Error getting stats before clearing: {stats_error}")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ—á–∏—Å—Ç–∫—É –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–Ω—É—é –æ—á–∏—Å—Ç–∫—É Redis
            await self.redis.conn.flushdb()
            
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏
            await asyncio.sleep(1.0)
            
            # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.edit_text(
                "‚úÖ <b>–ü–û–õ–ù–ê–Ø –û–ß–ò–°–¢–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–• –ó–ê–í–ï–†–®–ï–ù–ê</b>\n\n"
                f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –∑–∞–¥–∞—á: {total_tasks}\n"
                f"üìä –û—á–∏—â–µ–Ω–∞ –≤—Å—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
                f"üë§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {callback.from_user.username}\n"
                f"üïê –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n"
                "üîÑ <b>–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ</b>\n\n"
                "‚ö†Ô∏è –í—Å–µ –±–æ—Ç—ã –ø—Ä–æ–¥–æ–ª–∂–∞—é—Ç —Ä–∞–±–æ—Ç–∞—Ç—å, –Ω–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞.",
                parse_mode="HTML"
            )
            
            logger.critical(f"FULL DATABASE RESET completed by admin {callback.from_user.username}. Total tasks deleted: {total_tasks}")
            
        except Exception as e:
            logger.error(f"Error in _full_reset_database: {e}")
            await callback.message.edit_text(
                "‚ùå <b>–û–®–ò–ë–ö–ê –ü–†–ò –ü–û–õ–ù–û–ô –û–ß–ò–°–¢–ö–ï –ë–î</b>\n\n"
                f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}\n\n"
                "‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –Ω–µ–∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏.\n"
                "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏—Å—Ç–µ–º—É.",
                parse_mode="HTML"
            )

    async def _full_reset_cancel(self, callback: types.CallbackQuery):
        """–û—Ç–º–µ–Ω—è–µ—Ç –ø–æ–ª–Ω—É—é –æ—á–∏—Å—Ç–∫—É –ë–î –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        try:
            await callback.answer("‚úÖ –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ë–î –æ—Ç–º–µ–Ω–µ–Ω–∞")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="üîÑ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏",
                    callback_data="admin_complete_all"
                )],
                [InlineKeyboardButton(
                    text="üìä –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É",
                    callback_data="admin_show_stats"
                )],
                [InlineKeyboardButton(
                    text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏",
                    callback_data="admin_cleanup_completed"
                )],
                [InlineKeyboardButton(
                    text="‚ö†Ô∏è –ü–û–õ–ù–ê–Ø –û–ß–ò–°–¢–ö–ê –ë–î",
                    callback_data="admin_full_reset_confirm"
                )]
            ])
            
            await callback.message.edit_text(
                "üéõÔ∏è <b>–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è TaskBot</b>\n\n"
                "‚úÖ –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ë–î –æ—Ç–º–µ–Ω–µ–Ω–∞.\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                parse_mode="HTML",
                reply_markup=keyboard
            )
            
            logger.info(f"Admin {callback.from_user.username} cancelled full database reset")
            
        except Exception as e:
            logger.error(f"Error in _full_reset_cancel: {e}")
            await callback.message.edit_text(
                "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –æ–ø–µ—Ä–∞—Ü–∏–∏</b>\n\n"
                f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}",
                parse_mode="HTML"
            )

    async def start_polling(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ long polling —Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π PubSub"""
        try:
            logger.info("[TASKBOT][STEP 1] Starting TaskBot in polling mode...")
            logger.info("[TASKBOT][STEP 1.1] Subscribing to new_tasks channel...")
            await self.pubsub_manager.subscribe("new_tasks", self._pubsub_message_handler)
            logger.info("[TASKBOT][STEP 1.2] Subscribing to task_updates channel...")
            await self.pubsub_manager.subscribe("task_updates", self._pubsub_message_handler)
            logger.info("[TASKBOT][STEP 1.3] TaskBot subscribed to 'new_tasks' and 'task_updates' channels")
            logger.info("[TASKBOT][STEP 1.4] Starting PubSub listener...")
            await self.pubsub_manager.start()  # —Å–ª—É—à–∞—Ç–µ–ª—å –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫
            logger.info("[TASKBOT][STEP 1.5] PubSub listener started, starting polling...")
            await self.dp.start_polling(self.bot)
        except Exception as e:
            logger.error(f"[TASKBOT][ERROR] Failed to start TaskBot: {e}", exc_info=True)
        finally:
            await self.bot.session.close()

# –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞
task_bot = TaskBot()

# –î–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –¥—Ä—É–≥–∏–º–∏ –º–æ–¥—É–ª—è–º–∏
async def get_task_bot() -> TaskBot:
    return task_bot


if __name__ == "__main__":
    asyncio.run(task_bot.start())
