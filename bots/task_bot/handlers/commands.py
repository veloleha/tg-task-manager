# task_bot/handlers/commands.py

from aiogram import types, Router
from aiogram.filters import Command
import logging

# Import Redis client for statistics
from core.redis_client import redis_client

logger = logging.getLogger(__name__)

router = Router()  # –†–æ—É—Ç–µ—Ä –∫–æ–º–∞–Ω–¥ ‚Äî —Å—é–¥–∞ –±—É–¥—É—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤—Å–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã


@router.message(Command("start"))
async def cmd_start(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ –≤—Ö–æ–¥–Ω–∞—è —Ç–æ—á–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —á—Ç–æ –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç
    """
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    await message.answer("üöÄ Task Management Bot –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")


@router.message(Command("all"))
async def cmd_all(message: types.Message):
    """
    –ó–∞–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã /all
    - –í –±—É–¥—É—â–µ–º –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–æ –≤—Å–µ —á–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    """
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /all –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    await message.answer("‚è≥ –ö–æ–º–∞–Ω–¥–∞ /all –µ—â—ë –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞. –û–∂–∏–¥–∞–π—Ç–µ.")


# ==================== STATISTICS COMMANDS ====================

@router.message(Command("stats"))
async def cmd_current_stats(message: types.Message):
    """Show current global statistics"""
    try:
        logger.info(f"Current stats command from user {message.from_user.id}")
        
        # Get current statistics
        stats = await redis_client.get_global_stats()
        
        # Format message
        stats_message = await redis_client.format_pinned_message(stats)
        
        await message.reply(stats_message, parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"Error in current stats command: {e}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")


@router.message(Command("day"))
async def cmd_day_stats(message: types.Message):
    """Show statistics for today"""
    try:
        logger.info(f"Day stats command from user {message.from_user.id}")
        
        # Get today's statistics
        stats = await redis_client.get_period_stats("day")
        
        # Format message
        stats_message = await redis_client.format_period_stats_message("day", stats)
        
        await message.reply(stats_message, parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"Error in day stats command: {e}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –¥–µ–Ω—å")


@router.message(Command("week"))
async def cmd_week_stats(message: types.Message):
    """Show statistics for current week"""
    try:
        logger.info(f"Week stats command from user {message.from_user.id}")
        
        # Get week's statistics
        stats = await redis_client.get_period_stats("week")
        
        # Format message
        stats_message = await redis_client.format_period_stats_message("week", stats)
        
        await message.reply(stats_message, parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"Error in week stats command: {e}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –Ω–µ–¥–µ–ª—é")


@router.message(Command("month"))
async def cmd_month_stats(message: types.Message):
    """Show statistics for current month"""
    try:
        logger.info(f"Month stats command from user {message.from_user.id}")
        
        # Get month's statistics
        stats = await redis_client.get_period_stats("month")
        
        # Format message
        stats_message = await redis_client.format_period_stats_message("month", stats)
        
        await message.reply(stats_message, parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"Error in month stats command: {e}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –º–µ—Å—è—Ü")


@router.message(Command("reset_stats"))
async def cmd_reset_stats(message: types.Message):
    """Reset all statistics counters (admin only)"""
    try:
        # Check if user is admin (you may want to implement proper admin check)
        user_id = message.from_user.id
        logger.info(f"Reset stats command from user {user_id}")
        
        # For now, allow any user - you should implement admin check here
        # if user_id not in ADMIN_USER_IDS:
        #     await message.reply("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã")
        #     return
        
        # Reset all counters
        await redis_client.reset_all_counters()
        
        await message.reply("‚úÖ –í—Å–µ —Å—á–µ—Ç—á–∏–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã")
        
    except Exception as e:
        logger.error(f"Error in reset stats command: {e}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
