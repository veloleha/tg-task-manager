import asyncio
import json
import logging
from datetime import datetime
from typing import Dict, Optional
from collections import defaultdict

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import aiogram.exceptions

from core.redis_client import redis_client
from core.pubsub_manager import UserBotPubSubManager
from config.settings import settings
from bots.user_bot.topic_manager import TopicManager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("logs/userbot.log", encoding="utf-8"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)
# –≠—Ç–∞–ø–Ω—ã–µ –ª–æ–≥–∏ –±—É–¥—É—Ç –≤–∏–¥–Ω—ã –∏ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ, –∏ –≤ logs/userbot.log

class CreateTaskState(StatesGroup):
    waiting_for_task = State()

class MessageAggregator:
    def __init__(self, bot: Bot, redis_client: UserBotPubSubManager, timeout=60):
        self.bot = bot
        self.redis = redis_client
        self.user_messages = defaultdict(list)
        self.timeout = timeout  # 1 –º–∏–Ω—É—Ç–∞ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.lock = asyncio.Lock()
        self.processed_tasks = {}  # –•—Ä–∞–Ω–∏—Ç ID –∑–∞–¥–∞—á –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    async def add_message(self, user_id: int, message_data: dict):
        async with self.lock:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user_id in self.processed_tasks:
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–¥–∞—á–µ
                self.user_messages[user_id].append(message_data)
                # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
                await self.update_existing_task(user_id)
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ
                self.user_messages[user_id].append(message_data)
                await self.create_immediate_task(user_id)
                # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è —Å–±–æ—Ä–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                asyncio.create_task(self.flush_user(user_id))
    
    async def create_immediate_task(self, user_id: int):
        """–°–æ–∑–¥–∞–µ—Ç –∑–∞–¥–∞—á—É –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏"""
        async with self.lock:
            if user_id in self.user_messages and self.user_messages[user_id]:
                message_data = self.user_messages[user_id][0].copy()
                try:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É –≤ Redis
                    task_id = await self.redis.save_task(message_data)
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
                    self.processed_tasks[user_id] = task_id
                    
                    # –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ –æ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ
                    await self.redis.publish_event("new_tasks", {
                        "type": "new_task",
                        "task_id": task_id
                    })
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
                    await self.redis.increment_counter("unreacted")
                    
                    logger.info(f"Created immediate task {task_id} for user {message_data['user_id']}")
                    
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∞–∫—Ü–∏—é 'üëÄ' –Ω–∞ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await self.bot.set_message_reaction(
                        chat_id=message_data['chat_id'],
                        message_id=message_data['message_id'],
                        reaction=[{"type": "emoji", "emoji": "üëÄ"}]
                    )
                except Exception as e:
                    logger.error(f"Error creating immediate task: {e}")
    
    async def update_existing_task(self, user_id: int):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–¥–∞—á—É —Å –Ω–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏"""
        async with self.lock:
            if user_id in self.processed_tasks and user_id in self.user_messages:
                task_id = self.processed_tasks[user_id]
                messages = self.user_messages[user_id]
                
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                combined_text = "\n".join(msg.get('text', '') for msg in messages if msg.get('text', ''))
                
                if combined_text:
                    try:
                        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ Redis
                        await self.redis.update_task(task_id, text=combined_text)
                        
                        # –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏
                        await self.redis.publish_event("task_updates", {
                            "type": "task_update",
                            "task_id": task_id,
                            "text": combined_text
                        })
                        
                        logger.info(f"Updated task {task_id} for user {user_id} with {len(messages)} messages")
                    except Exception as e:
                        logger.error(f"Error updating task {task_id}: {e}")
    
    async def flush_user(self, user_id: int):
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É"""
        await asyncio.sleep(self.timeout)
        async with self.lock:
            if user_id in self.user_messages:
                # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                if user_id in self.processed_tasks:
                    del self.processed_tasks[user_id]
                del self.user_messages[user_id]
                logger.info(f"Finished processing messages for user {user_id}")
    
    async def save_and_process(self, message_data: dict):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É –≤ Redis
            task_id = await self.redis.save_task(message_data)
            
            # –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ –æ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ
            await self.redis.publish_event("new_tasks", {
                "type": "new_task",
                "task_id": task_id
            })
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
            await self.redis.increment_counter("unreacted")
            
            logger.info(f"Created aggregated task {task_id} for user {message_data['user_id']}")
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∞–∫—Ü–∏—é 'üëÄ' –Ω–∞ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await self.bot.set_message_reaction(
                chat_id=message_data['chat_id'],
                message_id=message_data['message_id'],
                reaction=[{"type": "emoji", "emoji": "üëÄ"}]
            )
        except Exception as e:
            logger.error(f"Error creating aggregated task: {e}")


class UserBot:
    """
    User Bot - —Å–æ–±–∏—Ä–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Å–æ–∑–¥–∞–µ—Ç –∑–∞–¥–∞—á–∏
    
    –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
    - –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ç–µ–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    - –ê–≤—Ç–æ–æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ç–µ—á–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    - –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∞–∫—Ü–∏–π –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
    - –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    """
    
    def __init__(self):
        self.bot = Bot(token=settings.USER_BOT_TOKEN)
        self.dp = Dispatcher()
        self.redis = redis_client
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
        self.topic_manager = TopicManager(self.bot)
        self.pubsub_manager = UserBotPubSubManager()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        self.message_aggregator = MessageAggregator(bot=self.bot, redis_client=self.redis)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ (–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5 –º–∏–Ω—É—Ç)
        aggregation_timeout = getattr(settings, 'MESSAGE_AGGREGATION_TIMEOUT', 300)
        self.message_aggregator.timeout = aggregation_timeout
        
        self._setup_handlers()

    def _setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        
        @self.dp.message(Command("start"))
        async def cmd_start(message: types.Message):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
            logger.info(f"Start command from user {message.from_user.id}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "—Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É" –≤–æ –≤—Å–µ—Ö —á–∞—Ç–∞—Ö
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="üéØ –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É", 
                    callback_data="create_task"
                )]
            ])
            
            if message.chat.type == "private":
                # –í –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
                await message.answer(
                    "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–±–æ—Ä–∞ –∑–∞–¥–∞—á.\n\n"
                    "üìù –ú–æ–∂–µ—Ç–µ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è —Å–æ–∑–¥–∞–º –∏–∑ –Ω–µ–≥–æ –∑–∞–¥–∞—á—É.\n"
                    "‚ö° –ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É', —á—Ç–æ–±—ã —Å—Ä–∞–∑—É –ø–µ—Ä–µ–π—Ç–∏ –≤ —Å—Ç–∞—Ç—É—Å '–≤ –æ–∂–∏–¥–∞–Ω–∏–∏'.",
                    reply_markup=keyboard
                )
            else:
                # –í –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö —Ç–æ–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
                await message.answer(
                    "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–±–æ—Ä–∞ –∑–∞–¥–∞—á.\n\n"
                    "üìù –ú–æ–∂–µ—Ç–µ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è —Å–æ–∑–¥–∞–º –∏–∑ –Ω–µ–≥–æ –∑–∞–¥–∞—á—É.\n"
                    "‚ö° –ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É', —á—Ç–æ–±—ã —Å—Ä–∞–∑—É –ø–µ—Ä–µ–π—Ç–∏ –≤ —Å—Ç–∞—Ç—É—Å '–≤ –æ–∂–∏–¥–∞–Ω–∏–∏'.",
                    reply_markup=keyboard
                )

        @self.dp.callback_query(F.data == "create_task")
        async def handle_create_task_button(callback: types.CallbackQuery, state: FSMContext):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É'"""
            logger.info(f"Create task button pressed by user {callback.from_user.id}")
            await callback.answer()
            await callback.message.answer(
                "üìù –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å:"
            )
            await state.set_state(CreateTaskState.waiting_for_task)

        @self.dp.message(CreateTaskState.waiting_for_task)
        async def handle_task_text(message: types.Message, state: FSMContext):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ –∑–∞–¥–∞—á–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è"""
            try:
                logger.info(f"Received task text from user {message.from_user.id}: {message.text[:100] if message.text else 'No text'}...")
                
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                message_data = await self._prepare_message_data(message)
                
                # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –Ω–∞–ø—Ä—è–º—É—é —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'waiting' (–º–∏–Ω—É—è 'unreacted')
                task_id = await self._create_task_directly(message_data, status='waiting')
                
                # –£–±–∏—Ä–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å —á–∞—Ç
                # await message.answer(
                #     "‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ –∏ —Å—Ä–∞–∑—É –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –≤ —Å—Ç–∞—Ç—É—Å '–í –æ–∂–∏–¥–∞–Ω–∏–∏'!\n"
                #     f"üÜî ID –∑–∞–¥–∞—á–∏: {task_id}"
                # )
                
                # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                await state.clear()
                
                logger.info(f"‚úÖ Fast task created: {task_id} with status 'waiting'")
                
            except Exception as e:
                logger.error(f"Error creating fast task: {e}", exc_info=True)
                await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                await state.clear()

        @self.dp.message()
        async def handle_message(message: types.Message):
            """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π"""
            try:
                # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–æ–≤
                if message.from_user.is_bot:
                    return
                
                # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
                if message.text and message.text.startswith('/'):
                    return
                
                logger.info(f"[USERBOT][MSG] Processing message from user {message.from_user.id} in chat {message.chat.id}")
                logger.info(f"[USERBOT][MSG] Message text: {message.text[:100] if message.text else 'No text'}...")
                
                user_id = message.from_user.id
                chat_id = message.chat.id
                
                # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é —Ç–µ–º—É –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ (–µ—Å–ª–∏ —ç—Ç–æ —Ñ–æ—Ä—É–º)
                logger.info(f"[USERBOT][MSG] Getting or creating user topic for user {user_id} in chat {chat_id}...")
                user_topic_id = await self.topic_manager.get_or_create_user_topic(
                    chat_id=chat_id,
                    user_id=user_id,
                    username=message.from_user.username,
                    first_name=message.from_user.first_name
                )
                
                if user_topic_id:
                    logger.info(f"[USERBOT][MSG] User topic ID: {user_topic_id}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–∏—à–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ —Å–≤–æ–µ–π —Ç–µ–º–µ
                    current_thread_id = getattr(message, 'message_thread_id', None)
                    if current_thread_id and current_thread_id == user_topic_id:
                        logger.info(f"[USERBOT][MSG] User is already writing in their own topic {user_topic_id}, skipping forward")
                    else:
                        # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é —Ç–µ–º—É
                        await self._forward_to_user_topic(message, user_topic_id, chat_id)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ç–µ–º—ã
                    await self.topic_manager.update_topic_activity(chat_id, user_id)
                else:
                    logger.info(f"[USERBOT][MSG] Chat {chat_id} is not a forum or topic creation failed")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–¥–∞—á–∞
                existing_task = await self.redis.get(f"active_task:{user_id}:{chat_id}")
                if existing_task:
                    logger.info(f"[USERBOT][MSG] Found existing task: {existing_task}")
                    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–¥–∞—á–µ
                    await self._append_to_task(existing_task, message)
                    return
                else:
                    logger.info(f"[USERBOT][MSG] No existing task found, creating new one")
                
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                logger.info(f"[USERBOT][MSG] Preparing message data...")
                message_data = await self._prepare_message_data(message)
                logger.info(f"[USERBOT][MSG] Message data prepared: {len(message_data)} fields")
                
                # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –Ω–∞–ø—Ä—è–º—É—é (–±–µ–∑ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞)
                logger.info(f"[USERBOT][MSG] Creating task directly...")
                task_id = await self._create_task_directly(message_data)
                logger.info(f"[USERBOT][MSG] ‚úÖ Task created directly: {task_id}")
                
                # –î–æ–±–∞–≤–ª—è–µ–º reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É "–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É" –≤–æ –≤—Å–µ—Ö —á–∞—Ç–∞—Ö
                reply_keyboard = types.ReplyKeyboardMarkup(
                    keyboard=[
                        [types.KeyboardButton(text="üéØ –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É")]
                    ],
                    resize_keyboard=True
                )
                
                # –£–±–∏—Ä–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å —á–∞—Ç
                # await message.answer("‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞!", reply_markup=reply_keyboard)
                
            except Exception as e:
                logger.error(f"Error handling message: {e}", exc_info=True)
                try:
                    await self._set_error_reaction(message)
                except:
                    pass
    
    async def _forward_to_user_topic(self, message: types.Message, topic_id: int, chat_id: int):
        """–ü–µ—Ä–µ—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é —Ç–µ–º—É"""
        try:
            # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é —Ç–µ–º—É
            await self.bot.forward_message(
                chat_id=chat_id,
                from_chat_id=chat_id,
                message_id=message.message_id,
                message_thread_id=topic_id
            )
            
            logger.info(f"[USERBOT] Forwarded message to user topic {topic_id} in chat {chat_id}")
            
        except Exception as e:
            error_msg = str(e).lower()
            if "message thread not found" in error_msg:
                logger.warning(f"[USERBOT] Topic {topic_id} not found, creating new topic for user {message.from_user.id} in chat {chat_id}")
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Ç–µ–º—É –∏–∑ Redis
                await self.topic_manager.redis.conn.delete(f"user_topic:{chat_id}:{message.from_user.id}")
                await self.topic_manager.redis.conn.delete(f"topic_user:{chat_id}:{topic_id}")
                
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç–µ–º—É
                new_topic_id = await self.topic_manager._create_user_topic(
                    chat_id=chat_id,
                    user_id=message.from_user.id,
                    username=message.from_user.username,
                    first_name=message.from_user.first_name
                )
                
                if new_topic_id:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—É—é —Ç–µ–º—É
                    await self.topic_manager._save_user_topic(chat_id, message.from_user.id, new_topic_id)
                    
                    # –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É –ø–µ—Ä–µ—Å—ã–ª–∫–∏
                    try:
                        await self.bot.send_message(
                            chat_id=chat_id,
                            text=forward_text,
                            message_thread_id=new_topic_id
                        )
                        logger.info(f"[USERBOT] Forwarded message to new user topic {new_topic_id} in chat {chat_id}")
                    except Exception as retry_error:
                        logger.error(f"[USERBOT] Error forwarding to new user topic: {retry_error}")
                else:
                    logger.error(f"[USERBOT] Failed to create new topic for user {message.from_user.id} in chat {chat_id}")
            else:
                logger.error(f"[USERBOT] Error forwarding to user topic: {e}")

    async def _create_task_directly(self, message_data: dict, status: str = "unreacted") -> str:
        """–°–æ–∑–¥–∞–µ—Ç –∑–∞–¥–∞—á—É –Ω–∞–ø—Ä—è–º—É—é –±–µ–∑ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞"""
        try:
            logger.info(f"[USERBOT][DIRECT] Starting direct task creation...")
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
            task_data = {
                "message_id": message_data["message_id"],
                "chat_id": message_data["chat_id"],
                "chat_title": message_data["chat_title"],
                "chat_type": message_data["chat_type"],
                "user_id": message_data["user_id"],
                "first_name": message_data["first_name"],
                "last_name": message_data["last_name"],
                "username": message_data["username"],
                "language_code": message_data["language_code"],
                "is_bot": message_data["is_bot"],
                "text": message_data["text"],
                "status": status,
                "task_number": None,
                "assignee": None,
                "task_link": None,
                "reply": None,
                "created_at": message_data["created_at"],
                "updated_at": None,
                "aggregated": False,  # –ù–µ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞
                "message_count": 1,
                # –ú–µ–¥–∏–∞—Ñ–∞–π–ª—ã
                "has_photo": message_data.get("has_photo", False),
                "has_video": message_data.get("has_video", False),
                "has_document": message_data.get("has_document", False),
                "photo_file_ids": message_data.get("photo_file_ids", []),
                "video_file_id": message_data.get("video_file_id"),
                "document_file_id": message_data.get("document_file_id"),
                "media_group_id": message_data.get("media_group_id")
            }
            logger.info(f"[USERBOT][DIRECT] Task data prepared with {len(task_data)} fields")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É –≤ Redis
            logger.info(f"[USERBOT][DIRECT] Saving task to Redis...")
            task_id = await self.redis.save_task(task_data)
            logger.info(f"[USERBOT][DIRECT] Task saved with ID: {task_id}")
            
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            await asyncio.sleep(0.1)
            
            # –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ –æ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ
            logger.info(f"[USERBOT][DIRECT] Publishing task event...")
            await self._publish_task_event(task_id, task_data)
            logger.info(f"[USERBOT][DIRECT] Task event published")
            
            logger.info(f"[USERBOT][DIRECT] ‚úÖ Task created successfully: {task_id}")
            return task_id
            
        except Exception as e:
            logger.error(f"[USERBOT][DIRECT] ‚ùå Error creating task directly: {e}", exc_info=True)
            return None
    
    async def _publish_task_event(self, task_id: str, task_data: dict):
        """–ü—É–±–ª–∏–∫—É–µ—Ç —Å–æ–±—ã—Ç–∏–µ –æ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ"""
        try:
            logger.info(f"[PUBSUB][PUBLISH] Starting task event publication for task: {task_id}")
            await self.redis._ensure_connection()
            logger.info(f"[PUBSUB][PUBLISH] Redis connection ensured")
            
            event_data = {
                'task_id': task_id,
                'type': 'new_task',
                'user_id': int(task_data.get('user_id', 0)),
                'username': task_data.get('username', ''),
                'text': task_data.get('text', '')
            }
            logger.info(f"[PUBSUB][PUBLISH] Event data prepared: {event_data}")
            
            event_json = json.dumps(event_data)
            logger.info(f"[PUBSUB][PUBLISH] Event serialized to JSON: {len(event_json)} chars")
            
            result = await self.redis.conn.publish('new_tasks', event_json)
            logger.info(f"[PUBSUB][PUBLISH] ‚úÖ Published to 'new_tasks' channel, subscribers notified: {result}")
            logger.info(f"[USERBOT][STEP 2] Published event to new_tasks: {event_data}")
            
        except Exception as e:
            logger.error(f"[PUBSUB][PUBLISH] ‚ùå Error publishing task event: {e}", exc_info=True)

    async def _prepare_message_data(self, message: types.Message) -> dict:
        """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"""
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
        media_data = await self._extract_media_data(message)
        
        return {
            "message_id": message.message_id,
            "chat_id": message.chat.id,
            "chat_title": getattr(message.chat, 'title', 'Private Chat'),
            "chat_type": message.chat.type,
            "user_id": message.from_user.id,
            "first_name": message.from_user.first_name or "",
            "last_name": message.from_user.last_name or "",
            "username": message.from_user.username or "",
            "language_code": message.from_user.language_code or "",
            "is_bot": message.from_user.is_bot,
            "text": message.text or message.caption or "",
            "status": "unreacted",
            "task_number": None,
            "assignee": None,
            "task_link": None,
            "reply": None,
            "created_at": datetime.utcnow().isoformat(),
            "updated_at": None,
            # –ú–µ–¥–∏–∞—Ñ–∞–π–ª—ã
            "has_photo": media_data["has_photo"],
            "has_video": media_data["has_video"],
            "has_document": media_data["has_document"],
            "photo_file_ids": media_data["photo_file_ids"],
            "video_file_id": media_data["video_file_id"],
            "document_file_id": media_data["document_file_id"],
            "media_group_id": media_data["media_group_id"]
        }

    async def _extract_media_data(self, message: types.Message) -> dict:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞—Ö –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        media_data = {
            "has_photo": False,
            "has_video": False,
            "has_document": False,
            "photo_file_ids": [],
            "video_file_id": None,
            "document_file_id": None,
            "media_group_id": getattr(message, 'media_group_id', None)
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ç–æ
        if message.photo:
            media_data["has_photo"] = True
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ —Ä–∞–∑–º–µ—Ä—ã —Ñ–æ—Ç–æ (Telegram –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑–º–µ—Ä–æ–≤)
            media_data["photo_file_ids"] = [photo.file_id for photo in message.photo]
            logger.info(f"Found photo in message {message.message_id}, file_ids: {media_data['photo_file_ids']}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–¥–µ–æ
        if message.video:
            media_data["has_video"] = True
            media_data["video_file_id"] = message.video.file_id
            logger.info(f"Found video in message {message.message_id}, file_id: {media_data['video_file_id']}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã (–≤–∫–ª—é—á–∞—è –≤–∏–¥–µ–æ-–∑–∞–º–µ—Ç–∫–∏, –∞–Ω–∏–º–∞—Ü–∏–∏ –∏ —Ç.–¥.)
        if message.document:
            media_data["has_document"] = True
            media_data["document_file_id"] = message.document.file_id
            logger.info(f"Found document in message {message.message_id}, file_id: {media_data['document_file_id']}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–¥–µ–æ-–∑–∞–º–µ—Ç–∫–∏
        if message.video_note:
            media_data["has_video"] = True
            media_data["video_file_id"] = message.video_note.file_id
            logger.info(f"Found video note in message {message.message_id}, file_id: {media_data['video_file_id']}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏ (GIF)
        if message.animation:
            media_data["has_document"] = True
            media_data["document_file_id"] = message.animation.file_id
            logger.info(f"Found animation in message {message.message_id}, file_id: {media_data['document_file_id']}")
        
        return media_data

    async def _send_media_reply(self, chat_id: int, topic_id: int, reply_text: str, reply_author: str, update_data: dict):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç —Å –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞–º–∏ –∫–∞–∫ fallback"""
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ (–±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –∞–≤—Ç–æ—Ä–∞ –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è —Å –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏)
            message_text = f"üí¨ <b>–û—Ç–≤–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:</b>\n\n{reply_text}" if reply_text else f"üí¨ <b>–û—Ç–≤–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏</b>"
            
            media_sent = False
            
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –µ—Å—Ç—å
            if update_data.get('has_photo') and update_data.get('photo_file_ids'):
                try:
                    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ photo_file_ids
                    photo_file_ids = update_data.get('photo_file_ids', [])
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å–ø–∏—Å–æ–∫, –∞ –Ω–µ —Å—Ç—Ä–æ–∫–∞
                    if isinstance(photo_file_ids, str):
                        try:
                            import json
                            photo_file_ids = json.loads(photo_file_ids)
                        except:
                            logger.warning(f"Could not parse photo_file_ids string: {photo_file_ids}")
                            raise ValueError("Invalid photo_file_ids format")
                    
                    if not photo_file_ids or not isinstance(photo_file_ids, list):
                        logger.warning(f"Invalid photo_file_ids: {photo_file_ids}")
                        raise ValueError("Invalid photo_file_ids")
                    
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π (–Ω–∞–∏–±–æ–ª—å—à–∏–π) —Ä–∞–∑–º–µ—Ä —Ñ–æ—Ç–æ
                    photo_file_id = photo_file_ids[-1]
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å file_id
                    if not photo_file_id or len(photo_file_id) < 10:
                        logger.warning(f"Invalid photo file_id in reply: {photo_file_id}")
                        raise ValueError("Invalid photo file_id")
                    
                    await self.bot.send_photo(
                        chat_id=chat_id,
                        photo=photo_file_id,
                        caption=message_text,
                        message_thread_id=topic_id,
                        parse_mode="HTML"
                    )
                    logger.info(f"Sent photo reply to topic {topic_id} in chat {chat_id}")
                    media_sent = True
                except Exception as photo_error:
                    logger.warning(f"Failed to send photo reply (file_id: {update_data.get('photo_file_ids', [])}): {photo_error}")
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å fallback –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ, –µ—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å
            elif not media_sent and update_data.get('has_video') and update_data.get('video_file_id'):
                try:
                    video_file_id = update_data['video_file_id']
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å file_id
                    if not video_file_id or len(video_file_id) < 10:
                        logger.warning(f"Invalid video file_id in reply: {video_file_id}")
                        raise ValueError("Invalid video file_id")
                    
                    await self.bot.send_video(
                        chat_id=chat_id,
                        video=video_file_id,
                        caption=message_text,
                        message_thread_id=topic_id,
                        parse_mode="HTML"
                    )
                    logger.info(f"Sent video reply to topic {topic_id} in chat {chat_id}")
                    media_sent = True
                except Exception as video_error:
                    logger.warning(f"Failed to send video reply (file_id: {update_data.get('video_file_id')}): {video_error}")
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å fallback –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç, –µ—Å–ª–∏ –º–µ–¥–∏–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å
            elif not media_sent and update_data.get('has_document') and update_data.get('document_file_id'):
                try:
                    document_file_id = update_data['document_file_id']
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å file_id
                    if not document_file_id or len(document_file_id) < 10:
                        logger.warning(f"Invalid document file_id in reply: {document_file_id}")
                        raise ValueError("Invalid document file_id")
                    
                    await self.bot.send_document(
                        chat_id=chat_id,
                        document=document_file_id,
                        caption=message_text,
                        message_thread_id=topic_id,
                        parse_mode="HTML"
                    )
                    logger.info(f"Sent document reply to topic {topic_id} in chat {chat_id}")
                    media_sent = True
                except Exception as doc_error:
                    logger.warning(f"Failed to send document reply (file_id: {update_data.get('document_file_id')}): {doc_error}")
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å fallback –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            
            # –ï—Å–ª–∏ –º–µ–¥–∏–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å –∏–ª–∏ –µ–≥–æ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if not media_sent:
                # –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ–¥–∏–∞ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Ö–æ—á–µ—Ç –≤–∏–¥–µ—Ç—å —Ç–∞–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —á–∏—Å—Ç—ã–π —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
                
                await self.bot.send_message(
                    chat_id=chat_id,
                    text=message_text,
                    message_thread_id=topic_id,
                    parse_mode="HTML"
                )
                logger.info(f"Sent text reply (media fallback) to topic {topic_id} in chat {chat_id}")
            
            return True
                
        except Exception as e:
            logger.error(f"Failed to send media reply to topic {topic_id} in chat {chat_id}: {e}")
            return False

    async def _send_media_reply_direct(self, chat_id: int, original_message_id: int, reply_text: str, reply_author: str, update_data: dict):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–¥–∏–∞-–æ—Ç–≤–µ—Ç –Ω–∞–ø—Ä—è–º—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
            message_text = f"üí¨ <b>–û—Ç–≤–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:</b>\n\n{reply_text}" if reply_text else f"üí¨ <b>–û—Ç–≤–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏</b>"
            
            media_sent = False
            
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –µ—Å—Ç—å
            if update_data.get('has_photo') and update_data.get('photo_file_ids'):
                try:
                    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ photo_file_ids
                    photo_file_ids = update_data.get('photo_file_ids', [])
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å–ø–∏—Å–æ–∫, –∞ –Ω–µ —Å—Ç—Ä–æ–∫–∞
                    if isinstance(photo_file_ids, str):
                        try:
                            import json
                            photo_file_ids = json.loads(photo_file_ids)
                        except:
                            logger.warning(f"Could not parse photo_file_ids string: {photo_file_ids}")
                            raise ValueError("Invalid photo_file_ids format")
                    
                    if not photo_file_ids or not isinstance(photo_file_ids, list):
                        logger.warning(f"Invalid photo_file_ids: {photo_file_ids}")
                        raise ValueError("Invalid photo_file_ids")
                    
                    photo_file_id = photo_file_ids[-1]
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å file_id
                    if not photo_file_id or len(photo_file_id) < 10:
                        logger.warning(f"Invalid photo file_id in direct reply: {photo_file_id}")
                        raise ValueError("Invalid photo file_id")
                    
                    await self.bot.send_photo(
                        chat_id=chat_id,
                        photo=photo_file_id,
                        caption=message_text,
                        reply_to_message_id=original_message_id if original_message_id else None,
                        parse_mode="HTML"
                    )
                    media_sent = True
                except Exception as photo_error:
                    logger.warning(f"Failed to send direct photo reply (file_id: {update_data.get('photo_file_ids', [])}): {photo_error}")
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å fallback –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ, –µ—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å
            elif not media_sent and update_data.get('has_video') and update_data.get('video_file_id'):
                try:
                    video_file_id = update_data['video_file_id']
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å file_id
                    if not video_file_id or len(video_file_id) < 10:
                        logger.warning(f"Invalid video file_id in direct reply: {video_file_id}")
                        raise ValueError("Invalid video file_id")
                    
                    await self.bot.send_video(
                        chat_id=chat_id,
                        video=video_file_id,
                        caption=message_text,
                        reply_to_message_id=original_message_id if original_message_id else None,
                        parse_mode="HTML"
                    )
                    media_sent = True
                except Exception as video_error:
                    logger.warning(f"Failed to send direct video reply (file_id: {update_data.get('video_file_id')}): {video_error}")
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å fallback –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç, –µ—Å–ª–∏ –º–µ–¥–∏–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å
            elif not media_sent and update_data.get('has_document') and update_data.get('document_file_id'):
                try:
                    document_file_id = update_data['document_file_id']
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å file_id
                    if not document_file_id or len(document_file_id) < 10:
                        logger.warning(f"Invalid document file_id in direct reply: {document_file_id}")
                        raise ValueError("Invalid document file_id")
                    
                    await self.bot.send_document(
                        chat_id=chat_id,
                        document=document_file_id,
                        caption=message_text,
                        reply_to_message_id=original_message_id if original_message_id else None,
                        parse_mode="HTML"
                    )
                    media_sent = True
                except Exception as doc_error:
                    logger.warning(f"Failed to send direct document reply (file_id: {update_data.get('document_file_id')}): {doc_error}")
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å fallback –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            
            # –ï—Å–ª–∏ –º–µ–¥–∏–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º fallback-—Å–æ–æ–±—â–µ–Ω–∏–µ
            if not media_sent:
                # –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ–¥–∏–∞ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Ö–æ—á–µ—Ç –≤–∏–¥–µ—Ç—å —Ç–∞–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —á–∏—Å—Ç—ã–π —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º fallback-—Å–æ–æ–±—â–µ–Ω–∏–µ
                await self.bot.send_message(
                    chat_id=chat_id,
                    text=message_text,
                    reply_to_message_id=original_message_id if original_message_id else None,
                    parse_mode="HTML"
                )
                logger.info(f"Sent text direct reply (media fallback) to chat {chat_id}")
            
            return media_sent
                
        except Exception as e:
            logger.error(f"Failed to send direct media reply to chat {chat_id}: {e}")
            return False

    async def _send_text_reply_direct(self, chat_id: int, original_message_id: int, reply_text: str, reply_author: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –Ω–∞–ø—Ä—è–º—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            message_text = f"üí¨ <b>–û—Ç–≤–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:</b>\n\n{reply_text}"
            
            if original_message_id:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∫–∞–∫ reply –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
                await self.bot.send_message(
                    chat_id=chat_id,
                    reply_to_message_id=int(original_message_id),
                    text=message_text,
                    parse_mode="HTML"
                )
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç ID –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await self.bot.send_message(
                    chat_id=chat_id,
                    text=message_text,
                    parse_mode="HTML"
                )
            return True
                
        except Exception as e:
            logger.error(f"Failed to send direct text reply to chat {chat_id}: {e}")
            return False

    async def _set_error_reaction(self, message: types.Message):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–µ–∞–∫—Ü–∏—é –æ—à–∏–±–∫–∏"""
        try:
            await self.bot.set_message_reaction(
                chat_id=message.chat.id,
                message_id=message.message_id,
                reaction=[{"type": "emoji", "emoji": "‚ùå"}]
            )
            logger.debug(f"Set reaction '‚ùå' for message {message.message_id} in chat {message.chat.id}")
        except Exception as e:
            logger.debug(f"Could not set error reaction: {e}")

    async def _append_to_task(self, task_id: str, message: types.Message):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–¥–∞—á–µ"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á—É
            task = await self.redis.get_task(task_id)
            if not task:
                return
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∫ –∑–∞–¥–∞—á–µ
            task['text'] += "\n" + message.text
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ Redis
            await self.redis.update_task(task_id, task)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
            await self.task_bot.update_task_message(task_id, task['text'])
            
            logger.info(f"Appended message to task {task_id}")
            
        except Exception as e:
            logger.error(f"Error appending message to task: {e}")

    async def _create_new_task(self, message: types.Message):
        """
        –°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
        """
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            message_data = await self._prepare_message_data(message)

            # –≠–¢–ê–ü 1: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–ø–∏—Å–∞–Ω–æ –≤ –±–∞–∑—É (Redis)
            task_id = await self.redis.save_task(message_data)
            logger.info(f"[USERBOT][STEP 1] –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ Redis –∫–∞–∫ –∑–∞–¥–∞—á–∞ {task_id}")

            # –≠–¢–ê–ü 2: UserBot –æ—Ç–ø—Ä–∞–≤–∏–ª TaskBot —Å–∏–≥–Ω–∞–ª –ø–æ Pub/Sub
            await self.redis.publish_event("new_tasks", {
                "type": "new_task",
                "task_id": task_id
            })
            logger.info(f"[USERBOT][STEP 2] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–∏–≥–Ω–∞–ª –ø–æ Pub/Sub –æ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ: {task_id}")

            # –≠–¢–ê–ü 3: (TaskBot –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª, –ª–æ–≥–∏—Ä—É–µ—Ç—Å—è –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ TaskBot)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ —Å–∞–ø–ø–æ—Ä—Ç —á–∞—Ç —á–µ—Ä–µ–∑ TaskBot (–µ—Å–ª–∏ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é)
            if hasattr(self, 'task_bot') and self.task_bot:
                task_message = await self.task_bot.send_task_to_support(message_data)
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
                message_data['support_message_id'] = task_message.message_id
                await self.redis.set_task(task_id, message_data)
                logger.info(f"[USERBOT][STEP 5] –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ –≤ —Å–∞–ø–ø–æ—Ä—Ç —á–∞—Ç–µ —á–µ—Ä–µ–∑ TaskBot (—Ä—É—á–Ω–æ–π –≤—ã–∑–æ–≤)")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∑–∞–¥–∞—á—É
            await self.redis.set(f"active_task:{message_data['user_id']}:{message_data['chat_id']}", task_id, ex=settings.MESSAGE_AGGREGATION_TIMEOUT)
            
        except Exception as e:
            logger.error(f"Error creating new task: {e}")

    def _start_background_tasks(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏"""
        # –ó–∞–ø—É—Å–∫–∞–µ–º PubSub —Å–ª—É—à–∞—Ç–µ–ª—å
        asyncio.create_task(self._start_pubsub_listener())
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É
        asyncio.create_task(self._periodic_cleanup())

    async def _start_pubsub_listener(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç PubSub —Å–ª—É—à–∞—Ç–µ–ª—å —Å –Ω–æ–≤—ã–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º"""
        try:
            logger.info("Starting PubSub listener...")
            await self.pubsub_manager.start_background_listener(
                channels=["task_updates"],
                handler_func=self._pubsub_message_handler
            )
        except Exception as e:
            logger.error(f"PubSub listener error: {e}")

    async def _pubsub_message_handler(self, channel: str, message: dict):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç PubSub –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        try:
            if channel == "task_updates":
                await self._handle_task_update(message)
        except Exception as e:
            logger.error(f"Error handling PubSub message from {channel}: {e}")

    async def _handle_task_update(self, update_data: dict):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á"""
        try:
            update_type = update_data.get('type')
            task_id = update_data.get('task_id')
            
            if update_type == 'status_change':
                await self._handle_status_change(task_id, update_data)
            elif update_type == 'new_reply':
                await self._handle_new_reply(task_id, update_data)
                
        except Exception as e:
            logger.error(f"Error handling task update: {e}")

    async def _handle_status_change(self, task_id: str, update_data: dict):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏"""
        try:
            new_status = update_data.get('new_status')
            logger.info(f"[USERBOT][REACTION] Processing status change for task {task_id}: {new_status}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á—É –∏–∑ Redis
            task = await self.redis.get_task(task_id)
            logger.info(f"Received status_update event for task {task_id}")
            logger.info(f"Retrieved task {task_id} for status update")
            
            if not task:
                logger.warning(f"[USERBOT][REACTION] Task {task_id} not found in Redis")
                return
            
            user_id = int(task.get('user_id', 0))
            chat_id = int(task.get('chat_id', 0))
            message_id = int(task.get('message_id', 0))
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ä–µ–∞–∫—Ü–∏—é
            reaction_map = {
                'waiting': '‚ö°',      # –°—Ç–∞–ª–∞ –∑–∞–¥–∞—á–µ–π
                'in_progress': '‚ö°',  # –í–∑—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É (–∏–∑–º–µ–Ω–µ–Ω–æ —Å üî• –Ω–∞ ‚ö°)
                'completed': 'üëå'     # –ó–∞–≤–µ—Ä—à–µ–Ω–∞ (–∏–∑–º–µ–Ω–µ–Ω–æ —Å ‚úÖ –Ω–∞ üëå)
            }
            
            if new_status in reaction_map:
                try:
                    await self.bot.set_message_reaction(
                        chat_id=chat_id,
                        message_id=message_id,
                        reaction=[{"type": "emoji", "emoji": reaction_map[new_status]}]
                    )
                    logger.debug(f"Set reaction '{reaction_map[new_status]}' for task {task_id}")
                    logger.info(f"Set reaction {reaction_map[new_status]} for task {task_id}")
                except Exception as e:
                    logger.debug(f"Could not set status reaction: {e}")
                    
        except Exception as e:
            logger.error(f"Error handling status change: {e}")

    async def _handle_new_reply(self, task_id: str, update_data: dict):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–¥–∞—á—É"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á—É
            task = await self.redis.get_task(task_id)
            if not task:
                return
            
            user_id = int(task.get('user_id', 0))
            chat_id = int(task.get('chat_id', 0))
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞ –∏–∑ —Å–æ–±—ã—Ç–∏—è –∏–ª–∏ –∏–∑ –∑–∞–¥–∞—á–∏
            reply_text = update_data.get('reply_text') or task.get('reply', '')
            reply_author = update_data.get('reply_author') or task.get('reply_author', '')
            reply_message_id = update_data.get('reply_message_id')
            reply_chat_id = update_data.get('reply_chat_id')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ
            has_media = (
                update_data.get('has_photo', False) or 
                update_data.get('has_video', False) or 
                update_data.get('has_document', False)
            )
            
            if (reply_text or has_media) and user_id and chat_id:
                logger.info(f"Processing reply for task {task_id}, user {user_id}, has_media: {has_media}, trying to forward to user topic")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —á–∞—Ç —Ñ–æ—Ä—É–º–æ–º
                topic_id = None
                target_chat_id = chat_id  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —á–∞—Ç
                
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —á–∞—Ç —Ñ–æ—Ä—É–º–æ–º
                    chat_info = await self.bot.get_chat(target_chat_id)
                    if chat_info.is_forum:
                        # –ï—Å–ª–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —á–∞—Ç - —Ñ–æ—Ä—É–º, —Å–æ–∑–¥–∞—ë–º —Ç–µ–º—É —Ç–∞–º
                        topic_id = await self.topic_manager.get_or_create_user_topic(
                            target_chat_id,
                            user_id,
                            task.get('username'),
                            task.get('first_name')
                        )
                        logger.info(f"Got user topic {topic_id} for user {user_id} in forum chat {target_chat_id}")
                    else:
                        # –ï—Å–ª–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —á–∞—Ç –Ω–µ —Ñ–æ—Ä—É–º, –ø—Ä–æ–±—É–µ–º —Ñ–æ—Ä—É–º–Ω—ã–π —á–∞—Ç –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
                        logger.info(f"Original chat {target_chat_id} is not a forum, trying forum chat {settings.FORUM_CHAT_ID}")
                        target_chat_id = settings.FORUM_CHAT_ID
                        topic_id = await self.topic_manager.get_or_create_user_topic(
                            target_chat_id,
                            user_id,
                            task.get('username'),
                            task.get('first_name')
                        )
                        logger.info(f"Got user topic {topic_id} for user {user_id} in forum chat {target_chat_id}")
                except Exception as e:
                    logger.error(f"Failed to get/create user topic for user {user_id}: {e}")
                    topic_id = None
                    target_chat_id = None
                
                # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –æ—Ç–≤–µ—Ç –≤ —Ç–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –µ—Å—Ç—å ID —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Ç–µ–º–∞)
                forwarded_to_topic = False
                if topic_id and reply_message_id and reply_chat_id and target_chat_id:
                    try:
                        logger.info(f"Attempting to forward message {reply_message_id} from chat {reply_chat_id} to topic {topic_id} in chat {target_chat_id}")
                        await self.bot.forward_message(
                            chat_id=target_chat_id,
                            from_chat_id=reply_chat_id,
                            message_id=reply_message_id,
                            message_thread_id=topic_id
                        )
                        logger.info(f"Successfully forwarded reply message to user topic {topic_id} in chat {target_chat_id}")
                        forwarded_to_topic = True
                    except Exception as e:
                        error_msg = str(e).lower()
                        logger.warning(f"Could not forward reply to user topic {topic_id} in chat {target_chat_id}: {e}")
                        
                        # –ï—Å–ª–∏ —Ç–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–±—É–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –µ—ë
                        if "thread not found" in error_msg or "message thread not found" in error_msg:
                            logger.info(f"Topic {topic_id} not found, attempting to recreate for user {user_id}")
                            try:
                                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Ç–µ–º—É –∏–∑ –∫—ç—à–∞
                                await self.topic_manager._delete_user_topic_cache(target_chat_id, user_id)
                                
                                # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é —Ç–µ–º—É
                                new_topic_id = await self.topic_manager.get_or_create_user_topic(
                                    target_chat_id,
                                    user_id,
                                    task.get('username'),
                                    task.get('first_name')
                                )
                                
                                if new_topic_id:
                                    logger.info(f"Created new topic {new_topic_id} for user {user_id}, retrying forward")
                                    # –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å –Ω–æ–≤–æ–π —Ç–µ–º–æ–π
                                    await self.bot.forward_message(
                                        chat_id=target_chat_id,
                                        from_chat_id=reply_chat_id,
                                        message_id=reply_message_id,
                                        message_thread_id=new_topic_id
                                    )
                                    logger.info(f"Successfully forwarded reply to recreated topic {new_topic_id}")
                                    forwarded_to_topic = True
                                    topic_id = new_topic_id  # –û–±–Ω–æ–≤–ª—è–µ–º topic_id –¥–ª—è fallback
                                else:
                                    logger.error(f"Failed to recreate topic for user {user_id}")
                                    
                            except Exception as retry_e:
                                logger.error(f"Failed to recreate topic and retry forward: {retry_e}")
                        
                        elif "chat not found" in error_msg:
                            logger.error(f"Chat {target_chat_id} not found - bot may not be added to this chat or chat doesn't exist")
                        elif "bot is not a member" in error_msg:
                            logger.error(f"Bot is not a member of chat {target_chat_id}")
                        elif "not enough rights" in error_msg:
                            logger.error(f"Bot doesn't have enough rights in chat {target_chat_id}")
                        
                        # –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ forwarded_to_topic –æ—Å—Ç–∞—ë—Ç—Å—è False –¥–ª—è fallback
                elif not topic_id:
                    logger.warning(f"No user topic available for user {user_id}, skipping topic forwarding")
                elif not reply_message_id or not reply_chat_id:
                    logger.warning(f"Missing reply message data: message_id={reply_message_id}, chat_id={reply_chat_id}")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞–ø—Ä—è–º—É—é –∫–∞–∫ –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑!)
                try:
                    original_message_id = task.get('message_id')
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø—Ä—è–º–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
                    if has_media:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞ –Ω–∞–ø—Ä—è–º—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                        success = await self._send_media_reply_direct(chat_id, original_message_id, reply_text, reply_author, update_data)
                        if success:
                            logger.info(f"Sent direct media reply to user {user_id} in chat {chat_id}")
                        else:
                            # Fallback –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                            await self._send_text_reply_direct(chat_id, original_message_id, reply_text, reply_author)
                    else:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
                        await self._send_text_reply_direct(chat_id, original_message_id, reply_text, reply_author)
                        
                except Exception as e:
                    logger.error(f"Could not send direct reply to user: {e}")
                    
                # –ï—Å–ª–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∞ –≤ —Ç–µ–º—É –Ω–µ —É–¥–∞–ª–∞—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º fallback —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–º—É
                if not forwarded_to_topic and topic_id and target_chat_id:
                    try:
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞ –≤ —Ç–µ–º—É
                        success = await self._send_media_reply(target_chat_id, topic_id, reply_text, reply_author, update_data)
                        if success:
                            logger.info(f"Sent media fallback message to user topic {topic_id} in chat {target_chat_id}")
                        else:
                            # Fallback –Ω–∞ –æ–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                            await self.bot.send_message(
                                chat_id=target_chat_id,
                                message_thread_id=topic_id,
                                text=f"üí¨ <b>–û—Ç–≤–µ—Ç –æ—Ç @{reply_author}:</b>\n\n{reply_text}",
                                parse_mode="HTML"
                            )
                            logger.info(f"Sent text fallback message to user topic {topic_id} in chat {target_chat_id}")
                    except Exception as e:
                        logger.error(f"Failed to send fallback message to user topic: {e}")
                    
                logger.info(f"Sent reply for task {task_id} to user {user_id}")
                
        except Exception as e:
            logger.error(f"Error handling new reply: {e}")
    async def _periodic_cleanup(self):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        while True:
            try:
                await asyncio.sleep(3600)  # –ö–∞–∂–¥—ã–π —á–∞—Å
                
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã —Å —Ç–µ–º–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                pattern = "user_topic:*"
                keys = []
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º scan –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–µ–π
                cursor = 0
                while True:
                    cursor, batch = await self.redis_manager.conn.scan(cursor, match=pattern, count=100)
                    keys.extend(batch)
                    if cursor == 0:
                        break
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ chat_id –∏–∑ –∫–ª—é—á–µ–π
                chat_ids = set()
                for key in keys:
                    if isinstance(key, bytes):
                        key = key.decode('utf-8')
                    # –§–æ—Ä–º–∞—Ç –∫–ª—é—á–∞: user_topic:chat_id:user_id
                    parts = key.split(':')
                    if len(parts) >= 3:
                        try:
                            chat_id = int(parts[1])
                            chat_ids.add(chat_id)
                        except ValueError:
                            continue
                
                # –û—á–∏—â–∞–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–µ–º—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞
                for chat_id in chat_ids:
                    try:
                        await self.topic_manager.cleanup_inactive_topics(chat_id)
                        logger.info(f"Cleaned up topics for chat {chat_id}")
                    except Exception as e:
                        logger.error(f"Error cleaning up topics for chat {chat_id}: {e}")
                
                logger.info(f"Completed periodic cleanup for {len(chat_ids)} chats")
                
            except Exception as e:
                logger.error(f"Error in periodic cleanup: {e}")



    async def start_polling(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling —Å –ø–æ–ª–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π"""
        try:
            logger.info("[USERBOT][STEP 0] Starting UserBot in polling mode...")
            
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Redis
            logger.info("[USERBOT][STEP 0.0] Connecting to Redis...")
            await self.redis.connect()
            logger.info("[USERBOT][STEP 0.0] Redis connection established")
            
            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∫–∞–Ω–∞–ª—ã
            logger.info("[USERBOT][STEP 0.1] Subscribing to PubSub channels...")
            await self.pubsub_manager.subscribe("health_check", self._pubsub_message_handler)
            await self.pubsub_manager.subscribe("task_updates", self._pubsub_message_handler)
            logger.info("[USERBOT][STEP 0.2] Subscriptions completed")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª—è PubSub
            logger.info("[USERBOT][STEP 0.3] Starting PubSub listener...")
            await self.pubsub_manager.start()
            logger.info("[USERBOT][STEP 0.4] PubSub listener started")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º polling
            logger.info("[USERBOT][STEP 0.5] Starting polling...")
            await self.dp.start_polling(self.bot)
            
        except Exception as e:
            logger.error(f"[USERBOT][ERROR] Failed to start UserBot: {e}", exc_info=True)
        finally:
            await self.bot.session.close()

    async def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ —Å –ø–æ–ª–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π PubSub"""
        try:
            logger.info("[USERBOT][STEP 0] Starting UserBot in polling mode...")
            
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Redis
            logger.info("[USERBOT][STEP 0.0] Connecting to Redis...")
            await self.redis.connect()
            logger.info("[USERBOT][STEP 0.0] Redis connection established")
            
            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∫–∞–Ω–∞–ª—ã
            logger.info("[USERBOT][STEP 0.1] Subscribing to PubSub channels...")
            await self.pubsub_manager.subscribe("health_check", self._pubsub_message_handler)
            await self.pubsub_manager.subscribe("task_updates", self._pubsub_message_handler)
            logger.info("[USERBOT][STEP 0.2] Subscriptions completed")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª—è PubSub
            logger.info("[USERBOT][STEP 0.3] Starting PubSub listener...")
            await self.pubsub_manager.start()
            logger.info("[USERBOT][STEP 0.4] PubSub listener started")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
            self._start_background_tasks()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º polling
            logger.info("[USERBOT][STEP 0.5] Starting polling...")
            await self.dp.start_polling(self.bot)
            
        except Exception as e:
            logger.error(f"[USERBOT][ERROR] Failed to start UserBot: {e}", exc_info=True)
        finally:
            await self.bot.session.close()

# –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞
user_bot_instance = UserBot()

# –î–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –¥—Ä—É–≥–∏–º–∏ –º–æ–¥—É–ª—è–º–∏
async def get_user_bot() -> UserBot:
    return user_bot_instance

if __name__ == "__main__":
    asyncio.run(user_bot_instance.start())
