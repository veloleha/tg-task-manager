import asyncio
import json
import logging
import os
import uuid
import aiofiles
from datetime import datetime
from typing import Dict, Optional
from collections import defaultdict

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
import aiogram.exceptions

from core.redis_client import redis_client
from core.pubsub_manager import UserBotPubSubManager
from config.settings import settings
from bots.user_bot.topic_manager import TopicManager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("logs/userbot.log", encoding="utf-8"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)
# –≠—Ç–∞–ø–Ω—ã–µ –ª–æ–≥–∏ –±—É–¥—É—Ç –≤–∏–¥–Ω—ã –∏ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ, –∏ –≤ logs/userbot.log

class CreateTaskState(StatesGroup):
    waiting_for_task = State()

class MessageAggregator:
    def __init__(self, bot: Bot, redis_client: UserBotPubSubManager, timeout=60):
        self.bot = bot
        self.redis = redis_client
        self.user_messages = defaultdict(list)
        self.timeout = timeout  # 1 –º–∏–Ω—É—Ç–∞ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.lock = asyncio.Lock()
        self.processed_tasks = {}  # –•—Ä–∞–Ω–∏—Ç ID –∑–∞–¥–∞—á –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    async def add_message(self, user_id: int, message_data: dict):
        async with self.lock:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user_id in self.processed_tasks:
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–¥–∞—á–µ
                self.user_messages[user_id].append(message_data)
                # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
                await self.update_existing_task(user_id)
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ
                self.user_messages[user_id].append(message_data)
                await self.create_immediate_task(user_id)
                # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è —Å–±–æ—Ä–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                asyncio.create_task(self.flush_user(user_id))
    
    async def create_immediate_task(self, user_id: int):
        """–°–æ–∑–¥–∞–µ—Ç –∑–∞–¥–∞—á—É –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏"""
        async with self.lock:
            if user_id in self.user_messages and self.user_messages[user_id]:
                message_data = self.user_messages[user_id][0].copy()
                try:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É –≤ Redis
                    task_id = await self.redis.save_task(message_data)
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
                    self.processed_tasks[user_id] = task_id
                    
                    # –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ –æ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ
                    await self.redis.publish_event("new_tasks", {
                        "type": "new_task",
                        "task_id": task_id
                    })
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
                    await self.redis.increment_counter("unreacted")
                    
                    logger.info(f"Created immediate task {task_id} for user {message_data['user_id']}")
                    
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∞–∫—Ü–∏—é 'üëÄ' –Ω–∞ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await self.bot.set_message_reaction(
                        chat_id=message_data['chat_id'],
                        message_id=message_data['message_id'],
                        reaction=[{"type": "emoji", "emoji": "üëÄ"}]
                    )
                except Exception as e:
                    logger.error(f"Error creating immediate task: {e}")
    
    async def update_existing_task(self, user_id: int):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–¥–∞—á—É —Å –Ω–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏"""
        async with self.lock:
            if user_id in self.processed_tasks and user_id in self.user_messages:
                task_id = self.processed_tasks[user_id]
                messages = self.user_messages[user_id]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–¥–∞—á–∞ –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
                try:
                    task = await self.redis.get_task(task_id)
                    if not task or len(task) == 0 or 'user_id' not in task:
                        logger.warning(f"Task {task_id} for user {user_id} no longer exists, clearing cache")
                        # –£–¥–∞–ª—è–µ–º –∏–∑ –∫—ç—à–∞, —Ç–∞–∫ –∫–∞–∫ –∑–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞
                        if user_id in self.processed_tasks:
                            del self.processed_tasks[user_id]
                        if user_id in self.user_messages:
                            del self.user_messages[user_id]
                        return
                except Exception as check_error:
                    logger.error(f"Error checking task {task_id} existence: {check_error}")
                    return
                
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                combined_text = "\n".join(msg.get('text', '') for msg in messages if msg.get('text', ''))
                
                if combined_text:
                    try:
                        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ Redis
                        await self.redis.update_task(task_id, text=combined_text)
                        
                        # –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏
                        await self.redis.publish_event("task_updates", {
                            "type": "task_update",
                            "task_id": task_id,
                            "text": combined_text
                        })
                        
                        logger.info(f"Updated task {task_id} for user {user_id} with {len(messages)} messages")
                    except Exception as e:
                        logger.error(f"Error updating task {task_id}: {e}")
    
    async def flush_user(self, user_id: int):
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É"""
        await asyncio.sleep(self.timeout)
        async with self.lock:
            if user_id in self.user_messages:
                # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                if user_id in self.processed_tasks:
                    del self.processed_tasks[user_id]
                del self.user_messages[user_id]
                logger.info(f"Finished processing messages for user {user_id}")
    
    async def save_and_process(self, message_data: dict):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É –≤ Redis
            task_id = await self.redis.save_task(message_data)
            
            # –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ –æ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ
            await self.redis.publish_event("new_tasks", {
                "type": "new_task",
                "task_id": task_id
            })
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
            await self.redis.increment_counter("unreacted")
            
            logger.info(f"Created aggregated task {task_id} for user {message_data['user_id']}")
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∞–∫—Ü–∏—é 'üëÄ' –Ω–∞ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await self.bot.set_message_reaction(
                chat_id=message_data['chat_id'],
                message_id=message_data['message_id'],
                reaction=[{"type": "emoji", "emoji": "üëÄ"}]
            )
        except Exception as e:
            logger.error(f"Error creating aggregated task: {e}")


class UserBot:
    """
    User Bot - —Å–æ–±–∏—Ä–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Å–æ–∑–¥–∞–µ—Ç –∑–∞–¥–∞—á–∏
    
    –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
    - –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ç–µ–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    - –ê–≤—Ç–æ–æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ç–µ—á–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    - –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∞–∫—Ü–∏–π –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
    - –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    """
    
    def __init__(self):
        self.bot = Bot(token=settings.USER_BOT_TOKEN)
        self.dp = Dispatcher()
        self.redis = redis_client
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
        self.topic_manager = TopicManager(self.bot)
        self.pubsub_manager = UserBotPubSubManager()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        self.message_aggregator = MessageAggregator(bot=self.bot, redis_client=self.redis)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ (–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5 –º–∏–Ω—É—Ç)
        aggregation_timeout = getattr(settings, 'MESSAGE_AGGREGATION_TIMEOUT', 300)
        self.message_aggregator.timeout = aggregation_timeout
        
        self._setup_handlers()

    def _setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        
        @self.dp.message(Command("start"))
        async def cmd_start(message: types.Message):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
            logger.info(f"Start command from user {message.from_user.id}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "—Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É" –≤–æ –≤—Å–µ—Ö —á–∞—Ç–∞—Ö
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="üéØ –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É", 
                    callback_data="create_task"
                )]
            ])
            
            if message.chat.type == "private":
                # –í –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
                await message.answer(
                    "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–±–æ—Ä–∞ –∑–∞–¥–∞—á.\n\n"
                    "üìù –ú–æ–∂–µ—Ç–µ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è —Å–æ–∑–¥–∞–º –∏–∑ –Ω–µ–≥–æ –∑–∞–¥–∞—á—É.\n"
                    "‚ö° –ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É', —á—Ç–æ–±—ã —Å—Ä–∞–∑—É –ø–µ—Ä–µ–π—Ç–∏ –≤ —Å—Ç–∞—Ç—É—Å '–≤ –æ–∂–∏–¥–∞–Ω–∏–∏'.",
                    reply_markup=keyboard
                )
            else:
                # –í –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö —Ç–æ–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
                await message.answer(
                    "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–±–æ—Ä–∞ –∑–∞–¥–∞—á.\n\n"
                    "üìù –ú–æ–∂–µ—Ç–µ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è —Å–æ–∑–¥–∞–º –∏–∑ –Ω–µ–≥–æ –∑–∞–¥–∞—á—É.\n"
                    "‚ö° –ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É', —á—Ç–æ–±—ã —Å—Ä–∞–∑—É –ø–µ—Ä–µ–π—Ç–∏ –≤ —Å—Ç–∞—Ç—É—Å '–≤ –æ–∂–∏–¥–∞–Ω–∏–∏'.",
                    reply_markup=keyboard
                )

        @self.dp.callback_query(F.data == "create_task")
        async def handle_create_task_button(callback: types.CallbackQuery, state: FSMContext):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É'"""
            logger.info(f"Create task button pressed by user {callback.from_user.id}")
            await callback.answer()
            await callback.message.answer(
                "üìù –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å:"
            )
            await state.set_state(CreateTaskState.waiting_for_task)

        @self.dp.message(CreateTaskState.waiting_for_task)
        async def handle_task_text(message: types.Message, state: FSMContext):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ –∑–∞–¥–∞—á–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è"""
            try:
                logger.info(f"Received task text from user {message.from_user.id}: {message.text[:100] if message.text else 'No text'}...")
                
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                message_data = await self._prepare_message_data(message)
                
                # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –Ω–∞–ø—Ä—è–º—É—é —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'waiting' (–º–∏–Ω—É—è 'unreacted')
                task_id = await self._create_task_directly(message_data, status='waiting')
                
                # –£–±–∏—Ä–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å —á–∞—Ç
                # await message.answer(
                #     "‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ –∏ —Å—Ä–∞–∑—É –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –≤ —Å—Ç–∞—Ç—É—Å '–í –æ–∂–∏–¥–∞–Ω–∏–∏'!\n"
                #     f"üÜî ID –∑–∞–¥–∞—á–∏: {task_id}"
                # )
                
                # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                await state.clear()
                
                logger.info(f"‚úÖ Fast task created: {task_id} with status 'waiting'")
                
            except Exception as e:
                logger.error(f"Error creating fast task: {e}", exc_info=True)
                await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                await state.clear()

        @self.dp.message()
        async def handle_message(message: types.Message):
            """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π"""
            try:
                # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–æ–≤
                if message.from_user.is_bot:
                    return
                
                # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
                if message.text and message.text.startswith('/'):
                    return
                
                # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —á–∞—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ (—Ñ–æ—Ä—É–º–Ω–æ–≥–æ —á–∞—Ç–∞)
                if message.chat.id == settings.FORUM_CHAT_ID:
                    logger.info(f"[USERBOT][MSG] Ignoring message from support chat {message.chat.id}")
                    return
                
                logger.info(f"[USERBOT][MSG] Processing message from user {message.from_user.id} in chat {message.chat.id}")
                logger.info(f"[USERBOT][MSG] Message text: {message.text[:100] if message.text else 'No text'}...")
                
                user_id = message.from_user.id
                chat_id = message.chat.id
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–∏—à–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–≤–æ–µ–π —Ç–µ–º–µ (–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∫ False)
                user_in_own_topic = False
                
                # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é —Ç–µ–º—É –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ (–µ—Å–ª–∏ —ç—Ç–æ —Ñ–æ—Ä—É–º)
                logger.info(f"[USERBOT][MSG] Getting or creating user topic for user {user_id} in chat {chat_id}...")
                user_topic_id = await self.topic_manager.get_or_create_user_topic(
                    chat_id=chat_id,
                    user_id=user_id,
                    username=message.from_user.username,
                    first_name=message.from_user.first_name
                )
                
                if user_topic_id:
                    logger.info(f"[USERBOT][MSG] User topic ID: {user_topic_id}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–∏—à–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ —Å–≤–æ–µ–π —Ç–µ–º–µ
                    current_thread_id = getattr(message, 'message_thread_id', None)
                    user_in_own_topic = current_thread_id and current_thread_id == user_topic_id
                    if user_in_own_topic:
                        logger.info(f"[USERBOT][MSG] User is already writing in their own topic {user_topic_id}, will process as additional message")
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ç–µ–º—ã
                    await self.topic_manager.update_topic_activity(chat_id, user_id)
                else:
                    logger.info(f"[USERBOT][MSG] Chat {chat_id} is not a forum or topic creation failed")
                
                # –≠–¢–ê–ü 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–¥–∞—á–∞
                logger.info(f"[USERBOT][GROUPING] === –≠–¢–ê–ü 1: –ü–æ–∏—Å–∫ –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–∏ ===")
                active_task_id = await self._find_user_active_task(user_id)
                
                if active_task_id:
                    logger.info(f"[USERBOT][GROUPING] ‚úÖ –≠–¢–ê–ü 1 –†–ï–ó–£–õ–¨–¢–ê–¢: –ù–∞–π–¥–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ {active_task_id}")
                    # –≠–¢–ê–ü 3: –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–¥–∞—á–µ
                    append_success = await self._append_to_existing_task(active_task_id, message)
                    if append_success:
                        logger.info(f"[USERBOT][GROUPING] ‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫ –∑–∞–¥–∞—á–µ {active_task_id}")
                        return  # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É - —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–¥–∞—á–µ
                    else:
                        logger.warning(f"[USERBOT][GROUPING] ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫ –∑–∞–¥–∞—á–µ {active_task_id}, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é")
                else:
                    logger.info(f"[USERBOT][GROUPING] ‚úÖ –≠–¢–ê–ü 1 –†–ï–ó–£–õ–¨–¢–ê–¢: –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                    logger.info(f"[USERBOT][GROUPING] === –≠–¢–ê–ü 2: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ ===")
                
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                logger.info(f"[USERBOT][MSG] Preparing message data...")
                message_data = await self._prepare_message_data(message)
                logger.info(f"[USERBOT][MSG] Message data prepared: {len(message_data)} fields")
                logger.info(f"[USERBOT][MSG] support_media_message_id in message_data: {message_data.get('support_media_message_id')}")
                
                # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –Ω–∞–ø—Ä—è–º—É—é (–±–µ–∑ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞)
                logger.info(f"[USERBOT][MSG] Creating task directly...")
                task_id = await self._create_task_directly(message_data)
                logger.info(f"[USERBOT][MSG] ‚úÖ Task created directly: {task_id}")
                
                # –ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –æ–Ω –Ω–µ –≤ —Å–≤–æ–µ–π —Ç–µ–º–µ)
                if user_topic_id and task_id and not user_in_own_topic:
                    try:
                        # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        forwarded_msg = await message.forward(chat_id, message_thread_id=user_topic_id)
                        logger.info(f"[USERBOT][MSG] ‚úÖ –ü–µ—Ä–µ—Å–ª–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {message.message_id} –≤ —Ç–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_topic_id} (forwarded as {forwarded_msg.message_id})")
                    except Exception as forward_error:
                        logger.error(f"[USERBOT][MSG] ‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–µ–º—É: {forward_error}")
                elif user_in_own_topic:
                    logger.info(f"[USERBOT][MSG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–∏—à–µ—Ç –≤ —Å–≤–æ–µ–π —Ç–µ–º–µ {user_topic_id}, –ø–µ—Ä–µ—Å—ã–ª–∫–∞ –Ω–µ –Ω—É–∂–Ω–∞")
                
                # –î–æ–±–∞–≤–ª—è–µ–º reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É "–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É" –≤–æ –≤—Å–µ—Ö —á–∞—Ç–∞—Ö
                reply_keyboard = types.ReplyKeyboardMarkup(
                    keyboard=[
                        [types.KeyboardButton(text="üéØ –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É")]
                    ],
                    resize_keyboard=True
                )
                
                # –£–±–∏—Ä–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å —á–∞—Ç
                # await message.answer("‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞!", reply_markup=reply_keyboard)
                
            except Exception as e:
                logger.error(f"Error handling message: {e}", exc_info=True)
                try:
                    await self._set_error_reaction(message)
                except:
                    pass
    
    async def _forward_to_user_topic(self, message: types.Message, topic_id: int, chat_id: int):
        """–ü–µ—Ä–µ—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é —Ç–µ–º—É"""
        try:
            # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é —Ç–µ–º—É
            await self.bot.forward_message(
                chat_id=chat_id,
                from_chat_id=chat_id,
                message_id=message.message_id,
                message_thread_id=topic_id
            )
            
            logger.info(f"[USERBOT] Forwarded message to user topic {topic_id} in chat {chat_id}")
            
        except Exception as e:
            error_msg = str(e).lower()
            if "message thread not found" in error_msg:
                logger.warning(f"[USERBOT] Topic {topic_id} not found, creating new topic for user {message.from_user.id} in chat {chat_id}")
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Ç–µ–º—É –∏–∑ Redis
                await self.topic_manager.redis.conn.delete(f"user_topic:{chat_id}:{message.from_user.id}")
                await self.topic_manager.redis.conn.delete(f"topic_user:{chat_id}:{topic_id}")
                
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç–µ–º—É
                new_topic_id = await self.topic_manager._create_user_topic(
                    chat_id=chat_id,
                    user_id=message.from_user.id,
                    username=message.from_user.username,
                    first_name=message.from_user.first_name
                )
                
                if new_topic_id:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—É—é —Ç–µ–º—É
                    await self.topic_manager._save_user_topic(chat_id, message.from_user.id, new_topic_id)
                    
                    try:
                        await self.bot.forward_message(
                            chat_id=chat_id,
                            from_chat_id=chat_id,
                            message_id=message.message_id,
                            message_thread_id=new_topic_id
                        )
                        logger.info(f"[USERBOT] Forwarded message to new user topic {new_topic_id} in chat {chat_id}")
                    except Exception as retry_error:
                        logger.error(f"[USERBOT] Error forwarding to new user topic: {retry_error}")
                else:
                    logger.error(f"[USERBOT] Failed to create new topic for user {message.from_user.id} in chat {chat_id}")
            else:
                logger.error(f"[USERBOT] Error forwarding to user topic: {e}")

    async def _forward_reply_to_user_topic(self, sent_message, user_id: int, chat_id: int, original_message_id: int):
        """–ü–µ—Ä–µ—Å—ã–ª–∞–µ—Ç –æ—Ç–≤–µ—Ç UserBot –≤ —Ç–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø–µ—Ä–µ–ø–∏—Å–∫–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_topic_id = await self.topic_manager._get_active_user_topic(chat_id, user_id)
            
            if user_topic_id:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –æ—Ç–≤–µ—Ç —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —Ç–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                # –ï—Å–ª–∏ sent_message —É–∂–µ –∏–º–µ–µ—Ç message_thread_id —Ä–∞–≤–Ω—ã–π user_topic_id, —Ç–æ –Ω–µ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º
                if hasattr(sent_message, 'message_thread_id') and sent_message.message_thread_id == user_topic_id:
                    logger.info(f"[USERBOT][FORWARD] Reply already sent to user topic {user_topic_id}, skipping forwarding")
                    return
                
                # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –æ—Ç–≤–µ—Ç –≤ —Ç–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–µ –≤ —Ç–µ–º—É
                await self.bot.forward_message(
                    chat_id=chat_id,
                    from_chat_id=chat_id,
                    message_id=sent_message.message_id,
                    message_thread_id=user_topic_id
                )
                logger.info(f"[USERBOT][FORWARD] Reply forwarded to user topic {user_topic_id} for user {user_id}")
            else:
                logger.warning(f"[USERBOT][FORWARD] No user topic found for user {user_id} in chat {chat_id}")
                
        except Exception as e:
            error_msg = str(e).lower()
            if "message thread not found" in error_msg:
                logger.warning(f"[USERBOT][FORWARD] User topic not found, will skip forwarding reply")
            else:
                logger.error(f"[USERBOT][FORWARD] Error forwarding reply to user topic: {e}")

    async def _create_task_directly(self, message_data: dict, status: str = "unreacted") -> str:
        """–°–æ–∑–¥–∞–µ—Ç –∑–∞–¥–∞—á—É –Ω–∞–ø—Ä—è–º—É—é –±–µ–∑ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞"""
        try:
            logger.info(f"[USERBOT][DIRECT] Starting direct task creation...")
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
            task_data = {
                "message_id": message_data["message_id"],
                "chat_id": message_data["chat_id"],
                "chat_title": message_data["chat_title"],
                "chat_type": message_data["chat_type"],
                "user_id": message_data["user_id"],
                "first_name": message_data["first_name"],
                "last_name": message_data["last_name"],
                "username": message_data["username"],
                "language_code": message_data["language_code"],
                "is_bot": message_data["is_bot"],
                "text": message_data["text"],
                "status": status,
                "task_number": None,
                "assignee": None,
                "task_link": None,
                "reply": None,
                "created_at": message_data["created_at"],
                "updated_at": message_data["updated_at"],
                "aggregated": False,  # –ù–µ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞
                "message_count": 1,
                # –ù–û–í–û–ï –ü–û–õ–ï: –∏—Å—Ç–æ—á–Ω–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –ª–æ–≥–∏–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤
                "message_source": message_data.get("message_source", "main_menu"),
                # –ú–µ–¥–∏–∞—Ñ–∞–π–ª—ã - –≤–∫–ª—é—á–∞–µ–º –í–°–ï –ø–æ–ª—è, –≤–∫–ª—é—á–∞—è –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
                "has_photo": message_data.get("has_photo", False),
                "has_video": message_data.get("has_video", False),
                "has_document": message_data.get("has_document", False),
                "photo_file_ids": message_data.get("photo_file_ids", []),
                "photo_file_paths": message_data.get("photo_file_paths", []),  # –í–ê–ñ–ù–û: –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º —Ñ–æ—Ç–æ
                "video_file_id": message_data.get("video_file_id"),
                "video_file_path": message_data.get("video_file_path"),  # –í–ê–ñ–ù–û: –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤–∏–¥–µ–æ
                "document_file_id": message_data.get("document_file_id"),
                "document_file_path": message_data.get("document_file_path"),  # –í–ê–ñ–ù–û: –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–æ–∫—É–º–µ–Ω—Ç–∞
                "media_group_id": message_data.get("media_group_id"),
                "support_media_message_id": message_data.get("support_media_message_id")
            }
            logger.info(f"[USERBOT][DIRECT] Task data prepared with {len(task_data)} fields")
            logger.info(f"[USERBOT][DIRECT] support_media_message_id in task_data: {task_data.get('support_media_message_id')}")
            
            # Debug: –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º –≤–∫–ª—é—á–µ–Ω—ã –≤ task_data
            if task_data.get("has_photo"):
                logger.info(f"üìã [DIRECT] Photo file paths in task_data: {task_data.get('photo_file_paths')}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É –≤ Redis
            logger.info(f"[USERBOT][DIRECT] Saving task to Redis...")
            task_id = await self.redis.save_task(task_data)
            logger.info(f"[USERBOT][DIRECT] Task saved with ID: {task_id}")
            
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            await asyncio.sleep(0.1)
            
            # –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ –æ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ
            logger.info(f"[USERBOT][DIRECT] Publishing task event...")
            await self._publish_task_event(task_id, task_data)
            logger.info(f"[USERBOT][DIRECT] Task event published")
            
            logger.info(f"[USERBOT][DIRECT] ‚úÖ Task created successfully: {task_id}")
            return task_id
            
        except Exception as e:
            logger.error(f"[USERBOT][DIRECT] ‚ùå Error creating task directly: {e}", exc_info=True)
            return None
    
    async def _publish_task_event(self, task_id: str, task_data: dict):
        """–ü—É–±–ª–∏–∫—É–µ—Ç —Å–æ–±—ã—Ç–∏–µ –æ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ"""
        try:
            logger.info(f"[PUBSUB][PUBLISH] Starting task event publication for task: {task_id}")
            await self.redis._ensure_connection()
            logger.info(f"[PUBSUB][PUBLISH] Redis connection ensured")
            
            event_data = {
                'task_id': task_id,
                'type': 'new_task',
                'user_id': int(task_data.get('user_id', 0)),
                'username': task_data.get('username', ''),
                'text': task_data.get('text', '')
            }
            logger.info(f"[PUBSUB][PUBLISH] Event data prepared: {event_data}")
            
            event_json = json.dumps(event_data)
            logger.info(f"[PUBSUB][PUBLISH] Event serialized to JSON: {len(event_json)} chars")
            
            result = await self.redis.conn.publish('new_tasks', event_json)
            logger.info(f"[PUBSUB][PUBLISH] ‚úÖ Published to 'new_tasks' channel, subscribers notified: {result}")
            logger.info(f"[USERBOT][STEP 2] Published event to new_tasks: {event_data}")
        except Exception as e:
            logger.error(f"[PUBSUB][PUBLISH] ‚ùå Error publishing task event: {e}", exc_info=True)

    async def _prepare_message_data(self, message: types.Message) -> dict:
        """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"""
        # –°–∫–∞—á–∏–≤–∞–µ–º –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã (–µ—Å–ª–∏ –µ—Å—Ç—å) –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç–∏ –∫ –Ω–∏–º
        media_data = await self._extract_media_data(message)
        
        # Debug: –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–µ–¥–∏–∞ –¥–∞–Ω–Ω—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
        if media_data.get("has_photo"):
            logger.info(f"üîç Media data for photo: photo_file_paths={media_data.get('photo_file_paths')}, photo_file_ids={media_data.get('photo_file_ids')}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è: –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–ª–∏ —Ç–µ–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        # –ï—Å–ª–∏ –µ—Å—Ç—å message_thread_id - —ç—Ç–æ —Ç–µ–º–∞, –∏–Ω–∞—á–µ - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        if (hasattr(message, 'message_thread_id') and message.message_thread_id):
            message_source = "user_topic"
            logger.info(f"[USERBOT][SOURCE] Message from user topic {message.message_thread_id} in chat {message.chat.id}")
        else:
            message_source = "main_menu"
            logger.info(f"[USERBOT][SOURCE] Message from main menu (chat {message.chat.id})")
        
        task_data = {
            "message_id": message.message_id,
            "chat_id": message.chat.id,
            "chat_title": getattr(message.chat, 'title', 'Private Chat'),
            "chat_type": message.chat.type,
            "user_id": message.from_user.id,
            "first_name": message.from_user.first_name,
            "last_name": message.from_user.last_name,
            "username": message.from_user.username,
            "language_code": message.from_user.language_code,
            "is_bot": message.from_user.is_bot,
            "text": message.text or message.caption or "",
            "status": "unreacted",
            "task_number": None,
            "assignee": None,
            "task_link": None,
            "reply": None,
            "created_at": datetime.now().isoformat(),
            "updated_at": datetime.now().isoformat(),
            "aggregated": False,
            "message_count": 1,
            # –ù–û–í–û–ï –ü–û–õ–ï: –∏—Å—Ç–æ—á–Ω–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è
            "message_source": message_source,
            # –ú–µ–¥–∏–∞—Ñ–∞–π–ª—ã
            "has_photo": media_data["has_photo"],
            "has_video": media_data["has_video"],
            "has_document": media_data["has_document"],
            "photo_file_ids": media_data["photo_file_ids"],
            "photo_file_paths": media_data.get("photo_file_paths", []),
            "video_file_id": media_data["video_file_id"],
            "video_file_path": media_data.get("video_file_path"),
            "document_file_id": media_data["document_file_id"],
            "document_file_path": media_data.get("document_file_path"),
            "media_group_id": media_data.get("media_group_id")
        }
        
        # Debug: –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ task_data —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
        if task_data.get("has_photo"):
            logger.info(f"üìã Task data for photo: photo_file_paths={task_data.get('photo_file_paths')}, photo_file_ids={task_data.get('photo_file_ids')}")
        
        return task_data

    async def _find_user_active_task(self, user_id: int) -> Optional[str]:
        """–ò—â–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é –∑–∞–¥–∞—á—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å—Ç–∞—Ç—É—Å—ã: unreacted, waiting, in_progress)"""
        try:
            logger.info(f"[USERBOT][GROUPING] Searching for active task for user {user_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_tasks = await self.redis.get_user_tasks(user_id)
            logger.info(f"[USERBOT][GROUPING] Found {len(user_tasks)} total tasks for user {user_id}")
            
            # –ò—â–µ–º –∑–∞–¥–∞—á–∏ –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–∞—Ö
            active_statuses = ['unreacted', 'waiting', 'in_progress']
            active_tasks = []
            
            for task in user_tasks:
                task_id = task.get('task_id')
                status = task.get('status', 'unreacted')
                logger.info(f"[USERBOT][GROUPING] Task {task_id}: status={status}")
                
                if status in active_statuses:
                    # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ –∑–∞–¥–∞—á–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ Redis
                    try:
                        actual_task = await self.redis.get_task(task_id)
                        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: get_task –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç {} –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–¥–∞—á, –∞ –Ω–µ None
                        task_exists = actual_task and len(actual_task) > 0 and 'user_id' in actual_task and 'status' in actual_task
                        
                        if task_exists and actual_task.get('status') in active_statuses:
                            # –î–≤–æ–π–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ - –∏ –≤ —Å–ø–∏—Å–∫–µ, –∏ –≤ —Å–∞–º–æ–π –∑–∞–¥–∞—á–µ
                            active_tasks.append(task)
                            logger.info(f"[USERBOT][GROUPING] Task {task_id} is active (status: {status}) and exists in Redis")
                        else:
                            if not task_exists:
                                logger.warning(f"[USERBOT][GROUPING] Task {task_id} appears active but doesn't exist in Redis - DELETED TASK, skipping")
                            else:
                                logger.warning(f"[USERBOT][GROUPING] Task {task_id} status mismatch: list={status}, actual={actual_task.get('status')} - skipping")
                    except Exception as task_check_error:
                        logger.error(f"[USERBOT][GROUPING] Error checking task {task_id} existence: {task_check_error}")
            
            if not active_tasks:
                logger.info(f"[USERBOT][GROUPING] No active tasks found for user {user_id}")
                return None
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á, –±–µ—Ä–µ–º —Å–∞–º—É—é –Ω–æ–≤—É—é (–ø–æ created_at)
            if len(active_tasks) > 1:
                logger.info(f"[USERBOT][GROUPING] Found {len(active_tasks)} active tasks, selecting newest")
                active_tasks.sort(key=lambda x: x.get('created_at', ''), reverse=True)
            
            selected_task = active_tasks[0]
            task_id = selected_task.get('task_id')
            logger.info(f"[USERBOT][GROUPING] Selected active task: {task_id} (status: {selected_task.get('status')})")
            
            # –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: —É–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∑–∞–¥–∞—á–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∞–∫—Ç–∏–≤–Ω–∞
            final_task_check = await self.redis.get_task(task_id)
            final_task_exists = final_task_check and len(final_task_check) > 0 and 'user_id' in final_task_check and 'status' in final_task_check
            if not final_task_exists or final_task_check.get('status') not in active_statuses:
                logger.warning(f"[USERBOT][GROUPING] Final check failed for task {task_id} - task may have been deleted during processing")
                return None
            
            return task_id
            
        except Exception as e:
            logger.error(f"[USERBOT][GROUPING] Error finding active task for user {user_id}: {e}")
            return None
    
    async def _append_to_existing_task(self, task_id: str, message: types.Message) -> bool:
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–¥–∞—á–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç reply –≤ —á–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
        try:
            logger.info(f"[USERBOT][GROUPING] === –≠–¢–ê–ü 3: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫ –∑–∞–¥–∞—á–µ {task_id} ===")
            
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á—É –∏–∑ Redis
            task = await self.redis.get_task(task_id)
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: get_task –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç {} –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–¥–∞—á, –∞ –Ω–µ None
            if not task or len(task) == 0 or 'user_id' not in task:
                logger.error(f"[USERBOT][GROUPING] –ó–∞–¥–∞—á–∞ {task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ Redis –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∞")
                return False
            
            logger.info(f"[USERBOT][GROUPING] –ó–∞–¥–∞—á–∞ {task_id} –Ω–∞–π–¥–µ–Ω–∞, —Å—Ç–∞—Ç—É—Å: {task.get('status')}")
            
            # –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: —É–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∑–∞–¥–∞—á–∞ –≤—Å–µ –µ—â–µ –∞–∫—Ç–∏–≤–Ω–∞
            active_statuses = ['unreacted', 'waiting', 'in_progress']
            if task.get('status') not in active_statuses:
                logger.warning(f"[USERBOT][GROUPING] –ó–∞–¥–∞—á–∞ {task_id} –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞ (—Å—Ç–∞—Ç—É—Å: {task.get('status')}), –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ")
                return False
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            new_message_text = message.text or message.caption or ""
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ–¥–∏–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            media_data = await self._extract_media_data(message)
            has_media = media_data.get('has_photo') or media_data.get('has_video') or media_data.get('has_document')
            
            # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ —Ç–µ–∫—Å—Ç–∞, –Ω–∏ –º–µ–¥–∏–∞ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            if not new_message_text and not has_media:
                logger.warning(f"[USERBOT][GROUPING] –ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –º–µ–¥–∏–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                return False
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏
            current_text = task.get('text', '')
            if new_message_text:
                updated_text = f"{current_text}\n\n--- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ---\n{new_message_text}"
            else:
                updated_text = current_text  # –¢–æ–ª—å–∫–æ –º–µ–¥–∏–∞ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
            current_count = int(task.get('message_count', 1))
            new_count = current_count + 1
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –º–µ–¥–∏–∞–¥–∞–Ω–Ω—ã–µ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏
            if has_media:
                logger.info(f"[USERBOT][GROUPING] –î–æ–±–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞ –∫ –∑–∞–¥–∞—á–µ {task_id}")
                
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ñ–æ—Ç–æ
                if media_data.get('has_photo'):
                    current_photo_ids = task.get('photo_file_ids', [])
                    current_photo_paths = task.get('photo_file_paths', [])
                    
                    new_photo_ids = media_data.get('photo_file_ids', [])
                    new_photo_paths = media_data.get('photo_file_paths', [])
                    
                    task['photo_file_ids'] = current_photo_ids + new_photo_ids
                    task['photo_file_paths'] = current_photo_paths + new_photo_paths
                    task['has_photo'] = True
                    
                    logger.info(f"[USERBOT][GROUPING] –î–æ–±–∞–≤–ª–µ–Ω–æ {len(new_photo_ids)} —Ñ–æ—Ç–æ –∫ –∑–∞–¥–∞—á–µ {task_id}")
                
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤–∏–¥–µ–æ (–∑–∞–º–µ–Ω—è–µ–º, —Ç–∞–∫ –∫–∞–∫ –æ–±—ã—á–Ω–æ –æ–¥–Ω–æ –≤–∏–¥–µ–æ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)
                if media_data.get('has_video'):
                    task['video_file_id'] = media_data.get('video_file_id')
                    task['video_file_path'] = media_data.get('video_file_path')
                    task['has_video'] = True
                    logger.info(f"[USERBOT][GROUPING] –î–æ–±–∞–≤–ª–µ–Ω–æ –≤–∏–¥–µ–æ –∫ –∑–∞–¥–∞—á–µ {task_id}")
                
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã (–∑–∞–º–µ–Ω—è–µ–º)
                if media_data.get('has_document'):
                    task['document_file_id'] = media_data.get('document_file_id')
                    task['document_file_path'] = media_data.get('document_file_path')
                    task['has_document'] = True
                    logger.info(f"[USERBOT][GROUPING] –î–æ–±–∞–≤–ª–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç –∫ –∑–∞–¥–∞—á–µ {task_id}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ Redis
            task['text'] = updated_text
            task['message_count'] = new_count
            task['updated_at'] = datetime.now().isoformat()
            
            await self.redis.update_task(task_id, **task)
            logger.info(f"[USERBOT][GROUPING] –ó–∞–¥–∞—á–∞ {task_id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {new_count} —Å–æ–æ–±—â–µ–Ω–∏–π")
            
            # –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏
            # –ü–æ–ª—É—á–∞–µ–º user_topic_id –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ reply
            user_topic_id = None
            try:
                user_topic_id = await self.topic_manager.get_or_create_user_topic(
                    user_id=message.from_user.id,
                    chat_id=message.chat.id
                )
            except Exception as topic_error:
                logger.warning(f"[USERBOT][GROUPING] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å user_topic_id: {topic_error}")
            
            event_data = {
                "type": "task_update",
                "action": "message_appended",
                "task_id": task_id,
                "updated_text": new_message_text,
                "message_count": new_count,
                "has_media": has_media,
                "user_message_id": message.message_id,  # –ö—Ä–∏—Ç–∏—á–Ω–æ –≤–∞–∂–Ω–æ –¥–ª—è reply
                "user_chat_id": message.chat.id,
                "user_topic_id": user_topic_id
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞—Ö –≤ —Å–æ–±—ã—Ç–∏–µ
            if has_media:
                event_data.update({
                    "has_photo": media_data.get('has_photo', False),
                    "has_video": media_data.get('has_video', False),
                    "has_document": media_data.get('has_document', False),
                    "photo_file_ids": media_data.get('photo_file_ids', []),
                    "photo_file_paths": media_data.get('photo_file_paths', []),
                    "video_file_id": media_data.get('video_file_id'),
                    "video_file_path": media_data.get('video_file_path'),
                    "document_file_id": media_data.get('document_file_id'),
                    "document_file_path": media_data.get('document_file_path')
                })
            
            await self.redis.publish_event("task_updates", event_data)
            logger.info(f"[USERBOT][GROUPING] –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ —Å–æ–±—ã—Ç–∏–µ message_appended –¥–ª—è –∑–∞–¥–∞—á–∏ {task_id}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é —Ç–µ–º—É, –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –∞ –Ω–µ –∑–∞–¥–∞—á–∏
            try:
                user_topic_id = await self.topic_manager.get_or_create_user_topic(
                    user_id=message.from_user.id,
                    chat_id=message.chat.id
                )
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–∏—à–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ —Å–≤–æ–µ–π —Ç–µ–º–µ
                current_thread_id = getattr(message, 'message_thread_id', None)
                user_in_own_topic = current_thread_id and current_thread_id == user_topic_id
                
                # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –Ω–µ –≤ —Å–≤–æ–µ–π —Ç–µ–º–µ
                if user_topic_id and not user_in_own_topic:
                    # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –µ–≥–æ —Ç–µ–º—É
                    forwarded_message = await self.bot.forward_message(
                        chat_id=message.chat.id,
                        from_chat_id=message.chat.id,
                        message_id=message.message_id,
                        message_thread_id=user_topic_id
                    )
                    
                    logger.info(f"[USERBOT][GROUPING] ‚úÖ –ü–µ—Ä–µ—Å–ª–∞–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {message.message_id} –≤ —Ç–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_topic_id} (forwarded as {forwarded_message.message_id})")
                elif user_in_own_topic:
                    logger.info(f"[USERBOT][GROUPING] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–∏—à–µ—Ç –≤ —Å–≤–æ–µ–π —Ç–µ–º–µ {user_topic_id}, –ø–µ—Ä–µ—Å—ã–ª–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
                    
            except Exception as topic_error:
                logger.warning(f"[USERBOT][GROUPING] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {topic_error}")
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∞–∫—Ü–∏—é –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                await self.bot.set_message_reaction(
                    chat_id=message.chat.id,
                    message_id=message.message_id,
                    reaction=[{"type": "emoji", "emoji": "üîÑ"}]  # –°–∏–º–≤–æ–ª "–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ"
                )
                logger.info(f"[USERBOT][GROUPING] –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Ä–µ–∞–∫—Ü–∏—è üîÑ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ {message.message_id}")
            except Exception as reaction_error:
                logger.warning(f"[USERBOT][GROUPING] –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é: {reaction_error}")
            
            logger.info(f"[USERBOT][GROUPING] ‚úÖ –≠–¢–ê–ü 3 –ó–ê–í–ï–†–®–ï–ù: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫ –∑–∞–¥–∞—á–µ {task_id}")
            return True
            
        except Exception as e:
            logger.error(f"[USERBOT][GROUPING] –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∫ –∑–∞–¥–∞—á–µ {task_id}: {e}")
            return False

    async def _download_media_file(self, file_id: str, file_extension: str) -> Optional[str]:
        """–°–∫–∞—á–∏–≤–∞–µ—Ç –º–µ–¥–∏–∞ —Ñ–∞–π–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ –Ω–µ–º—É"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
            file_info = await self.bot.get_file(file_id)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
            unique_filename = f"{uuid.uuid4()}.{file_extension}"
            file_path = os.path.join("temp_media", unique_filename)
            
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            os.makedirs("temp_media", exist_ok=True)
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            await self.bot.download_file(file_info.file_path, file_path)
            
            logger.info(f"Downloaded media file: {file_path} (size: {os.path.getsize(file_path)} bytes)")
            return file_path
            
        except Exception as e:
            logger.error(f"Error downloading media file {file_id}: {e}")
            return None

    async def _extract_media_data(self, message: types.Message) -> dict:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞—Ö –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Å–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª—ã"""
        media_data = {
            "has_photo": False,
            "has_video": False,
            "has_document": False,
            "photo_file_ids": [],
            "photo_file_paths": [],  # –ü—É—Ç–∏ –∫ —Å–∫–∞—á–∞–Ω–Ω—ã–º —Ñ–∞–π–ª–∞–º
            "video_file_id": None,
            "video_file_path": None,  # –ü—É—Ç—å –∫ —Å–∫–∞—á–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
            "document_file_id": None,
            "document_file_path": None,  # –ü—É—Ç—å –∫ —Å–∫–∞—á–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
            "caption": None
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ç–æ
        if message.photo:
            media_data["has_photo"] = True
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ —Ä–∞–∑–º–µ—Ä—ã —Ñ–æ—Ç–æ (Telegram –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑–º–µ—Ä–æ–≤)
            media_data["photo_file_ids"] = [p.file_id for p in message.photo]
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ (–±–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ)
            try:
                largest_photo = message.photo[-1]  # –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Ñ–æ—Ç–æ - —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ
                downloaded_path = await self._download_media_file(largest_photo.file_id, "jpg")
                if downloaded_path:
                    media_data["photo_file_paths"] = [downloaded_path]
                    logger.info(f"Downloaded photo from message {message.message_id}: {downloaded_path}")
                    logger.info(f"‚úÖ Set photo_file_paths in media_data: {media_data['photo_file_paths']}")
                else:
                    logger.warning(f"Failed to download photo from message {message.message_id}")
            except Exception as e:
                logger.error(f"Error processing photo from message {message.message_id}: {e}")
            
            logger.info(f"Found photo in message {message.message_id}, file_ids: {media_data['photo_file_ids']}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–¥–µ–æ
        if message.video:
            media_data["has_video"] = True
            media_data["video_file_id"] = message.video.file_id
            logger.info(f"Found video in message {message.message_id}, file_id: {media_data['video_file_id']}")
            try:
                downloaded_path = await self._download_media_file(message.video.file_id, "mp4")
                if downloaded_path:
                    media_data["video_file_path"] = downloaded_path
                    logger.info(f"Downloaded video from message {message.message_id}: {downloaded_path}")
                else:
                    logger.warning(f"Failed to download video from message {message.message_id}")
            except Exception as e:
                logger.error(f"Error processing video from message {message.message_id}: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã (–≤–∫–ª—é—á–∞—è –≤–∏–¥–µ–æ-–∑–∞–º–µ—Ç–∫–∏, –∞–Ω–∏–º–∞—Ü–∏–∏ –∏ —Ç.–¥.)
        if message.document:
            media_data["has_document"] = True
            media_data["document_file_id"] = message.document.file_id
            logger.info(f"Found document in message {message.message_id}, file_id: {media_data['document_file_id']}")
            try:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
                file_extension = "bin"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                if message.document.file_name:
                    file_extension = message.document.file_name.split(".")[-1] if "." in message.document.file_name else "bin"
                
                downloaded_path = await self._download_media_file(message.document.file_id, file_extension)
                if downloaded_path:
                    media_data["document_file_path"] = downloaded_path
                    logger.info(f"Downloaded document from message {message.message_id}: {downloaded_path}")
                else:
                    logger.warning(f"Failed to download document from message {message.message_id}")
            except Exception as e:
                logger.error(f"Error processing document from message {message.message_id}: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–¥–µ–æ-–∑–∞–º–µ—Ç–∫–∏
        if message.video_note:
            media_data["has_video"] = True
            media_data["video_file_id"] = message.video_note.file_id
            logger.info(f"Found video note in message {message.message_id}, file_id: {media_data['video_file_id']}")
            try:
                downloaded_path = await self._download_media_file(message.video_note.file_id, "mp4")
                if downloaded_path:
                    media_data["video_file_path"] = downloaded_path
                    logger.info(f"Downloaded video note from message {message.message_id}: {downloaded_path}")
                else:
                    logger.warning(f"Failed to download video note from message {message.message_id}")
            except Exception as e:
                logger.error(f"Error processing video note from message {message.message_id}: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏ (GIF)
        if message.animation:
            media_data["has_document"] = True
            media_data["document_file_id"] = message.animation.file_id
            logger.info(f"Found animation in message {message.message_id}, file_id: {media_data['document_file_id']}")
            try:
                downloaded_path = await self._download_media_file(message.animation.file_id, "gif")
                if downloaded_path:
                    media_data["document_file_path"] = downloaded_path
                    logger.info(f"Downloaded animation from message {message.message_id}: {downloaded_path}")
                else:
                    logger.warning(f"Failed to download animation from message {message.message_id}")
            except Exception as e:
                logger.error(f"Error processing animation from message {message.message_id}: {e}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥–ø–∏—Å—å
        if message.caption:
            media_data["caption"] = message.caption
        
        return media_data

    async def _send_media_reply(self, chat_id: int, topic_id: int, reply_text: str, reply_author: str, update_data: dict):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç —Å –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞–º–∏ –∫–∞–∫ fallback"""
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ (–±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –∞–≤—Ç–æ—Ä–∞ –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è —Å –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏)
            message_text = f"üí¨ <b>–û—Ç–≤–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:</b>\n\n{reply_text}" if reply_text else f"üí¨ <b>–û—Ç–≤–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏</b>"
            
            media_sent = False
            
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –µ—Å—Ç—å
            if update_data.get('has_photo') and update_data.get('photo_file_ids'):
                try:
                    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ photo_file_ids
                    photo_file_ids = update_data.get('photo_file_ids', [])
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å–ø–∏—Å–æ–∫, –∞ –Ω–µ —Å—Ç—Ä–æ–∫–∞
                    if isinstance(photo_file_ids, str):
                        try:
                            import json
                            photo_file_ids = json.loads(photo_file_ids)
                        except:
                            logger.warning(f"Could not parse photo_file_ids string: {photo_file_ids}")
                            raise ValueError("Invalid photo_file_ids format")
                    
                    if not photo_file_ids or not isinstance(photo_file_ids, list):
                        logger.warning(f"Invalid photo_file_ids: {photo_file_ids}")
                        raise ValueError("Invalid photo_file_ids")
                    
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π (–Ω–∞–∏–±–æ–ª—å—à–∏–π) —Ä–∞–∑–º–µ—Ä —Ñ–æ—Ç–æ
                    photo_file_id = photo_file_ids[-1]
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å file_id
                    if not photo_file_id or len(photo_file_id) < 10:
                        logger.warning(f"Invalid photo file_id in reply: {photo_file_id}")
                        raise ValueError("Invalid photo file_id")
                    
                    await self.bot.send_photo(
                        chat_id=chat_id,
                        photo=photo_file_id,
                        caption=message_text,
                        message_thread_id=topic_id,
                        parse_mode="HTML"
                    )
                    logger.info(f"Sent photo reply to topic {topic_id} in chat {chat_id}")
                    media_sent = True
                except Exception as photo_error:
                    logger.warning(f"Failed to send photo reply (file_id: {update_data.get('photo_file_ids', [])}): {photo_error}")
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å fallback –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ, –µ—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å
            elif not media_sent and update_data.get('has_video') and update_data.get('video_file_id'):
                try:
                    video_file_id = update_data['video_file_id']
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å file_id
                    if not video_file_id or len(video_file_id) < 10:
                        logger.warning(f"Invalid video file_id in reply: {video_file_id}")
                        raise ValueError("Invalid video file_id")
                    
                    await self.bot.send_video(
                        chat_id=chat_id,
                        video=video_file_id,
                        caption=message_text,
                        message_thread_id=topic_id,
                        parse_mode="HTML"
                    )
                    logger.info(f"Sent video reply to topic {topic_id} in chat {chat_id}")
                    media_sent = True
                except Exception as video_error:
                    logger.warning(f"Failed to send video reply (file_id: {update_data.get('video_file_id')}): {video_error}")
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å fallback –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç, –µ—Å–ª–∏ –º–µ–¥–∏–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å
            elif not media_sent and update_data.get('has_document') and update_data.get('document_file_id'):
                try:
                    document_file_id = update_data['document_file_id']
                    
                    # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –æ—Ç–≤–µ—Ç –≤ —Ç–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    forwarded_to_topic = False
            
                    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –ø–µ—Ä–µ—Å—ã–ª–∫–∞ –∏–∑ —Ç–µ–º—ã –º–µ–¥–∏–∞ –≤ —á–∞—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å –º–µ–¥–∏–∞)
                    reply_support_media_message_id = update_data.get('reply_support_media_message_id')
                    if topic_id and reply_support_media_message_id and chat_id:
                        try:
                            logger.info(f"Attempting to forward media reply from support media message {reply_support_media_message_id} to topic {topic_id} in chat {chat_id}")
                            await self.bot.forward_message(
                                chat_id=chat_id,
                                from_chat_id=settings.FORUM_CHAT_ID,
                                message_id=reply_support_media_message_id,
                                message_thread_id=topic_id
                            )
                            logger.info(f"Successfully forwarded media reply from support media to user topic {topic_id} in chat {chat_id}")
                            forwarded_to_topic = True
                        except Exception as e:
                            logger.warning(f"Failed to forward media reply from support media: {e}")
                            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å fallback
            
                    # Fallback: –ø–µ—Ä–µ—Å—ã–ª–∫–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏
                    elif topic_id and update_data.get('reply_message_id') and update_data.get('reply_chat_id') and chat_id and not forwarded_to_topic:
                        try:
                            logger.info(f"Fallback: attempting to forward original message {update_data.get('reply_message_id')} from chat {update_data.get('reply_chat_id')} to topic {topic_id} in chat {chat_id}")
                            await self.bot.forward_message(
                                chat_id=chat_id,
                                from_chat_id=update_data.get('reply_chat_id'),
                                message_id=update_data.get('reply_message_id'),
                                message_thread_id=topic_id
                            )
                            logger.info(f"Successfully forwarded original reply message to user topic {topic_id} in chat {chat_id}")
                            forwarded_to_topic = True
                        except Exception as e:
                            error_msg = str(e).lower()
                            logger.warning(f"Could not forward reply to user topic {topic_id} in chat {chat_id}: {e}")
                            
                            # –ï—Å–ª–∏ —Ç–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–±—É–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –µ—ë
                            if "thread not found" in error_msg or "message thread not found" in error_msg:
                                logger.info(f"Topic {topic_id} not found, attempting to recreate for user {update_data.get('user_id')}")
                                try:
                                    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Ç–µ–º—É –∏–∑ –∫—ç—à–∞
                                    await self.topic_manager._delete_user_topic_cache(chat_id, update_data.get('user_id'))
                                    
                                    # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é —Ç–µ–º—É
                                    new_topic_id = await self.topic_manager.get_or_create_user_topic(
                                        chat_id,
                                        update_data.get('user_id'),
                                        update_data.get('username'),
                                        update_data.get('first_name')
                                    )
                                    
                                    if new_topic_id:
                                        logger.info(f"Created new topic {new_topic_id} for user {update_data.get('user_id')}, retrying forward")
                                        # –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å –Ω–æ–≤–æ–π —Ç–µ–º–æ–π
                                        await self.bot.forward_message(
                                            chat_id=chat_id,
                                            from_chat_id=update_data.get('reply_chat_id'),
                                            message_id=update_data.get('reply_message_id'),
                                            message_thread_id=new_topic_id
                                        )
                                        logger.info(f"Successfully forwarded reply to recreated topic {new_topic_id}")
                                        forwarded_to_topic = True
                                        topic_id = new_topic_id  # –û–±–Ω–æ–≤–ª—è–µ–º topic_id –¥–ª—è fallback
                                    else:
                                        logger.error(f"Failed to recreate topic for user {update_data.get('user_id')}")
                                        
                                except Exception as retry_e:
                                    logger.error(f"Failed to recreate topic and retry forward: {retry_e}")
                            
                            elif "chat not found" in error_msg:
                                logger.error(f"Chat {chat_id} not found - bot may not be added to this chat or chat doesn't exist")
                            elif "bot is not a member" in error_msg:
                                logger.error(f"Bot is not a member of chat {chat_id}")
                            elif "not enough rights" in error_msg:
                                logger.error(f"Bot doesn't have enough rights in chat {chat_id}")
                            
                            # –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ forwarded_to_topic –æ—Å—Ç–∞—ë—Ç—Å—è False –¥–ª—è fallback
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å file_id
                    if not document_file_id or len(document_file_id) < 10:
                        logger.warning(f"Invalid document file_id in reply: {document_file_id}")
                        raise ValueError("Invalid document file_id")
                    
                    await self.bot.send_document(
                        chat_id=chat_id,
                        document=document_file_id,
                        caption=message_text,
                        message_thread_id=topic_id,
                        parse_mode="HTML"
                    )
                    logger.info(f"Sent document reply to topic {topic_id} in chat {chat_id}")
                    media_sent = True
                except Exception as doc_error:
                    logger.warning(f"Failed to send document reply (file_id: {update_data.get('document_file_id')}): {doc_error}")
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å fallback –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            
            # –ï—Å–ª–∏ –º–µ–¥–∏–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º fallback-—Å–æ–æ–±—â–µ–Ω–∏–µ
            if not media_sent:
                # –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ–¥–∏–∞ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Ö–æ—á–µ—Ç –≤–∏–¥–µ—Ç—å —Ç–∞–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —á–∏—Å—Ç—ã–π —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º fallback-—Å–æ–æ–±—â–µ–Ω–∏–µ
                await self.bot.send_message(
                    chat_id=chat_id,
                    text=message_text,
                    message_thread_id=topic_id,
                    parse_mode="HTML"
                )
                logger.info(f"Sent text reply (media fallback) to topic {topic_id} in chat {chat_id}")
            
            return True
                
        except Exception as e:
            logger.error(f"Failed to send media reply to topic {topic_id} in chat {chat_id}: {e}")
            return False

    async def _send_media_reply_direct(self, chat_id: int, original_message_id: int, reply_text: str, reply_author: str, update_data: dict):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–¥–∏–∞-–æ—Ç–≤–µ—Ç –Ω–∞–ø—Ä—è–º—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏—Å–ø–æ–ª—å–∑—É—è —Ñ–∞–π–ª–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É"""
        try:
            from aiogram.types import FSInputFile
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
            message_text = f"üí¨ <b>–û—Ç–≤–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:</b>\n\n{reply_text}" if reply_text else f"üí¨ <b>–û—Ç–≤–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏</b>"
            
            media_sent = False
            
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –∏–∑ —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
            if update_data.get('has_photo') and update_data.get('photo_file_paths'):
                try:
                    photo_file_paths = update_data.get('photo_file_paths', [])
                    
                    if photo_file_paths and len(photo_file_paths) > 0:
                        photo_path = photo_file_paths[0]  # –ë–µ—Ä—ë–º –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
                        if not os.path.exists(photo_path):
                            logger.warning(f"Photo file not found: {photo_path}")
                            raise FileNotFoundError(f"Photo file not found: {photo_path}")
                        
                        photo_file = FSInputFile(photo_path)
                        
                        await self.bot.send_photo(
                            chat_id=chat_id,
                            photo=photo_file,
                            caption=message_text,
                            reply_to_message_id=original_message_id if original_message_id else None,
                            parse_mode="HTML"
                        )
                        media_sent = True
                        logger.info(f"‚úÖ Sent photo reply from file: {photo_path}")
                        
                        # –ù–ï —É–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª - –æ–Ω –º–æ–∂–µ—Ç –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
                        logger.info(f"üìÅ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: {photo_path}")
                            
                except Exception as photo_error:
                    logger.warning(f"Failed to send direct photo reply from file: {photo_error}")
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å fallback –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ –∏–∑ —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å
            elif not media_sent and update_data.get('has_video') and update_data.get('video_file_path'):
                try:
                    video_path = update_data.get('video_file_path')
                    
                    if video_path and os.path.exists(video_path):
                        video_file = FSInputFile(video_path)
                        
                        await self.bot.send_video(
                            chat_id=chat_id,
                            video=video_file,
                            caption=message_text,
                            reply_to_message_id=original_message_id if original_message_id else None,
                            parse_mode="HTML"
                        )
                        media_sent = True
                        logger.info(f"‚úÖ Sent video reply from file: {video_path}")
                        
                        # –ù–ï —É–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª - –æ–Ω –º–æ–∂–µ—Ç –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
                        logger.info(f"üìÅ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: {video_path}")
                    else:
                        logger.warning(f"Video file not found: {video_path}")
                        raise FileNotFoundError(f"Video file not found: {video_path}")
                            
                except Exception as video_error:
                    logger.warning(f"Failed to send direct video reply from file: {video_error}")
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å fallback –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –∏–∑ —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –º–µ–¥–∏–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å
            elif not media_sent and update_data.get('has_document') and update_data.get('document_file_path'):
                try:
                    document_path = update_data.get('document_file_path')
                    
                    if document_path and os.path.exists(document_path):
                        document_file = FSInputFile(document_path)
                        
                        await self.bot.send_document(
                            chat_id=chat_id,
                            document=document_file,
                            caption=message_text,
                            reply_to_message_id=original_message_id if original_message_id else None,
                            parse_mode="HTML"
                        )
                        media_sent = True
                        logger.info(f"‚úÖ Sent document reply from file: {document_path}")
                        
                        # –ù–ï —É–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª - –æ–Ω –º–æ–∂–µ—Ç –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
                        logger.info(f"üìÅ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: {document_path}")
                    else:
                        logger.warning(f"Document file not found: {document_path}")
                        raise FileNotFoundError(f"Document file not found: {document_path}")
                            
                except Exception as doc_error:
                    logger.warning(f"Failed to send direct document reply from file: {doc_error}")
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å fallback –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            
            # –ï—Å–ª–∏ –º–µ–¥–∏–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º fallback-—Å–æ–æ–±—â–µ–Ω–∏–µ
            if not media_sent:
                # –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ–¥–∏–∞ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Ö–æ—á–µ—Ç –≤–∏–¥–µ—Ç—å —Ç–∞–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —á–∏—Å—Ç—ã–π —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º fallback-—Å–æ–æ–±—â–µ–Ω–∏–µ
                await self.bot.send_message(
                    chat_id=chat_id,
                    text=message_text,
                    reply_to_message_id=original_message_id if original_message_id else None,
                    parse_mode="HTML"
                )
                logger.info(f"Sent text direct reply (media fallback) to chat {chat_id}")
            
            return media_sent
                
        except Exception as e:
            logger.error(f"Failed to send direct media reply to chat {chat_id}: {e}")
            return False

    async def _send_text_reply_direct(self, chat_id: int, original_message_id: int, reply_text: str, reply_author: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –Ω–∞–ø—Ä—è–º—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            message_text = f"üí¨ <b>–û—Ç–≤–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:</b>\n\n{reply_text}"
            
            if original_message_id:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∫–∞–∫ reply –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
                await self.bot.send_message(
                    chat_id=chat_id,
                    reply_to_message_id=int(original_message_id),
                    text=message_text,
                    parse_mode="HTML"
                )
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç ID –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await self.bot.send_message(
                    chat_id=chat_id,
                    text=message_text,
                    parse_mode="HTML"
                )
            return True
                
        except Exception as e:
            logger.error(f"Failed to send direct text reply to chat {chat_id}: {e}")
            return False

    async def _send_media_reply_direct_with_id(self, chat_id: int, original_message_id: int, reply_text: str, reply_author: str, update_data: dict) -> Optional[int]:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–¥–∏–∞-–æ—Ç–≤–µ—Ç –Ω–∞–ø—Ä—è–º—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            from aiogram.types import FSInputFile
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
            message_text = f"üí¨ <b>–û—Ç–≤–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:</b>\n\n{reply_text}" if reply_text else f"üí¨ <b>–û—Ç–≤–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏</b>"
            
            sent_message = None
            
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –∏–∑ —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
            if update_data.get('has_photo') and update_data.get('photo_file_paths'):
                try:
                    photo_file_paths = update_data.get('photo_file_paths', [])
                    
                    if photo_file_paths and len(photo_file_paths) > 0:
                        photo_path = photo_file_paths[0]  # –ë–µ—Ä—ë–º –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
                        if not os.path.exists(photo_path):
                            logger.warning(f"Photo file not found: {photo_path}")
                            raise FileNotFoundError(f"Photo file not found: {photo_path}")
                        
                        photo_file = FSInputFile(photo_path)
                        
                        sent_message = await self.bot.send_photo(
                            chat_id=chat_id,
                            photo=photo_file,
                            caption=message_text,
                            reply_to_message_id=original_message_id if original_message_id else None,
                            parse_mode="HTML"
                        )
                        logger.info(f"‚úÖ Sent photo reply from file: {photo_path}")
                        logger.info(f"üìÅ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: {photo_path}")
                        return sent_message.message_id
                            
                except Exception as photo_error:
                    logger.warning(f"Failed to send direct photo reply from file: {photo_error}")
            
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ –∏–∑ —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å
            if not sent_message and update_data.get('has_video') and update_data.get('video_file_path'):
                try:
                    video_path = update_data.get('video_file_path')
                    
                    if video_path and os.path.exists(video_path):
                        video_file = FSInputFile(video_path)
                        
                        sent_message = await self.bot.send_video(
                            chat_id=chat_id,
                            video=video_file,
                            caption=message_text,
                            reply_to_message_id=original_message_id if original_message_id else None,
                            parse_mode="HTML"
                        )
                        logger.info(f"‚úÖ Sent video reply from file: {video_path}")
                        logger.info(f"üìÅ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: {video_path}")
                        return sent_message.message_id
                    else:
                        logger.warning(f"Video file not found: {video_path}")
                        raise FileNotFoundError(f"Video file not found: {video_path}")
                            
                except Exception as video_error:
                    logger.warning(f"Failed to send direct video reply from file: {video_error}")
            
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –∏–∑ —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –º–µ–¥–∏–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å
            if not sent_message and update_data.get('has_document') and update_data.get('document_file_path'):
                try:
                    document_path = update_data.get('document_file_path')
                    
                    if document_path and os.path.exists(document_path):
                        document_file = FSInputFile(document_path)
                        
                        sent_message = await self.bot.send_document(
                            chat_id=chat_id,
                            document=document_file,
                            caption=message_text,
                            reply_to_message_id=original_message_id if original_message_id else None,
                            parse_mode="HTML"
                        )
                        logger.info(f"‚úÖ Sent document reply from file: {document_path}")
                        logger.info(f"üìÅ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: {document_path}")
                        return sent_message.message_id
                    else:
                        logger.warning(f"Document file not found: {document_path}")
                        raise FileNotFoundError(f"Document file not found: {document_path}")
                            
                except Exception as document_error:
                    logger.warning(f"Failed to send direct document reply from file: {document_error}")
            
            # –ï—Å–ª–∏ –º–µ–¥–∏–∞ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None
            return None
                
        except Exception as e:
            logger.error(f"Failed to send direct media reply to chat {chat_id}: {e}")
            return None

    async def _send_text_reply_direct_with_id(self, chat_id: int, original_message_id: int, reply_text: str, reply_author: str) -> Optional[int]:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –Ω–∞–ø—Ä—è–º—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            message_text = f"üí¨ <b>–û—Ç–≤–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:</b>\n\n{reply_text}"
            
            if original_message_id:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∫–∞–∫ reply –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
                sent_message = await self.bot.send_message(
                    chat_id=chat_id,
                    reply_to_message_id=int(original_message_id),
                    text=message_text,
                    parse_mode="HTML"
                )
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç ID –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                sent_message = await self.bot.send_message(
                    chat_id=chat_id,
                    text=message_text,
                    parse_mode="HTML"
                )
            return sent_message.message_id
                
        except Exception as e:
            logger.error(f"Failed to send direct text reply to chat {chat_id}: {e}")
            return None

    async def _send_media_to_support_topic(self, message: types.Message) -> Optional[int]:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–¥–∏–∞ –≤ —Ç–µ–º—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ send_photo/video/document"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Ç–µ–º—É –¥–ª—è –º–µ–¥–∏–∞
            media_topic_id = await self._get_or_create_media_topic()
            if not media_topic_id:
                logger.error("Failed to get or create media topic")
                return None
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞ –Ω–∞–ø—Ä—è–º—É—é, –∫–∞–∫ –≤ demo.txt
            sent_message = None
            
            if message.photo:
                # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
                photo = message.photo[-1]
                sent_message = await self.bot.send_photo(
                    chat_id=settings.FORUM_CHAT_ID,
                    message_thread_id=media_topic_id,
                    photo=photo.file_id,
                    caption=message.caption or f"–ú–µ–¥–∏–∞ –æ—Ç @{message.from_user.username or message.from_user.first_name}"
                )
                logger.info(f"Sent photo to media topic {media_topic_id} as {sent_message.message_id}")
                
            elif message.video:
                sent_message = await self.bot.send_video(
                    chat_id=settings.FORUM_CHAT_ID,
                    message_thread_id=media_topic_id,
                    video=message.video.file_id,
                    caption=message.caption or f"–ú–µ–¥–∏–∞ –æ—Ç @{message.from_user.username or message.from_user.first_name}"
                )
                logger.info(f"Sent video to media topic {media_topic_id} as {sent_message.message_id}")
                
            elif message.document:
                sent_message = await self.bot.send_document(
                    chat_id=settings.FORUM_CHAT_ID,
                    message_thread_id=media_topic_id,
                    document=message.document.file_id,
                    caption=message.caption or f"–ú–µ–¥–∏–∞ –æ—Ç @{message.from_user.username or message.from_user.first_name}"
                )
                logger.info(f"Sent document to media topic {media_topic_id} as {sent_message.message_id}")
                
            elif message.video_note:
                sent_message = await self.bot.send_video_note(
                    chat_id=settings.FORUM_CHAT_ID,
                    message_thread_id=media_topic_id,
                    video_note=message.video_note.file_id
                )
                logger.info(f"Sent video note to media topic {media_topic_id} as {sent_message.message_id}")
                
            elif message.animation:
                sent_message = await self.bot.send_animation(
                    chat_id=settings.FORUM_CHAT_ID,
                    message_thread_id=media_topic_id,
                    animation=message.animation.file_id,
                    caption=message.caption or f"–ú–µ–¥–∏–∞ –æ—Ç @{message.from_user.username or message.from_user.first_name}"
                )
                logger.info(f"Sent animation to media topic {media_topic_id} as {sent_message.message_id}")
            
            if sent_message:
                return sent_message.message_id
            else:
                logger.warning("No media found in message to send")
                return None
            
        except Exception as e:
            logger.error(f"Error sending media to support topic: {e}")
            return None
    
    async def _get_or_create_media_topic(self) -> Optional[int]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç —Ç–µ–º—É –¥–ª—è –º–µ–¥–∏–∞ –≤ —á–∞—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –µ–¥–∏–Ω—ã–π Redis –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å MoverBot
            from core.redis_client import redis_client
            await redis_client._ensure_connection()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            media_topic_key = f"media_topic:{settings.FORUM_CHAT_ID}"
            cached_topic = await redis_client.get(media_topic_key)
            if cached_topic:
                logger.info(f"Found cached media topic: {cached_topic.decode() if isinstance(cached_topic, bytes) else cached_topic}")
                topic_id = cached_topic.decode() if isinstance(cached_topic, bytes) else cached_topic
                return int(topic_id)
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç–µ–º—É –¥–ª—è –º–µ–¥–∏–∞
            topic_name = "üìé –ú–µ–¥–∏–∞—Ñ–∞–π–ª—ã –∑–∞–¥–∞—á"
            logger.info(f"Creating new media topic: {topic_name}")
            topic = await self.bot.create_forum_topic(
                chat_id=settings.FORUM_CHAT_ID,
                name=topic_name
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à —á–µ—Ä–µ–∑ –µ–¥–∏–Ω—ã–π Redis –∫–ª–∏–µ–Ω—Ç
            await redis_client.set(media_topic_key, str(topic.message_thread_id))
            logger.info(f"Created and cached media topic '{topic_name}' with ID {topic.message_thread_id}")
            
            return topic.message_thread_id
        except Exception as e:
            logger.error(f"Failed to create media topic: {e}")
            return None

    async def _create_support_reply_with_media(self, chat_id: int, reply_text: str, reply_author: str, update_data: dict) -> Optional[int]:
        """–°–æ–∑–¥–∞–µ—Ç –º–µ–¥–∏–∞-–æ—Ç–≤–µ—Ç –≤ —á–∞—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç message_id"""
        try:
            from aiogram.types import FSInputFile
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –ë–ï–ó –Ω–∏–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
            message_text = f"üí¨ <b>–û—Ç–≤–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:</b>\n\n{reply_text}" if reply_text else f"üí¨ <b>–û—Ç–≤–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏</b>"
            
            sent_message = None
            
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –∏–∑ —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
            if update_data.get('has_photo') and update_data.get('photo_file_paths'):
                try:
                    photo_file_paths = update_data.get('photo_file_paths', [])
                    
                    if photo_file_paths and len(photo_file_paths) > 0:
                        photo_path = photo_file_paths[0]  # –ë–µ—Ä—ë–º –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
                        if not os.path.exists(photo_path):
                            logger.warning(f"Photo file not found: {photo_path}")
                            raise FileNotFoundError(f"Photo file not found: {photo_path}")
                        
                        photo_file = FSInputFile(photo_path)
                        
                        sent_message = await self.bot.send_photo(
                            chat_id=chat_id,
                            photo=photo_file,
                            caption=message_text,
                            parse_mode="HTML"
                        )
                        logger.info(f"‚úÖ Created photo support reply: {sent_message.message_id}")
                        return sent_message.message_id
                            
                except Exception as photo_error:
                    logger.warning(f"Failed to create photo support reply: {photo_error}")
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –¥—Ä—É–≥–∏–º–∏ —Ç–∏–ø–∞–º–∏ –º–µ–¥–∏–∞
            
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ –∏–∑ —Ñ–∞–π–ª–∞
            if update_data.get('has_video') and update_data.get('video_file_path'):
                try:
                    video_path = update_data.get('video_file_path')
                    
                    if video_path and os.path.exists(video_path):
                        video_file = FSInputFile(video_path)
                        
                        sent_message = await self.bot.send_video(
                            chat_id=chat_id,
                            video=video_file,
                            caption=message_text,
                            parse_mode="HTML"
                        )
                        logger.info(f"‚úÖ Created video support reply: {sent_message.message_id}")
                        return sent_message.message_id
                        
                except Exception as video_error:
                    logger.warning(f"Failed to create video support reply: {video_error}")
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏
            
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –∏–∑ —Ñ–∞–π–ª–∞
            if update_data.get('has_document') and update_data.get('document_file_path'):
                try:
                    document_path = update_data.get('document_file_path')
                    
                    if document_path and os.path.exists(document_path):
                        document_file = FSInputFile(document_path)
                        
                        sent_message = await self.bot.send_document(
                            chat_id=chat_id,
                            document=document_file,
                            caption=message_text,
                            parse_mode="HTML"
                        )
                        logger.info(f"‚úÖ Created document support reply: {sent_message.message_id}")
                        return sent_message.message_id
                        
                except Exception as document_error:
                    logger.warning(f"Failed to create document support reply: {document_error}")
            
            # –ï—Å–ª–∏ –º–µ–¥–∏–∞ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å, —Å–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            logger.warning("No media could be sent, creating text support reply instead")
            return await self._create_support_reply_text(chat_id, reply_text, reply_author)
            
        except Exception as e:
            logger.error(f"Failed to create media support reply: {e}")
            return None

    async def _create_support_reply_text(self, chat_id: int, reply_text: str, reply_author: str) -> Optional[int]:
        """–°–æ–∑–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –≤ —á–∞—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç message_id"""
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –ë–ï–ó –Ω–∏–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
            message_text = f"üí¨ <b>–û—Ç–≤–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:</b>\n\n{reply_text}" if reply_text else f"üí¨ <b>–û—Ç–≤–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏</b>"
            
            sent_message = await self.bot.send_message(
                chat_id=chat_id,
                text=message_text,
                parse_mode="HTML"
            )
            
            logger.info(f"‚úÖ Created text support reply: {sent_message.message_id}")
            return sent_message.message_id
            
        except Exception as e:
            logger.error(f"Failed to create text support reply: {e}")
            return None

    async def _set_error_reaction(self, message: types.Message):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–µ–∞–∫—Ü–∏—é –æ—à–∏–±–∫–∏"""
        try:
            await self.bot.set_message_reaction(
                chat_id=message.chat.id,
                message_id=message.message_id,
                reaction=[{"type": "emoji", "emoji": "‚ùå"}]
            )
            logger.debug(f"Set reaction '‚ùå' for message {message.message_id} in chat {message.chat.id}")
        except Exception as e:
            logger.debug(f"Could not set error reaction: {e}")

    async def _append_to_task(self, task_id: str, message: types.Message):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–¥–∞—á–µ"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á—É
            task = await self.redis.get_task(task_id)
            if not task:
                return
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∫ –∑–∞–¥–∞—á–µ
            task['text'] += "\n" + message.text
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ Redis
            await self.redis.update_task(task_id, **task)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
            await self.task_bot.update_task_message(task_id, task['text'])
            
            logger.info(f"Appended message to task {task_id}")
            
        except Exception as e:
            logger.error(f"Error appending message to task: {e}")

    async def _create_new_task(self, message: types.Message):
        """
        –°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
        """
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            message_data = await self._prepare_message_data(message)

            # –≠–¢–ê–ü 1: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–ø–∏—Å–∞–Ω–æ –≤ –±–∞–∑—É (Redis)
            task_id = await self.redis.save_task(message_data)
            logger.info(f"[USERBOT][STEP 1] –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ Redis –∫–∞–∫ –∑–∞–¥–∞—á–∞ {task_id}")

            # –≠–¢–ê–ü 2: UserBot –æ—Ç–ø—Ä–∞–≤–∏–ª TaskBot —Å–∏–≥–Ω–∞–ª –ø–æ Pub/Sub
            await self.redis.publish_event("new_tasks", {
                "type": "new_task",
                "task_id": task_id
            })
            logger.info(f"[USERBOT][STEP 2] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–∏–≥–Ω–∞–ª –ø–æ Pub/Sub –æ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ: {task_id}")

            # –≠–¢–ê–ü 3: (TaskBot –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª, –ª–æ–≥–∏—Ä—É–µ—Ç—Å—è –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ TaskBot)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ —Å–∞–ø–ø–æ—Ä—Ç —á–∞—Ç —á–µ—Ä–µ–∑ TaskBot (–µ—Å–ª–∏ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é)
            if hasattr(self, 'task_bot') and self.task_bot:
                task_message = await self.task_bot.send_task_to_support(message_data)
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
                message_data['support_message_id'] = task_message.message_id
                await self.redis.set_task(task_id, message_data)
                logger.info(f"[USERBOT][STEP 5] –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ –≤ —Å–∞–ø–ø–æ—Ä—Ç —á–∞—Ç–µ —á–µ—Ä–µ–∑ TaskBot (—Ä—É—á–Ω–æ–π –≤—ã–∑–æ–≤)")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∑–∞–¥–∞—á—É
            await self.redis.set(f"active_task:{message_data['user_id']}:{message_data['chat_id']}", task_id, ex=settings.MESSAGE_AGGREGATION_TIMEOUT)
            
        except Exception as e:
            logger.error(f"Error creating new task: {e}")

    def _start_background_tasks(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏"""
        # –ó–∞–ø—É—Å–∫–∞–µ–º PubSub —Å–ª—É—à–∞—Ç–µ–ª—å
        asyncio.create_task(self._start_pubsub_listener())
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É
        asyncio.create_task(self._periodic_cleanup())

    async def _start_pubsub_listener(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç PubSub —Å–ª—É—à–∞—Ç–µ–ª—å —Å –Ω–æ–≤—ã–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º"""
        try:
            logger.info("Starting PubSub listener...")
            await self.pubsub_manager.start_background_listener(
                channels=["task_updates"],
                handler_func=self._pubsub_message_handler
            )
        except Exception as e:
            logger.error(f"PubSub listener error: {e}")

    async def _pubsub_message_handler(self, channel: str, message: dict):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ PubSub —Å–æ–±—ã—Ç–∏–π"""
        try:
            logger.info(f"[USERBOT][PUBSUB] Received event on channel {channel}: {message}")
            message_type = message.get('type')
            task_id = message.get('task_id')
            logger.info(f"[USERBOT][PUBSUB] Processing event type: {message_type}, task_id: {task_id}")
            
            if message_type == 'status_change':
                await self._handle_status_change(task_id, message)
            elif message_type == 'new_reply':
                await self._handle_new_reply_pubsub(message)
            elif message_type == 'task_deleted':
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                logger.info(f"[USERBOT][TASK_DELETED] Task {task_id} was deleted, clearing any cached references")
                # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ processed_tasks –µ—Å–ª–∏ –æ–Ω–∞ —Ç–∞–º –µ—Å—Ç—å
                for user_id, cached_task_id in list(self.message_aggregator.processed_tasks.items()):
                    if cached_task_id == task_id:
                        del self.message_aggregator.processed_tasks[user_id]
                        logger.info(f"[USERBOT][TASK_DELETED] Cleared cached task {task_id} for user {user_id}")
            elif message_type == 'task_update':
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
                await self._handle_task_update(channel, message)
            elif message_type == 'additional_message_reply':
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await self._handle_additional_reply(message)
        except Exception as e:
            logger.error(f"Error handling task update: {e}", exc_info=True)

    async def _handle_status_change(self, task_id: str, update_data: dict):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏"""
        try:
            new_status = update_data.get('new_status')
            logger.info(f"[USERBOT][REACTION] Processing status change for task {task_id}: {new_status}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á—É –∏–∑ Redis
            task = await self.redis.get_task(task_id)
            logger.info(f"Received status_update event for task {task_id}")
            logger.info(f"Retrieved task {task_id} for status update")
            
            if not task:
                logger.warning(f"[USERBOT][REACTION] Task {task_id} not found in Redis")
                return
            
            user_id = int(task.get('user_id', 0))
            chat_id = int(task.get('chat_id', 0))
            message_id = int(task.get('message_id', 0))
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ä–µ–∞–∫—Ü–∏—é
            reaction_map = {
                'waiting': '‚ö°',      # –°—Ç–∞–ª–∞ –∑–∞–¥–∞—á–µ–π
                'in_progress': '‚ö°',  # –í–∑—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É (–∏–∑–º–µ–Ω–µ–Ω–æ —Å üî• –Ω–∞ ‚ö°)
                'completed': 'üëå'     # –ó–∞–≤–µ—Ä—à–µ–Ω–∞ (–∏–∑–º–µ–Ω–µ–Ω–æ —Å ‚úÖ –Ω–∞ üëå)
            }
            
            if new_status in reaction_map:
                try:
                    await self.bot.set_message_reaction(
                        chat_id=chat_id,
                        message_id=message_id,
                        reaction=[{"type": "emoji", "emoji": reaction_map[new_status]}]
                    )
                    logger.debug(f"Set reaction '{reaction_map[new_status]}' for task {task_id}")
                    logger.info(f"Set reaction {reaction_map[new_status]} for task {task_id}")
                except Exception as e:
                    logger.debug(f"Could not set status reaction: {e}")
                    
        except Exception as e:
            logger.error(f"Error handling status change: {e}")

    async def _handle_new_reply(self, task_id: str, update_data: dict):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–¥–∞—á—É"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á—É
            task = await self.redis.get_task(task_id)
            if not task:
                return
            
            user_id = int(task.get('user_id', 0))
            chat_id = int(task.get('chat_id', 0))
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞ –∏–∑ —Å–æ–±—ã—Ç–∏—è –∏–ª–∏ –∏–∑ –∑–∞–¥–∞—á–∏
            reply_text = update_data.get('reply_text') or task.get('reply', '')
            reply_author = update_data.get('reply_author') or task.get('reply_author', '')
            reply_message_id = update_data.get('reply_message_id')
            reply_chat_id = update_data.get('reply_chat_id')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ
            has_media = (
                update_data.get('has_photo', False) or 
                update_data.get('has_video', False) or 
                update_data.get('has_document', False)
            )
            
            if (reply_text or has_media) and user_id and chat_id:
                logger.info(f"Processing reply for task {task_id}, user {user_id}, has_media: {has_media}, trying to forward to user topic")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —á–∞—Ç —Ñ–æ—Ä—É–º–æ–º
                topic_id = None
                target_chat_id = chat_id  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —á–∞—Ç
                
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —á–∞—Ç —Ñ–æ—Ä—É–º–æ–º
                    chat_info = await self.bot.get_chat(target_chat_id)
                    if chat_info.is_forum:
                        # –ï—Å–ª–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —á–∞—Ç - —Ñ–æ—Ä—É–º, —Å–æ–∑–¥–∞—ë–º —Ç–µ–º—É —Ç–∞–º
                        topic_id = await self.topic_manager.get_or_create_user_topic(
                            target_chat_id,
                            user_id,
                            task.get('username'),
                            task.get('first_name')
                        )
                        logger.info(f"Got user topic {topic_id} for user {user_id} in forum chat {target_chat_id}")
                    else:
                        # –ï—Å–ª–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —á–∞—Ç –Ω–µ —Ñ–æ—Ä—É–º, –ø—Ä–æ–±—É–µ–º —Ñ–æ—Ä—É–º–Ω—ã–π —á–∞—Ç –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
                        logger.info(f"Original chat {target_chat_id} is not a forum, trying forum chat {settings.FORUM_CHAT_ID}")
                        target_chat_id = settings.FORUM_CHAT_ID
                        topic_id = await self.topic_manager.get_or_create_user_topic(
                            target_chat_id,
                            user_id,
                            task.get('username'),
                            task.get('first_name')
                        )
                        logger.info(f"Got user topic {topic_id} for user {user_id} in forum chat {target_chat_id}")
                except Exception as e:
                    logger.error(f"Failed to get/create user topic for user {user_id}: {e}")
                    topic_id = None
                    target_chat_id = None
                
                # –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–µ message_source –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–≤–µ–¥–µ–Ω–∏—è
                message_source = task.get('message_source', 'main_menu')  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                logger.info(f"[REPLY][SOURCE] Task {task_id} originated from: {message_source}")
                
                # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Ç–µ–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - —Ç–æ–ª—å–∫–æ –ø—Ä—è–º–æ–π –æ—Ç–≤–µ—Ç, –Ω–∏–∫–∞–∫–∏—Ö –ø–µ—Ä–µ—Å—ã–ª–æ–∫
                if message_source == "user_topic":
                    logger.info(f"Message from user topic - sending direct reply only, no forwarding")
                    should_forward_to_topic = False
                else:
                    # –ï—Å–ª–∏ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é - –ø—Ä—è–º–æ–π –æ—Ç–≤–µ—Ç + –ø–µ—Ä–µ—Å—ã–ª–∫–∞ –≤ —Ç–µ–º—É (–µ—Å–ª–∏ –µ—Å—Ç—å)
                    logger.info(f"Message from main menu - sending direct reply + forwarding to topic if available")
                    should_forward_to_topic = True
                
                # –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ-–æ—Ç–≤–µ—Ç –≤ —á–∞—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏, –∑–∞—Ç–µ–º –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –µ–≥–æ
                forwarded_to_topic = False
                support_reply_message_id = None
                
                # –®–∞–≥ 1: –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ-–æ—Ç–≤–µ—Ç –≤ —á–∞—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
                try:
                    logger.info(f"Creating support reply message in support chat {settings.FORUM_CHAT_ID}")
                    
                    if has_media:
                        # –°–æ–∑–¥–∞–µ–º –º–µ–¥–∏–∞-–æ—Ç–≤–µ—Ç –≤ —á–∞—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
                        support_reply_message_id = await self._create_support_reply_with_media(
                            settings.FORUM_CHAT_ID, reply_text, reply_author, update_data
                        )
                    else:
                        # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –≤ —á–∞—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
                        support_reply_message_id = await self._create_support_reply_text(
                            settings.FORUM_CHAT_ID, reply_text, reply_author
                        )
                    
                    if support_reply_message_id:
                        logger.info(f"Created support reply message {support_reply_message_id} in support chat")
                    else:
                        logger.error(f"Failed to create support reply message in support chat")
                        
                except Exception as e:
                    logger.error(f"Error creating support reply message: {e}")
                    support_reply_message_id = None
                
                # –®–∞–≥ 2: –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–æ–ª–∂–Ω—ã –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å)
                if topic_id and support_reply_message_id and target_chat_id and should_forward_to_topic:
                    try:
                        logger.info(f"Forwarding support reply message {support_reply_message_id} to user topic {topic_id} in chat {target_chat_id}")
                        await self.bot.forward_message(
                            chat_id=target_chat_id,
                            from_chat_id=settings.FORUM_CHAT_ID,
                            message_id=support_reply_message_id,
                            message_thread_id=topic_id
                        )
                        logger.info(f"Successfully forwarded support reply to user topic {topic_id}")
                        forwarded_to_topic = True
                    except Exception as e:
                        error_msg = str(e).lower()
                        logger.warning(f"Could not forward support reply to user topic {topic_id} in chat {target_chat_id}: {e}")
                        
                        # –ï—Å–ª–∏ —Ç–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–±—É–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –µ—ë
                        if "thread not found" in error_msg or "message thread not found" in error_msg:
                            logger.info(f"Topic {topic_id} not found, attempting to recreate for user {user_id}")
                            try:
                                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Ç–µ–º—É –∏–∑ –∫—ç—à–∞
                                await self.topic_manager._delete_user_topic_cache(target_chat_id, user_id)
                                
                                # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é —Ç–µ–º—É
                                new_topic_id = await self.topic_manager.get_or_create_user_topic(
                                    target_chat_id,
                                    user_id,
                                    task.get('username'),
                                    task.get('first_name')
                                )
                                
                                if new_topic_id:
                                    logger.info(f"Created new topic {new_topic_id} for user {user_id}, retrying forward")
                                    # –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å –Ω–æ–≤–æ–π —Ç–µ–º–æ–π
                                    await self.bot.forward_message(
                                        chat_id=target_chat_id,
                                        from_chat_id=settings.FORUM_CHAT_ID,
                                        message_id=support_reply_message_id,
                                        message_thread_id=new_topic_id
                                    )
                                    logger.info(f"Successfully forwarded support reply to recreated topic {new_topic_id}")
                                    forwarded_to_topic = True
                                    topic_id = new_topic_id  # –û–±–Ω–æ–≤–ª—è–µ–º topic_id –¥–ª—è fallback
                                else:
                                    logger.error(f"Failed to recreate topic for user {user_id}")
                                    
                            except Exception as retry_e:
                                logger.error(f"Failed to recreate topic and retry forward: {retry_e}")
                        
                        elif "chat not found" in error_msg:
                            logger.error(f"Chat {target_chat_id} not found - bot may not be added to this chat or chat doesn't exist")
                        elif "bot is not a member" in error_msg:
                            logger.error(f"Bot is not a member of chat {target_chat_id}")
                        elif "not enough rights" in error_msg:
                            logger.error(f"Bot doesn't have enough rights in chat {target_chat_id}")
                        
                        # –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ forwarded_to_topic –æ—Å—Ç–∞—ë—Ç—Å—è False –¥–ª—è fallback
                elif not topic_id:
                    logger.warning(f"No user topic available for user {user_id}, skipping topic forwarding")
                elif not support_reply_message_id:
                    logger.warning(f"No support reply message created, skipping forwarding")
                
                # –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞–ø—Ä—è–º—É—é –¢–û–õ–¨–ö–û –û–î–ò–ù –†–ê–ó
                # –ù–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ç–æ–≥–æ, —É–¥–∞–ª–æ—Å—å –ª–∏ —Å–æ–∑–¥–∞—Ç—å/–ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ support chat
                direct_reply_message_id = None
                try:
                    original_message_id = task.get('message_id')
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø—Ä—è–º–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
                    if has_media:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞ –Ω–∞–ø—Ä—è–º—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                        direct_reply_message_id = await self._send_media_reply_direct_with_id(chat_id, original_message_id, reply_text, reply_author, update_data)
                        if direct_reply_message_id:
                            logger.info(f"Sent direct media reply to user {user_id} in chat {chat_id}")
                        else:
                            # Fallback –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                            direct_reply_message_id = await self._send_text_reply_direct_with_id(chat_id, original_message_id, reply_text, reply_author)
                    else:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
                        direct_reply_message_id = await self._send_text_reply_direct_with_id(chat_id, original_message_id, reply_text, reply_author)
                    
                    logger.info(f"Sent direct reply to user {user_id} in chat {chat_id}")
                    
                    # –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∏ –µ—Å—Ç—å —Ç–µ–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è,
                    # –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ —Ç–µ–º—É (–Ω–µ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
                    if (message_source == "main_menu" and topic_id and target_chat_id and 
                        direct_reply_message_id and should_forward_to_topic):
                        try:
                            logger.info(f"Forwarding direct reply message {direct_reply_message_id} to user topic {topic_id} in chat {target_chat_id}")
                            await self.bot.forward_message(
                                chat_id=target_chat_id,
                                from_chat_id=chat_id,
                                message_id=direct_reply_message_id,
                                message_thread_id=topic_id
                            )
                            logger.info(f"Successfully forwarded direct reply to user topic {topic_id}")
                        except Exception as forward_e:
                            logger.warning(f"Could not forward direct reply to user topic {topic_id}: {forward_e}")
                            # Fallback: —Å–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–º–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å
                            try:
                                await self.bot.send_message(
                                    chat_id=target_chat_id,
                                    message_thread_id=topic_id,
                                    text=f"üí¨ <b>–û—Ç–≤–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:</b>\n\n{reply_text}",
                                    parse_mode="HTML"
                                )
                                logger.info(f"Sent fallback text reply to topic {topic_id} in chat {target_chat_id}")
                            except Exception as fallback_e:
                                logger.error(f"Failed to send fallback reply to user topic: {fallback_e}")
                        
                except Exception as e:
                    logger.error(f"Could not send direct reply to user: {e}")
                    
                    # –¢–û–õ–¨–ö–û –ï–°–õ–ò –ù–ï –£–î–ê–õ–û–°–¨ –û–¢–ü–†–ê–í–ò–¢–¨ –ü–†–Ø–ú–û–ô –û–¢–í–ï–¢ - –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ —Ç–µ–º—É –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–∏–π fallback
                    if topic_id and target_chat_id:
                        try:
                            logger.info(f"Direct reply failed, attempting fallback to user topic {topic_id}")
                            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞ –≤ —Ç–µ–º—É
                            success = await self._send_media_reply(target_chat_id, topic_id, reply_text, reply_author, update_data)
                            if success:
                                logger.info(f"Sent media fallback message to user topic {topic_id} in chat {target_chat_id}")
                            else:
                                # Fallback –Ω–∞ –æ–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                                await self.bot.send_message(
                                    chat_id=target_chat_id,
                                    message_thread_id=topic_id,
                                    text=f"üí¨ <b>–û—Ç–≤–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:</b>\n\n{reply_text}",
                                    parse_mode="HTML"
                                )
                                logger.info(f"Sent text fallback message to user topic {topic_id} in chat {target_chat_id}")
                        except Exception as fallback_e:
                            logger.error(f"Failed to send fallback message to user topic: {fallback_e}")
                    
                logger.info(f"Sent reply for task {task_id} to user {user_id}")
                
        except Exception as e:
            logger.error(f"Error handling new reply: {e}")
    async def _periodic_cleanup(self):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        while True:
            try:
                await asyncio.sleep(3600)  # –ö–∞–∂–¥—ã–π —á–∞—Å
                
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã —Å —Ç–µ–º–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                pattern = "user_topic:*"
                keys = []
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º scan –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–µ–π
                cursor = 0
                while True:
                    cursor, batch = await self.redis.conn.scan(cursor, match=pattern, count=100)
                    keys.extend(batch)
                    if cursor == 0:
                        break
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ chat_id –∏–∑ –∫–ª—é—á–µ–π
                chat_ids = set()
                for key in keys:
                    if isinstance(key, bytes):
                        key = key.decode('utf-8')
                    # –§–æ—Ä–º–∞—Ç –∫–ª—é—á–∞: user_topic:chat_id:user_id
                    parts = key.split(':')
                    if len(parts) >= 3:
                        try:
                            chat_id = int(parts[1])
                            chat_ids.add(chat_id)
                        except ValueError:
                            continue
                
                # –û—á–∏—â–∞–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–µ–º—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞
                for chat_id in chat_ids:
                    try:
                        await self.topic_manager.cleanup_inactive_topics(chat_id)
                        logger.info(f"Cleaned up topics for chat {chat_id}")
                    except Exception as e:
                        logger.error(f"Error cleaning up topics for chat {chat_id}: {e}")
                
                logger.info(f"Completed periodic cleanup for {len(chat_ids)} chats")
                
            except Exception as e:
                logger.error(f"Error in periodic cleanup: {e}")



    async def _handle_additional_message_reply(self, update_data: dict):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç—ã –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            logger.info(f"Processing additional message reply: {update_data}")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ–±—ã—Ç–∏—è
            task_id = update_data.get('task_id')
            reply_text = update_data.get('reply_text', '')
            reply_author = update_data.get('reply_author', '')
            user_message_id = update_data.get('user_message_id')
            user_chat_id = update_data.get('user_chat_id')
            user_topic_id = update_data.get('user_topic_id')
            
            if not all([task_id, user_message_id, user_chat_id]):
                logger.error(f"Missing required data for additional message reply: task_id={task_id}, user_message_id={user_message_id}, user_chat_id={user_chat_id}")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á—É –∏–∑ Redis –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            task = await self.redis.get_task(task_id)
            if not task:
                logger.error(f"Task {task_id} not found for additional message reply processing")
                return
            
            message_source = task.get('message_source', 'main_menu')
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å –æ—Ç–≤–µ—Ç –≤ —Ç–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º user_topic_id –∏–∑ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            current_message_from_user_topic = user_topic_id is not None and update_data.get('user_chat_id') == user_topic_id
            should_forward_to_topic = False
            if current_message_from_user_topic:
                logger.info(f"Reply to additional message from user topic - sending direct reply only, no forwarding")
                should_forward_to_topic = False
            else:
                logger.info(f"Reply to additional message from main menu - sending direct reply + forwarding to topic if available")
                should_forward_to_topic = True
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∫–∞–∫ reply –∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            direct_reply_message_id = None
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
                has_media = any([
                    update_data.get('reply_has_photo', False),
                    update_data.get('reply_has_video', False),
                    update_data.get('reply_has_document', False)
                ])
                
                if has_media:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞-–æ—Ç–≤–µ—Ç
                    direct_reply_message_id = await self._send_media_reply_to_additional_message(
                        user_chat_id, user_message_id, user_topic_id, 
                        reply_text, reply_author, update_data
                    )
                else:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –∫–∞–∫ reply –∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
                    message_text = f"üí¨ <b>–û—Ç–≤–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:</b>\n\n{reply_text}" if reply_text else "üí¨ <b>–û—Ç–≤–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏</b>"
                    
                    sent_message = await self.bot.send_message(
                        chat_id=user_chat_id,
                        text=message_text,
                        reply_to_message_id=user_message_id,
                        message_thread_id=user_topic_id if user_topic_id else None,
                        parse_mode="HTML"
                    )
                    direct_reply_message_id = sent_message.message_id
                
                logger.info(f"Successfully sent additional message reply to user {user_chat_id}, message {user_message_id}")
                
            except Exception as send_error:
                logger.error(f"Failed to send additional message reply: {send_error}")
                return
            
            # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –æ—Ç–≤–µ—Ç –≤ —Ç–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if (should_forward_to_topic and user_topic_id and user_chat_id and 
                direct_reply_message_id and message_source == "main_menu"):
                try:
                    logger.info(f"Forwarding direct reply message {direct_reply_message_id} to user topic {user_topic_id} in chat {user_chat_id}")
                    await self.bot.forward_message(
                        chat_id=user_chat_id,
                        from_chat_id=user_chat_id,
                        message_id=direct_reply_message_id,
                        message_thread_id=user_topic_id
                    )
                    logger.info(f"Successfully forwarded direct reply to user topic {user_topic_id}")
                except Exception as forward_e:
                    logger.warning(f"Could not forward direct reply to user topic {user_topic_id}: {forward_e}")
                    # Fallback: —Å–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–º–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å
                    try:
                        message_text = f"üí¨ <b>–û—Ç–≤–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:</b>\n\n{reply_text}" if reply_text else "üí¨ <b>–û—Ç–≤–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏</b>"
                        await self.bot.send_message(
                            chat_id=user_chat_id,
                            text=message_text,
                            message_thread_id=user_topic_id,
                            parse_mode="HTML"
                        )
                        logger.info(f"Sent fallback text message to user topic {user_topic_id}")
                    except Exception as fallback_e:
                        logger.error(f"Failed to send fallback message to user topic {user_topic_id}: {fallback_e}")
            
        except Exception as e:
            logger.error(f"Error handling additional message reply: {e}", exc_info=True)

    async def _send_media_reply_to_additional_message(self, chat_id: int, message_id: int, topic_id: int, reply_text: str, reply_author: str, update_data: dict):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–¥–∏–∞-–æ—Ç–≤–µ—Ç –∫–∞–∫ reply –∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é"""
        try:
            message_text = f"üí¨ <b>–û—Ç–≤–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:</b>\n\n{reply_text}" if reply_text else "üí¨ <b>–û—Ç–≤–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏</b>"
            media_sent = False
            sent_message_id = None
            
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ
            if update_data.get('reply_has_photo') and update_data.get('reply_photo_file_ids'):
                try:
                    photo_file_ids = update_data.get('reply_photo_file_ids', [])
                    if isinstance(photo_file_ids, str):
                        import json
                        photo_file_ids = json.loads(photo_file_ids)
                    
                    if photo_file_ids and isinstance(photo_file_ids, list):
                        photo_file_id = photo_file_ids[-1]  # –ë–µ—Ä–µ–º –Ω–∞–∏–±–æ–ª—å—à–µ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
                        
                        sent_message = await self.bot.send_photo(
                            chat_id=chat_id,
                            photo=photo_file_id,
                            caption=message_text,
                            reply_to_message_id=message_id,
                            message_thread_id=topic_id if topic_id else None,
                            parse_mode="HTML"
                        )
                        sent_message_id = sent_message.message_id
                        media_sent = True
                        logger.info(f"Sent photo reply to additional message {message_id}")
                        
                except Exception as photo_error:
                    logger.warning(f"Failed to send photo reply to additional message: {photo_error}")
            
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ, –µ—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å
            elif not media_sent and update_data.get('reply_has_video') and update_data.get('reply_video_file_id'):
                try:
                    video_file_id = update_data['reply_video_file_id']
                    
                    sent_message = await self.bot.send_video(
                        chat_id=chat_id,
                        video=video_file_id,
                        caption=message_text,
                        reply_to_message_id=message_id,
                        message_thread_id=topic_id if topic_id else None,
                        parse_mode="HTML"
                    )
                    sent_message_id = sent_message.message_id
                    media_sent = True
                    logger.info(f"Sent video reply to additional message {message_id}")
                    
                except Exception as video_error:
                    logger.warning(f"Failed to send video reply to additional message: {video_error}")
            
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç, –µ—Å–ª–∏ –º–µ–¥–∏–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å
            elif not media_sent and update_data.get('reply_has_document') and update_data.get('reply_document_file_id'):
                try:
                    document_file_id = update_data['reply_document_file_id']
                    
                    sent_message = await self.bot.send_document(
                        chat_id=chat_id,
                        document=document_file_id,
                        caption=message_text,
                        reply_to_message_id=message_id,
                        message_thread_id=topic_id if topic_id else None,
                        parse_mode="HTML"
                    )
                    sent_message_id = sent_message.message_id
                    media_sent = True
                    logger.info(f"Sent document reply to additional message {message_id}")
                    
                except Exception as doc_error:
                    logger.warning(f"Failed to send document reply to additional message: {doc_error}")
            
            # –ï—Å–ª–∏ –º–µ–¥–∏–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if not media_sent:
                sent_message = await self.bot.send_message(
                    chat_id=chat_id,
                    text=message_text,
                    reply_to_message_id=message_id,
                    message_thread_id=topic_id if topic_id else None,
                    parse_mode="HTML"
                )
                sent_message_id = sent_message.message_id
                logger.info(f"Sent text reply to additional message {message_id} (media fallback)")
            
            return sent_message_id
                
        except Exception as e:
            logger.error(f"Error sending media reply to additional message: {e}")
            return None

    async def _handle_task_reply(self, update_data: dict):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±—ã—á–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –∑–∞–¥–∞—á–∏ (—Å–æ–±—ã—Ç–∏—è new_reply)"""
        try:
            logger.info(f"Processing task reply: {update_data}")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ–±—ã—Ç–∏—è
            task_id = update_data.get('task_id')
            reply_text = update_data.get('reply_text', '')
            reply_author = update_data.get('reply_author', '')
            reply_message_id = update_data.get('reply_message_id')
            reply_chat_id = update_data.get('reply_chat_id')
            
            if not task_id:
                logger.error(f"Missing task_id in task reply event: {update_data}")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á—É –∏–∑ Redis
            task = await self.redis.get_task(task_id)
            if not task:
                logger.error(f"Task {task_id} not found for reply processing")
                return
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —á–∞—Ç–∞
            user_id = task.get('user_id')
            original_chat_id = int(task.get('chat_id', 0))  # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —á–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            original_message_id = int(task.get('message_id', 0))
            message_source = task.get('message_source', 'main_menu')
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º chat_id –∏–∑ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ reply
            # reply_chat_id - —ç—Ç–æ —á–∞—Ç, –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –º—ã –æ—Ç–≤–µ—á–∞–µ–º
            target_chat_id = reply_chat_id if reply_chat_id else original_chat_id
            
            if not all([user_id, target_chat_id, original_message_id]):
                logger.error(f"Missing required task data: user_id={user_id}, target_chat_id={target_chat_id}, message_id={original_message_id}")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º user_topic_id –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_topic_id = None
            try:
                user_topic_id = await self.topic_manager.get_or_create_user_topic(
                    user_id=int(user_id),
                    chat_id=original_chat_id
                )
            except Exception as topic_error:
                logger.warning(f"Could not get user topic for user {user_id}: {topic_error}")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å –æ—Ç–≤–µ—Ç –≤ —Ç–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º user_topic_id –∏ reply_chat_id –∏–∑ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            current_message_from_user_topic = user_topic_id is not None and update_data.get('reply_chat_id') == user_topic_id
            should_forward_to_topic = False
            if current_message_from_user_topic:
                logger.info(f"Reply to message from user topic - sending direct reply only, no forwarding")
                should_forward_to_topic = False
            else:
                logger.info(f"Reply to message from main menu - sending direct reply + forwarding to topic if available")
                should_forward_to_topic = True
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∫–∞–∫ reply –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é –∑–∞–¥–∞—á–∏
            direct_reply_message_id = None
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
                has_media = any([
                    update_data.get('has_photo', False),
                    update_data.get('has_video', False),
                    update_data.get('has_document', False)
                ])
                
                if has_media:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞-–æ—Ç–≤–µ—Ç
                    direct_reply_message_id = await self._send_media_reply_to_task(
                        target_chat_id, original_message_id, user_topic_id, 
                        reply_text, reply_author, update_data
                    )
                else:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –∫–∞–∫ reply –∫ –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞–¥–∞—á–µ
                    message_text = f"üí¨ <b>–û—Ç–≤–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:</b>\n\n{reply_text}" if reply_text else "üí¨ <b>–û—Ç–≤–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏</b>"
                    
                    sent_message = await self.bot.send_message(
                        chat_id=target_chat_id,
                        text=message_text,
                        reply_to_message_id=original_message_id,
                        message_thread_id=user_topic_id if user_topic_id else None,
                        parse_mode="HTML"
                    )
                    direct_reply_message_id = sent_message.message_id
                
                logger.info(f"Successfully sent task reply to user {user_id}, chat {target_chat_id}, message {original_message_id}")
                
            except Exception as send_error:
                logger.error(f"Failed to send task reply: {send_error}")
                return
            
            # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –æ—Ç–≤–µ—Ç –≤ —Ç–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if (should_forward_to_topic and user_topic_id and target_chat_id and 
                direct_reply_message_id and message_source == "main_menu"):
                try:
                    logger.info(f"Forwarding direct reply message {direct_reply_message_id} to user topic {user_topic_id} in chat {original_chat_id}")
                    await self.bot.forward_message(
                        chat_id=original_chat_id,
                        from_chat_id=target_chat_id,
                        message_id=direct_reply_message_id,
                        message_thread_id=user_topic_id
                    )
                    logger.info(f"Successfully forwarded direct reply to user topic {user_topic_id}")
                except Exception as forward_e:
                    logger.warning(f"Could not forward direct reply to user topic {user_topic_id}: {forward_e}")
                    # Fallback: —Å–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–º–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å
                    try:
                        message_text = f"üí¨ <b>–û—Ç–≤–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:</b>\n\n{reply_text}" if reply_text else "üí¨ <b>–û—Ç–≤–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏</b>"
                        await self.bot.send_message(
                            chat_id=original_chat_id,
                            text=message_text,
                            message_thread_id=user_topic_id,
                            parse_mode="HTML"
                        )
                        logger.info(f"Sent fallback text message to user topic {user_topic_id}")
                    except Exception as fallback_e:
                        logger.error(f"Failed to send fallback message to user topic {user_topic_id}: {fallback_e}")
            
        except Exception as e:
            logger.error(f"Error handling task reply: {e}", exc_info=True)

        logger.info(f"Processing task reply: {update_data}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ–±—ã—Ç–∏—è
        task_id = update_data.get('task_id')
        reply_text = update_data.get('reply_text', '')
        reply_author = update_data.get('reply_author', '')
        reply_message_id = update_data.get('reply_message_id')
        reply_chat_id = update_data.get('reply_chat_id')
        
        if not task_id:
            logger.error(f"Missing task_id in task reply event: {update_data}")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á—É –∏–∑ Redis
        task = await self.redis.get_task(task_id)
        if not task:
            logger.error(f"Task {task_id} not found for reply processing")
            return
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —á–∞—Ç–∞
        user_id = task.get('user_id')
        original_chat_id = int(task.get('chat_id', 0))  # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —á–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        original_message_id = int(task.get('message_id', 0))
        message_source = task.get('message_source', 'main_menu')
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º chat_id –∏–∑ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ reply
        # reply_chat_id - —ç—Ç–æ —á–∞—Ç, –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –º—ã –æ—Ç–≤–µ—á–∞–µ–º
        target_chat_id = reply_chat_id if reply_chat_id else original_chat_id
        
        if not all([user_id, target_chat_id, original_message_id]):
            logger.error(f"Missing required task data: user_id={user_id}, target_chat_id={target_chat_id}, message_id={original_message_id}")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º user_topic_id –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_topic_id = None
        try:
            user_topic_id = await self.topic_manager.get_or_create_user_topic(
                user_id=int(user_id),
                chat_id=original_chat_id
            )
            
            if not task_id:
                logger.error(f"Missing task_id in task reply event: {update_data}")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á—É –∏–∑ Redis
            task = await self.redis.get_task(task_id)
            if not task:
                logger.error(f"Task {task_id} not found for reply processing")
                return
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —á–∞—Ç–∞
            user_id = task.get('user_id')
            original_chat_id = int(task.get('chat_id', 0))  # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —á–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            original_message_id = int(task.get('message_id', 0))
            message_source = task.get('message_source', 'main_menu')
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º chat_id –∏–∑ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ reply
            # reply_chat_id - —ç—Ç–æ —á–∞—Ç, –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –º—ã –æ—Ç–≤–µ—á–∞–µ–º
            target_chat_id = reply_chat_id if reply_chat_id else original_chat_id
            
            if not all([user_id, target_chat_id, original_message_id]):
                logger.error(f"Missing required task data: user_id={user_id}, target_chat_id={target_chat_id}, message_id={original_message_id}")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º user_topic_id –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_topic_id = None
            try:
                user_topic_id = await self.topic_manager.get_or_create_user_topic(
                    user_id=int(user_id),
                    chat_id=original_chat_id
                )
            except Exception as topic_error:
                logger.warning(f"Could not get user topic for user {user_id}: {topic_error}")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å –æ—Ç–≤–µ—Ç –≤ —Ç–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º user_topic_id –∏ reply_chat_id –∏–∑ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            current_message_from_user_topic = user_topic_id is not None and update_data.get('reply_chat_id') == user_topic_id
            should_forward_to_topic = False
            if current_message_from_user_topic:
                logger.info(f"Reply to message from user topic - sending direct reply only, no forwarding")
                should_forward_to_topic = False
            else:
                logger.info(f"Reply to message from main menu - sending direct reply + forwarding to topic if available")
                should_forward_to_topic = True
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∫–∞–∫ reply –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é –∑–∞–¥–∞—á–∏
            direct_reply_message_id = None
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
                has_media = any([
                    update_data.get('has_photo', False),
                    update_data.get('has_video', False),
                    update_data.get('has_document', False)
                ])
                
                if has_media:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞-–æ—Ç–≤–µ—Ç
                    direct_reply_message_id = await self._send_media_reply_to_task(
                        target_chat_id, original_message_id, user_topic_id, 
                        reply_text, reply_author, update_data
                    )
                else:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –∫–∞–∫ reply –∫ –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞–¥–∞—á–µ
                    message_text = f"üí¨ <b>–û—Ç–≤–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:</b>\n\n{reply_text}" if reply_text else "üí¨ <b>–û—Ç–≤–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏</b>"
                    
                    sent_message = await self.bot.send_message(
                        chat_id=target_chat_id,
                        text=message_text,
                        reply_to_message_id=original_message_id,
                        message_thread_id=user_topic_id if user_topic_id else None,
                        parse_mode="HTML"
                    )
                    direct_reply_message_id = sent_message.message_id
                
                logger.info(f"Successfully sent task reply to user {user_id}, chat {target_chat_id}, message {original_message_id}")
                
            except Exception as send_error:
                logger.error(f"Failed to send task reply: {send_error}")
                return
            
            # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –æ—Ç–≤–µ—Ç –≤ —Ç–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if (should_forward_to_topic and user_topic_id and target_chat_id and 
                direct_reply_message_id and message_source == "main_menu"):
                try:
                    logger.info(f"Forwarding direct reply message {direct_reply_message_id} to user topic {user_topic_id} in chat {original_chat_id}")
                    await self.bot.forward_message(
                        chat_id=original_chat_id,
                        from_chat_id=target_chat_id,
                        message_id=direct_reply_message_id,
                        message_thread_id=user_topic_id
                    )
                    logger.info(f"Successfully forwarded direct reply to user topic {user_topic_id}")
                except Exception as forward_e:
                    logger.warning(f"Could not forward direct reply to user topic {user_topic_id}: {forward_e}")
                    # Fallback: —Å–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–º–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å
                    try:
                        message_text = f"üí¨ <b>–û—Ç–≤–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:</b>\n\n{reply_text}" if reply_text else "üí¨ <b>–û—Ç–≤–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏</b>"
                        await self.bot.send_message(
                            chat_id=original_chat_id,
                            text=message_text,
                            message_thread_id=user_topic_id,
                            parse_mode="HTML"
                        )
                        logger.info(f"Sent fallback text message to user topic {user_topic_id}")
                    except Exception as fallback_e:
                        logger.error(f"Failed to send fallback message to user topic {user_topic_id}: {fallback_e}")
                except Exception as e:
                    logger.error(f"Error handling task reply: {e}", exc_info=True)

        except Exception as e:
            logger.error(f"Error handling task reply: {e}", exc_info=True)

    async def _send_media_reply_to_task(self, chat_id: int, message_id: int, topic_id: int, reply_text: str, reply_author: str, update_data: dict):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–¥–∏–∞-–æ—Ç–≤–µ—Ç –∫–∞–∫ reply –∫ –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞–¥–∞—á–µ"""
        try:
            message_text = f"üí¨ <b>–û—Ç–≤–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:</b>\n\n{reply_text}" if reply_text else "üí¨ <b>–û—Ç–≤–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏</b>"
            media_sent = False
            sent_message_id = None
            
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ
            if update_data.get('has_photo') and update_data.get('photo_file_ids'):
                try:
                    photo_file_ids = update_data.get('photo_file_ids', [])
                    if isinstance(photo_file_ids, str):
                        import json
                        photo_file_ids = json.loads(photo_file_ids)
                    
                    if photo_file_ids and isinstance(photo_file_ids, list):
                        photo_file_id = photo_file_ids[-1]  # –ë–µ—Ä–µ–º –Ω–∞–∏–±–æ–ª—å—à–µ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
                        
                        sent_message = await self.bot.send_photo(
                            chat_id=chat_id,
                            photo=photo_file_id,
                            caption=message_text,
                            reply_to_message_id=message_id,
                            message_thread_id=topic_id if topic_id else None,
                            parse_mode="HTML"
                        )
                        sent_message_id = sent_message.message_id
                        media_sent = True
                        logger.info(f"Sent photo reply to task message {message_id}")
                        
                except Exception as photo_error:
                    logger.warning(f"Failed to send photo reply to task: {photo_error}")
            
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ, –µ—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å
            elif not media_sent and update_data.get('has_video') and update_data.get('video_file_id'):
                try:
                    video_file_id = update_data['video_file_id']
                    
                    sent_message = await self.bot.send_video(
                        chat_id=chat_id,
                        video=video_file_id,
                        caption=message_text,
                        reply_to_message_id=message_id,
                        message_thread_id=topic_id if topic_id else None,
                        parse_mode="HTML"
                    )
                    sent_message_id = sent_message.message_id
                    media_sent = True
                    logger.info(f"Sent video reply to task message {message_id}")
                    
                except Exception as video_error:
                    logger.warning(f"Failed to send video reply to task: {video_error}")
            
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç, –µ—Å–ª–∏ –º–µ–¥–∏–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å
            elif not media_sent and update_data.get('has_document') and update_data.get('document_file_id'):
                try:
                    document_file_id = update_data['document_file_id']
                    
                    sent_message = await self.bot.send_document(
                        chat_id=chat_id,
                        document=document_file_id,
                        caption=message_text,
                        reply_to_message_id=message_id,
                        message_thread_id=topic_id if topic_id else None,
                        parse_mode="HTML"
                    )
                    sent_message_id = sent_message.message_id
                    media_sent = True
                    logger.info(f"Sent document reply to task message {message_id}")
                    
                except Exception as doc_error:
                    logger.warning(f"Failed to send document reply to task: {doc_error}")
            
            # –ï—Å–ª–∏ –º–µ–¥–∏–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if not media_sent:
                sent_message = await self.bot.send_message(
                    chat_id=chat_id,
                    text=message_text,
                    reply_to_message_id=message_id,
                    message_thread_id=topic_id if topic_id else None,
                    parse_mode="HTML"
                )
                sent_message_id = sent_message.message_id
                logger.info(f"Sent text reply to task message {message_id} (media fallback)")
            
            return sent_message_id
                
        except Exception as e:
            logger.error(f"Error sending media reply to task: {e}")
            return None



    async def start_polling(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling —Å –ø–æ–ª–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π"""
        try:
            logger.info("[USERBOT][STEP 0] Starting UserBot in polling mode...")
            
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Redis
            logger.info("[USERBOT][STEP 0.0] Connecting to Redis...")
            await self.redis.connect()
            logger.info("[USERBOT][STEP 0.0] Redis connection established")
            
            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∫–∞–Ω–∞–ª—ã
            logger.info("[USERBOT][STEP 0.1] Subscribing to PubSub channels...")
            await self.pubsub_manager.subscribe("health_check", self._pubsub_message_handler)
            await self.pubsub_manager.subscribe("task_updates", self._pubsub_message_handler)
            logger.info("[USERBOT][STEP 0.2] Subscriptions completed")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª—è PubSub
            logger.info("[USERBOT][STEP 0.3] Starting PubSub listener...")
            await self.pubsub_manager.start()
            logger.info("[USERBOT][STEP 0.4] PubSub listener started")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º polling
            logger.info("[USERBOT][STEP 0.5] Starting polling...")
            await self.dp.start_polling(self.bot)
            
        except Exception as e:
            logger.error(f"[USERBOT][ERROR] Failed to start UserBot: {e}", exc_info=True)
        finally:
            await self.bot.session.close()

    async def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ —Å –ø–æ–ª–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π PubSub"""
        try:
            logger.info("[USERBOT][STEP 0] Starting UserBot in polling mode...")
            
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Redis
            logger.info("[USERBOT][STEP 0.0] Connecting to Redis...")
            await self.redis.connect()
            logger.info("[USERBOT][STEP 0.0] Redis connection established")
            
            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∫–∞–Ω–∞–ª—ã
            logger.info("[USERBOT][STEP 0.1] Subscribing to PubSub channels...")
            await self.pubsub_manager.subscribe("health_check", self._pubsub_message_handler)
            await self.pubsub_manager.subscribe("task_updates", self._pubsub_message_handler)
            logger.info("[USERBOT][STEP 0.2] Subscriptions completed")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª—è PubSub
            logger.info("[USERBOT][STEP 0.3] Starting PubSub listener...")
            await self.pubsub_manager.start()
            logger.info("[USERBOT][STEP 0.4] PubSub listener started")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
            self._start_background_tasks()
            
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å TaskBot
            logger.info("[USERBOT][STEP 0.5] Waiting for TaskBot to subscribe to channels...")
            await asyncio.sleep(2)  # 2 —Å–µ–∫—É–Ω–¥—ã –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º polling
            logger.info("[USERBOT][STEP 0.6] Starting polling...")
            await self.dp.start_polling(self.bot)
            
        except Exception as e:
            logger.error(f"[USERBOT][ERROR] Failed to start UserBot: {e}", exc_info=True)
        finally:
            await self.bot.session.close()

    async def _handle_status_change(self, task_id: str, update_data: dict):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏"""
        try:
            new_status = update_data.get('new_status')
            logger.info(f"[USERBOT][REACTION] Processing status change for task {task_id}: {new_status}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á—É –∏–∑ Redis
            task = await self.redis.get_task(task_id)
            if not task:
                logger.warning(f"[USERBOT][REACTION] Task {task_id} not found in Redis")
                return
            
            user_id = int(task.get('user_id', 0))
            chat_id = int(task.get('chat_id', 0))
            message_id = int(task.get('message_id', 0))
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
            if new_status:
                # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
                assignee = update_data.get("assignee", task.get("assignee"))
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É
                await self.redis.update_task(task_id, status=new_status, assignee=assignee)
                logger.info(f"[USERBOT] Task {task_id} status updated to {new_status}")
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ä–µ–∞–∫—Ü–∏—é
            reaction_map = {
                'waiting': '‚ö°',      # –°—Ç–∞–ª–∞ –∑–∞–¥–∞—á–µ–π
                'in_progress': '‚ö°',  # –í–∑—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É (–∏–∑–º–µ–Ω–µ–Ω–æ —Å üî• –Ω–∞ ‚ö°)
                'completed': 'üëå'     # –ó–∞–≤–µ—Ä—à–µ–Ω–∞ (–∏–∑–º–µ–Ω–µ–Ω–æ —Å ‚úÖ –Ω–∞ üëå)
            }
            
            if new_status in reaction_map:
                try:
                    await self.bot.set_message_reaction(
                        chat_id=chat_id,
                        message_id=message_id,
                        reaction=[{"type": "emoji", "emoji": reaction_map[new_status]}]
                    )
                    logger.info(f"[USERBOT][REACTION] Set reaction {reaction_map[new_status]} for task {task_id}")
                except Exception as e:
                    logger.warning(f"[USERBOT][REACTION] Could not set status reaction: {e}")
                    
        except Exception as e:
            logger.error(f"Error handling status change: {e}", exc_info=True)
    
    async def _handle_new_reply_pubsub(self, message: dict):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–¥–∞—á—É –∏–∑ PubSub"""
        try:
            logger.info(f"[USERBOT] Handling new reply from PubSub: {message}")
            
            task_id = message["task_id"]
            reply_text = message["reply_text"]
            reply_author = message["reply_author"]
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∑–∞–¥–∞—á—É
            task = await self.redis.get_task(task_id)
            if not task:
                logger.warning(f"[USERBOT] Task {task_id} not found for new reply")
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É —Å –æ—Ç–≤–µ—Ç–æ–º
            await self.redis.update_task(
                task_id, 
                reply=reply_text,
                reply_author=reply_author,
                reply_at=message.get("reply_at", datetime.now().isoformat())
            )
            logger.info(f"[USERBOT] Reply saved to task {task_id}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            user_id = int(task["user_id"])
            chat_id = int(task["chat_id"])
            message_id = int(task["message_id"])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ
            has_photo = message.get('has_photo', False)
            has_video = message.get('has_video', False)
            has_document = message.get('has_document', False)
            reply_support_media_message_id = message.get('reply_support_media_message_id')
            
            logger.info(f"[USERBOT][MEDIA] Reply media info: photo={has_photo}, video={has_video}, doc={has_document}, media_msg_id={reply_support_media_message_id}")
            
            try:
                # –ï—Å–ª–∏ –µ—Å—Ç—å –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö –∏–∑ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
                if has_photo or has_video or has_document:
                    photo_file_paths = message.get('photo_file_paths', [])
                    video_file_path = message.get('video_file_path')
                    document_file_path = message.get('document_file_path')
                    
                    logger.info(f"[USERBOT][MEDIA] Reply media files: photo={photo_file_paths}, video={video_file_path}, doc={document_file_path}")
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
                    if has_photo and photo_file_paths:
                        try:
                            photo_path = photo_file_paths[0]  # –ë–µ—Ä—ë–º –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ
                            if os.path.exists(photo_path):
                                photo_file = FSInputFile(photo_path)
                                sent_message = await self.bot.send_photo(
                                    chat_id=chat_id,
                                    photo=photo_file,
                                    caption=f"‚úÖ <b>–û—Ç–≤–µ—Ç:</b>\n\n{reply_text}" if reply_text else "‚úÖ <b>–û—Ç–≤–µ—Ç</b>",
                                    reply_to_message_id=message_id,
                                    parse_mode="HTML"
                                )
                                logger.info(f"[USERBOT][MEDIA] Photo reply sent to user: {sent_message.message_id}")
                                
                                # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –æ—Ç–≤–µ—Ç –≤ —Ç–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                                await self._forward_reply_to_user_topic(sent_message, user_id, chat_id, message_id)
                            else:
                                logger.warning(f"[USERBOT][MEDIA] Photo file not found: {photo_path}")
                                raise FileNotFoundError(f"Photo file not found: {photo_path}")
                        except Exception as photo_error:
                            logger.error(f"[USERBOT][MEDIA] Failed to send photo reply: {photo_error}")
                            # Fallback –∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
                            if reply_text:
                                sent_message = await self.bot.send_message(
                                    chat_id=chat_id,
                                    text=f"‚úÖ <b>–û—Ç–≤–µ—Ç:</b>\n\n{reply_text}",
                                    reply_to_message_id=message_id,
                                    parse_mode="HTML"
                                )
                                logger.info(f"[USERBOT] Text-only reply sent after photo failure: {sent_message.message_id}")
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ
                    elif has_video and video_file_path:
                        try:
                            if os.path.exists(video_file_path):
                                video_file = FSInputFile(video_file_path)
                                sent_message = await self.bot.send_video(
                                    chat_id=chat_id,
                                    video=video_file,
                                    caption=f"‚úÖ <b>–û—Ç–≤–µ—Ç:</b>\n\n{reply_text}" if reply_text else "‚úÖ <b>–û—Ç–≤–µ—Ç</b>",
                                    reply_to_message_id=message_id,
                                    parse_mode="HTML"
                                )
                                logger.info(f"[USERBOT][MEDIA] Video reply sent to user: {sent_message.message_id}")
                                
                                # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –æ—Ç–≤–µ—Ç –≤ —Ç–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                                await self._forward_reply_to_user_topic(sent_message, user_id, chat_id, message_id)
                            else:
                                logger.warning(f"[USERBOT][MEDIA] Video file not found: {video_file_path}")
                                raise FileNotFoundError(f"Video file not found: {video_file_path}")
                        except Exception as video_error:
                            logger.error(f"[USERBOT][MEDIA] Failed to send video reply: {video_error}")
                            # Fallback –∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
                            if reply_text:
                                sent_message = await self.bot.send_message(
                                    chat_id=chat_id,
                                    text=f"‚úÖ <b>–û—Ç–≤–µ—Ç:</b>\n\n{reply_text}",
                                    reply_to_message_id=message_id,
                                    parse_mode="HTML"
                                )
                                logger.info(f"[USERBOT] Text-only reply sent after video failure: {sent_message.message_id}")
                                
                                # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –æ—Ç–≤–µ—Ç –≤ —Ç–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                                await self._forward_reply_to_user_topic(sent_message, user_id, chat_id, message_id)
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
                    elif has_document and document_file_path:
                        try:
                            if os.path.exists(document_file_path):
                                document_file = FSInputFile(document_file_path)
                                sent_message = await self.bot.send_document(
                                    chat_id=chat_id,
                                    document=document_file,
                                    caption=f"‚úÖ <b>–û—Ç–≤–µ—Ç:</b>\n\n{reply_text}" if reply_text else "‚úÖ <b>–û—Ç–≤–µ—Ç</b>",
                                    reply_to_message_id=message_id,
                                    parse_mode="HTML"
                                )
                                logger.info(f"[USERBOT][MEDIA] Document reply sent to user: {sent_message.message_id}")
                                
                                # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –æ—Ç–≤–µ—Ç –≤ —Ç–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                                await self._forward_reply_to_user_topic(sent_message, user_id, chat_id, message_id)
                            else:
                                logger.warning(f"[USERBOT][MEDIA] Document file not found: {document_file_path}")
                                raise FileNotFoundError(f"Document file not found: {document_file_path}")
                        except Exception as doc_error:
                            logger.error(f"[USERBOT][MEDIA] Failed to send document reply: {doc_error}")
                            # Fallback –∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
                            if reply_text:
                                sent_message = await self.bot.send_message(
                                    chat_id=chat_id,
                                    text=f"‚úÖ <b>–û—Ç–≤–µ—Ç:</b>\n\n{reply_text}",
                                    reply_to_message_id=message_id,
                                    parse_mode="HTML"
                                )
                                logger.info(f"[USERBOT] Text-only reply sent after document failure: {sent_message.message_id}")
                                
                                # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –æ—Ç–≤–µ—Ç –≤ —Ç–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                                await self._forward_reply_to_user_topic(sent_message, user_id, chat_id, message_id)
                    
                    # –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ñ–∞–π–ª–æ–≤, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                    else:
                        if reply_text:
                            sent_message = await self.bot.send_message(
                                chat_id=chat_id,
                                text=f"‚úÖ <b>–û—Ç–≤–µ—Ç:</b>\n\n{reply_text}",
                                reply_to_message_id=message_id,
                                parse_mode="HTML"
                            )
                            logger.info(f"[USERBOT] Text-only reply sent (no valid media files): {sent_message.message_id}")
                            
                            # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –æ—Ç–≤–µ—Ç –≤ —Ç–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                            await self._forward_reply_to_user_topic(sent_message, user_id, chat_id, message_id)
                else:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
                    if reply_text:
                        sent_message = await self.bot.send_message(
                            chat_id=chat_id,
                            text=f"‚úÖ <b>–û—Ç–≤–µ—Ç:</b>\n\n{reply_text}",
                            reply_to_message_id=message_id,
                            parse_mode="HTML"
                        )
                        logger.info(f"[USERBOT] Text reply sent to user: {sent_message.message_id}")
                        
                        # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –æ—Ç–≤–µ—Ç –≤ —Ç–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        await self._forward_reply_to_user_topic(sent_message, user_id, chat_id, message_id)
                        
            except Exception as reply_error:
                logger.error(f"[USERBOT] Failed to send reply as reply, sending as regular message: {reply_error}")
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ reply, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                if reply_text:
                    sent_message = await self.bot.send_message(
                        chat_id=chat_id,
                        text=f"‚úÖ <b>–û—Ç–≤–µ—Ç:</b>\n\n{reply_text}",
                        parse_mode="HTML"
                    )
                    logger.info(f"[USERBOT] Reply sent as regular message: {sent_message.message_id}")
                    
                    # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –æ—Ç–≤–µ—Ç –≤ —Ç–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    await self._forward_reply_to_user_topic(sent_message, user_id, chat_id, message_id)
            
        except Exception as e:
            logger.error(f"Error handling new reply for task {task_id}: {e}", exc_info=True)
    
    async def _handle_task_update(self, channel: str, message: dict):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á –∏–∑ PubSub"""
        try:
            logger.info(f"[USERBOT] Received task update: {message}")
            event_type = message.get("type")
            
            if event_type == "task_update":
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏
                task_id = message["task_id"]
                new_text = message.get("updated_text", "")
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∑–∞–¥–∞—á—É
                task = await self.redis.get_task(task_id)
                if task:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏
                    task["text"] = new_text
                    await self.redis.set_task(task_id, task)
                    
                    logger.info(f"[USERBOT] Task {task_id} text updated")
            
        except Exception as e:
            logger.error(f"Error handling task update: {e}", exc_info=True)
    
    async def _handle_additional_reply(self, message: dict):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        try:
            logger.info(f"[USERBOT] Handling additional reply: {message}")
            
            task_id = message["task_id"]
            reply_text = message["reply_text"]
            reply_author = message["reply_author"]
            user_message_id = message["user_message_id"]
            user_chat_id = message["user_chat_id"]
            
            # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –≤ —Ç–µ–º—É
            task = await self.redis.get_task(task_id)
            user_id = int(task["user_id"]) if task else None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ
            has_photo = message.get('has_photo', False)
            has_video = message.get('has_video', False)
            has_document = message.get('has_document', False)
            reply_support_media_message_id = message.get('reply_support_media_message_id')
            
            logger.info(f"[USERBOT][ADDITIONAL][MEDIA] Reply media info: photo={has_photo}, video={has_video}, doc={has_document}, media_msg_id={reply_support_media_message_id}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            if user_message_id and user_chat_id:
                try:
                    # –ï—Å–ª–∏ –µ—Å—Ç—å –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö –∏–∑ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
                    if has_photo or has_video or has_document:
                        photo_file_paths = message.get('photo_file_paths', [])
                        video_file_path = message.get('video_file_path')
                        document_file_path = message.get('document_file_path')
                        
                        logger.info(f"[USERBOT][ADDITIONAL][MEDIA] Reply media files: photo={photo_file_paths}, video={video_file_path}, doc={document_file_path}")
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
                        if has_photo and photo_file_paths:
                            try:
                                photo_path = photo_file_paths[0]  # –ë–µ—Ä—ë–º –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ
                                if os.path.exists(photo_path):
                                    photo_file = FSInputFile(photo_path)
                                    sent_message = await self.bot.send_photo(
                                        chat_id=user_chat_id,
                                        photo=photo_file,
                                        caption=f"‚úÖ <b>–û—Ç–≤–µ—Ç:</b>\n\n{reply_text}" if reply_text else "‚úÖ <b>–û—Ç–≤–µ—Ç</b>",
                                        reply_to_message_id=user_message_id,
                                        parse_mode="HTML"
                                    )
                                    logger.info(f"[USERBOT][ADDITIONAL][MEDIA] Photo reply sent to user: {sent_message.message_id}")
                                    
                                    # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –æ—Ç–≤–µ—Ç –≤ —Ç–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                                    if user_id:
                                        await self._forward_reply_to_user_topic(sent_message, user_id, user_chat_id, user_message_id)
                                else:
                                    logger.warning(f"[USERBOT][ADDITIONAL][MEDIA] Photo file not found: {photo_path}")
                                    raise FileNotFoundError(f"Photo file not found: {photo_path}")
                            except Exception as photo_error:
                                logger.error(f"[USERBOT][ADDITIONAL][MEDIA] Failed to send photo reply: {photo_error}")
                                # Fallback –∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
                                if reply_text:
                                    sent_message = await self.bot.send_message(
                                        chat_id=user_chat_id,
                                        text=f"‚úÖ <b>–û—Ç–≤–µ—Ç:</b>\n\n{reply_text}",
                                        reply_to_message_id=user_message_id,
                                        parse_mode="HTML"
                                    )
                                    logger.info(f"[USERBOT][ADDITIONAL] Text-only reply sent after photo failure: {sent_message.message_id}")
                                    
                                    # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –æ—Ç–≤–µ—Ç –≤ —Ç–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                                    if user_id:
                                        await self._forward_reply_to_user_topic(sent_message, user_id, user_chat_id, user_message_id)
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ
                        elif has_video and video_file_path:
                            try:
                                if os.path.exists(video_file_path):
                                    video_file = FSInputFile(video_file_path)
                                    sent_message = await self.bot.send_video(
                                        chat_id=user_chat_id,
                                        video=video_file,
                                        caption=f"‚úÖ <b>–û—Ç–≤–µ—Ç:</b>\n\n{reply_text}" if reply_text else "‚úÖ <b>–û—Ç–≤–µ—Ç</b>",
                                        reply_to_message_id=user_message_id,
                                        parse_mode="HTML"
                                    )
                                    logger.info(f"[USERBOT][ADDITIONAL][MEDIA] Video reply sent to user: {sent_message.message_id}")
                                    
                                    # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –æ—Ç–≤–µ—Ç –≤ —Ç–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                                    if user_id:
                                        await self._forward_reply_to_user_topic(sent_message, user_id, user_chat_id, user_message_id)
                                else:
                                    logger.warning(f"[USERBOT][ADDITIONAL][MEDIA] Video file not found: {video_file_path}")
                                    raise FileNotFoundError(f"Video file not found: {video_file_path}")
                            except Exception as video_error:
                                logger.error(f"[USERBOT][ADDITIONAL][MEDIA] Failed to send video reply: {video_error}")
                                # Fallback –∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
                                if reply_text:
                                    sent_message = await self.bot.send_message(
                                        chat_id=user_chat_id,
                                        text=f"‚úÖ <b>–û—Ç–≤–µ—Ç:</b>\n\n{reply_text}",
                                        reply_to_message_id=user_message_id,
                                        parse_mode="HTML"
                                    )
                                    logger.info(f"[USERBOT][ADDITIONAL] Text-only reply sent after video failure: {sent_message.message_id}")
                                    
                                    # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –æ—Ç–≤–µ—Ç –≤ —Ç–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                                    if user_id:
                                        await self._forward_reply_to_user_topic(sent_message, user_id, user_chat_id, user_message_id)
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
                        elif has_document and document_file_path:
                            try:
                                if os.path.exists(document_file_path):
                                    document_file = FSInputFile(document_file_path)
                                    sent_message = await self.bot.send_document(
                                        chat_id=user_chat_id,
                                        document=document_file,
                                        caption=f"‚úÖ <b>–û—Ç–≤–µ—Ç:</b>\n\n{reply_text}" if reply_text else "‚úÖ <b>–û—Ç–≤–µ—Ç</b>",
                                        reply_to_message_id=user_message_id,
                                        parse_mode="HTML"
                                    )
                                    logger.info(f"[USERBOT][ADDITIONAL][MEDIA] Document reply sent to user: {sent_message.message_id}")
                                    
                                    # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –æ—Ç–≤–µ—Ç –≤ —Ç–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                                    if user_id:
                                        await self._forward_reply_to_user_topic(sent_message, user_id, user_chat_id, user_message_id)
                                else:
                                    logger.warning(f"[USERBOT][ADDITIONAL][MEDIA] Document file not found: {document_file_path}")
                                    raise FileNotFoundError(f"Document file not found: {document_file_path}")
                            except Exception as doc_error:
                                logger.error(f"[USERBOT][ADDITIONAL][MEDIA] Failed to send document reply: {doc_error}")
                                # Fallback –∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
                                if reply_text:
                                    sent_message = await self.bot.send_message(
                                        chat_id=user_chat_id,
                                        text=f"‚úÖ <b>–û—Ç–≤–µ—Ç:</b>\n\n{reply_text}",
                                        reply_to_message_id=user_message_id,
                                        parse_mode="HTML"
                                    )
                                    logger.info(f"[USERBOT][ADDITIONAL] Text-only reply sent after document failure: {sent_message.message_id}")
                                    
                                    # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –æ—Ç–≤–µ—Ç –≤ —Ç–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                                    if user_id:
                                        await self._forward_reply_to_user_topic(sent_message, user_id, user_chat_id, user_message_id)
                        
                        # –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ñ–∞–π–ª–æ–≤, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                        else:
                            if reply_text:
                                sent_message = await self.bot.send_message(
                                    chat_id=user_chat_id,
                                    text=f"‚úÖ <b>–û—Ç–≤–µ—Ç:</b>\n\n{reply_text}",
                                    reply_to_message_id=user_message_id,
                                    parse_mode="HTML"
                                )
                                logger.info(f"[USERBOT][ADDITIONAL] Text-only reply sent (no valid media files): {sent_message.message_id}")
                                
                                # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –æ—Ç–≤–µ—Ç –≤ —Ç–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                                if user_id:
                                    await self._forward_reply_to_user_topic(sent_message, user_id, user_chat_id, user_message_id)
                    else:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
                        if reply_text:
                            sent_message = await self.bot.send_message(
                                chat_id=user_chat_id,
                                text=f"‚úÖ <b>–û—Ç–≤–µ—Ç:</b>\n\n{reply_text}",
                                reply_to_message_id=user_message_id,
                                parse_mode="HTML"
                            )
                            logger.info(f"[USERBOT][ADDITIONAL] Text reply sent to user: {sent_message.message_id}")
                            
                            # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –æ—Ç–≤–µ—Ç –≤ —Ç–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                            if user_id:
                                await self._forward_reply_to_user_topic(sent_message, user_id, user_chat_id, user_message_id)
                            
                except Exception as reply_error:
                    logger.error(f"[USERBOT][ADDITIONAL] Failed to send reply as reply, sending as regular message: {reply_error}")
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ reply, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    if reply_text:
                        sent_message = await self.bot.send_message(
                            chat_id=user_chat_id,
                            text=f"‚úÖ <b>–û—Ç–≤–µ—Ç:</b>\n\n{reply_text}",
                            parse_mode="HTML"
                        )
                        logger.info(f"[USERBOT][ADDITIONAL] Reply sent as regular message: {sent_message.message_id}")
                        
                        # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –æ—Ç–≤–µ—Ç –≤ —Ç–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        if user_id:
                            await self._forward_reply_to_user_topic(sent_message, user_id, user_chat_id, user_message_id)
            
        except Exception as e:
            logger.error(f"Error handling additional reply: {e}", exc_info=True)

# –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞
user_bot_instance = UserBot()

# –î–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –¥—Ä—É–≥–∏–º–∏ –º–æ–¥—É–ª—è–º–∏
async def get_user_bot() -> UserBot:
    return user_bot_instance

if __name__ == "__main__":
    asyncio.run(user_bot_instance.start())
