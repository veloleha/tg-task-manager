import asyncio
import logging
from typing import Dict, Optional
from datetime import datetime, timedelta
from aiogram import Bot
from core.redis_client import redis_client

logger = logging.getLogger(__name__)

class TopicManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ–º–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–æ—Ä—É–º–Ω—ã—Ö —á–∞—Ç–∞—Ö"""
    
    def __init__(self, bot: Bot):
        self.bot = bot
        self.redis = redis_client
        
    async def get_or_create_user_topic(self, chat_id: int, user_id: int, username: str = None, first_name: str = None) -> Optional[int]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ç–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –¥–∞–Ω–Ω–æ–º —á–∞—Ç–µ –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —á–∞—Ç —Ñ–æ—Ä—É–º–æ–º
            chat_info = await self.bot.get_chat(chat_id)
            if not chat_info.is_forum:
                logger.info(f"Chat {chat_id} is not a forum, skipping topic creation")
                return None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∞–∫—Ç–∏–≤–Ω—É—é —Ç–µ–º—É
            existing_topic = await self._get_active_user_topic(chat_id, user_id)
            if existing_topic:
                logger.info(f"Found existing topic {existing_topic} for user {user_id} in chat {chat_id}")
                return existing_topic
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç–µ–º—É
            topic_id = await self._create_user_topic(chat_id, user_id, username, first_name)
            if topic_id:
                await self._save_user_topic(chat_id, user_id, topic_id)
                logger.info(f"Created new topic {topic_id} for user {user_id} in chat {chat_id}")
            
            return topic_id
            
        except Exception as e:
            logger.error(f"Error managing topic for user {user_id} in chat {chat_id}: {e}")
            return None
    
    async def _get_active_user_topic(self, chat_id: int, user_id: int) -> Optional[int]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é —Ç–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –¥–∞–Ω–Ω–æ–º —á–∞—Ç–µ"""
        try:
            topic_data = await self.redis.get(f"user_topic:{chat_id}:{user_id}")
            if topic_data:
                # –ü–∞—Ä—Å–∏–º JSON –¥–∞–Ω–Ω—ã–µ
                import json
                if isinstance(topic_data, str):
                    data = json.loads(topic_data)
                elif isinstance(topic_data, bytes):
                    data = json.loads(topic_data.decode('utf-8'))
                else:
                    # –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ dict
                    data = topic_data
                
                topic_id = data.get('topic_id')
                if topic_id:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–º–∞ –µ—â–µ –∞–∫—Ç–∏–≤–Ω–∞
                    if await self._is_topic_active(chat_id, int(topic_id)):
                        return int(topic_id)
                    else:
                        # –£–¥–∞–ª—è–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—É—é —Ç–µ–º—É
                        await self.redis.delete(f"user_topic:{chat_id}:{user_id}")
                        await self.redis.delete(f"topic_user:{chat_id}:{topic_id}")
            return None
        except Exception as e:
            logger.error(f"Error getting active topic for user {user_id} in chat {chat_id}: {e}")
            return None
    
    async def _is_topic_active(self, chat_id: int, topic_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ —Ç–µ–º–∞"""
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –≤ —Ç–µ–º—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –µ—ë —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è
            await self.bot.send_chat_action(
                chat_id=chat_id,
                action="typing",
                message_thread_id=topic_id
            )
            return True
        except Exception as e:
            error_msg = str(e).lower()
            if "message thread not found" in error_msg:
                logger.warning(f"Topic {topic_id} in chat {chat_id} not found: {e}")
                # –£–¥–∞–ª—è–µ–º —Ç–µ–º—É –∏–∑ Redis –ø—Ä–∏ —Ç–∞–∫–æ–π –æ—à–∏–±–∫–µ
                # –ü–æ–∏—Å–∫ –≤—Å–µ—Ö –∫–ª—é—á–µ–π, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å —ç—Ç–æ–π —Ç–µ–º–æ–π
                pattern = f"topic_user:{chat_id}:{topic_id}"
                topic_user_key = await self.redis.get(pattern)
                if topic_user_key:
                    # –£–¥–∞–ª—è–µ–º –æ–±–µ –∑–∞–ø–∏—Å–∏
                    await self.redis.delete(pattern)
                    await self.redis.delete(f"user_topic:{chat_id}:{topic_user_key}")
            else:
                logger.warning(f"Topic {topic_id} in chat {chat_id} is not active: {e}")
            return False
    
    async def _create_user_topic(self, chat_id: int, user_id: int, username: str = None, first_name: str = None) -> Optional[int]:
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é —Ç–µ–º—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —á–∞—Ç–µ"""
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã
            if username:
                topic_name = f"üë§ @{username} (ID: {user_id})"
            elif first_name:
                topic_name = f"üë§ {first_name} (ID: {user_id})"
            else:
                topic_name = f"üë§ User {user_id}"
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ–º—É –≤ —Ñ–æ—Ä—É–º–µ
            topic = await self.bot.create_forum_topic(
                chat_id=chat_id,
                name=topic_name,
                icon_color=0x6FB9F0  # –ì–æ–ª—É–±–æ–π —Ü–≤–µ—Ç
            )
            
            return topic.message_thread_id
            
        except Exception as e:
            error_msg = str(e).lower()
            if "bad request" in error_msg:
                logger.error(f"BadRequest error creating topic for user {user_id} in chat {chat_id}: {e}")
                logger.error(f"Bot may not have admin rights in chat {chat_id} or chat is not a forum")
            else:
                logger.error(f"Error creating topic for user {user_id} in chat {chat_id}: {e}")
            return None
    
    async def _save_user_topic(self, chat_id: int, user_id: int, topic_id: int):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–º–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            import json
            topic_data = {
                'chat_id': chat_id,
                'user_id': user_id,
                'topic_id': topic_id,
                'created_at': datetime.utcnow().isoformat(),
                'last_activity': datetime.utcnow().isoformat()
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await self.redis.set(
                f"user_topic:{chat_id}:{user_id}",
                json.dumps(topic_data)
            )
            
            # –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å topic_id -> user_id
            await self.redis.set(
                f"topic_user:{chat_id}:{topic_id}",
                str(user_id)
            )
            
        except Exception as e:
            logger.error(f"Error saving topic data: {e}")
    
    async def _delete_user_topic_cache(self, chat_id: int, user_id: int):
        """–£–¥–∞–ª—è–µ—Ç —Ç–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫—ç—à–∞ –±–µ–∑ –∑–∞–∫—Ä—ã—Ç–∏—è"""
        try:
            topic_data = await self.redis.get(f"user_topic:{chat_id}:{user_id}")
            if topic_data:
                import json
                data = json.loads(topic_data)
                topic_id = data['topic_id']
                
                # –£–¥–∞–ª—è–µ–º –∏–∑ Redis –±–µ–∑ –∑–∞–∫—Ä—ã—Ç–∏—è —Ç–µ–º—ã
                await self.redis.delete(f"user_topic:{chat_id}:{user_id}")
                await self.redis.delete(f"topic_user:{chat_id}:{topic_id}")
                
                logger.info(f"Deleted cache for topic {topic_id} for user {user_id} in chat {chat_id}")
                
        except Exception as e:
            logger.error(f"Error deleting topic cache for user {user_id} in chat {chat_id}: {e}")

    async def _close_user_topic(self, chat_id: int, user_id: int):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Ç–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            topic_data = await self.redis.get(f"user_topic:{chat_id}:{user_id}")
            if topic_data:
                import json
                data = json.loads(topic_data)
                topic_id = data['topic_id']
                
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–µ–º—É
                await self.bot.close_forum_topic(
                    chat_id=chat_id,
                    message_thread_id=topic_id
                )
                
                # –£–¥–∞–ª—è–µ–º –∏–∑ Redis
                await self.redis.delete(f"user_topic:{chat_id}:{user_id}")
                await self.redis.delete(f"topic_user:{chat_id}:{topic_id}")
                
                logger.info(f"Closed topic {topic_id} for user {user_id} in chat {chat_id}")
                
        except Exception as e:
            logger.error(f"Error closing topic for user {user_id} in chat {chat_id}: {e}")
    
    async def update_topic_activity(self, chat_id: int, user_id: int):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ —Ç–µ–º–µ"""
        try:
            topic_data = await self.redis.get(f"user_topic:{chat_id}:{user_id}")
            if topic_data:
                import json
                data = json.loads(topic_data)
                data['last_activity'] = datetime.utcnow().isoformat()
                
                await self.redis.set(
                    f"user_topic:{chat_id}:{user_id}",
                    json.dumps(data)
                )
                
        except Exception as e:
            logger.error(f"Error updating topic activity: {e}")
    
    async def get_user_by_topic(self, chat_id: int, topic_id: int) -> Optional[int]:
        """–ü–æ–ª—É—á–∞–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID —Ç–µ–º—ã"""
        try:
            user_id = await self.redis.get(f"topic_user:{chat_id}:{topic_id}")
            if user_id:
                return int(user_id)
            return None
            
        except Exception as e:
            logger.error(f"Error getting user by topic {topic_id} in chat {chat_id}: {e}")
            return None
    
    async def cleanup_inactive_topics(self, chat_id: int):
        """–û—á–∏—â–∞–µ—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–µ–º—ã –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —á–∞—Ç–µ"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–µ–º—ã –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞
            pattern = f"user_topic:{chat_id}:*"
            keys = []
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º scan –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–µ–π
            cursor = 0
            while True:
                cursor, batch = await self.redis.conn.scan(cursor, match=pattern, count=100)
                keys.extend(batch)
                if cursor == 0:
                    break
            
            for key in keys:
                if isinstance(key, bytes):
                    key = key.decode('utf-8')
                    
                topic_data = await self.redis.get(key)
                if topic_data:
                    import json
                    data = json.loads(topic_data)
                    
                    last_activity = datetime.fromisoformat(data['last_activity'])
                    if datetime.utcnow() - last_activity > timedelta(hours=24):
                        user_id = data['user_id']
                        await self._close_user_topic(chat_id, user_id)
                        logger.info(f"Cleaned up inactive topic for user {user_id} in chat {chat_id}")
            
        except Exception as e:
            logger.error(f"Error cleaning up topics in chat {chat_id}: {e}")
